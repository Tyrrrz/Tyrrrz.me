<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog | Alexey Golub]]></title><description><![CDATA[Blog | Alexey Golub]]></description><link>http://localhost:3000</link><generator>RSS for Node</generator><lastBuildDate>Thu, 27 Aug 2020 11:54:39 GMT</lastBuildDate><atom:link href="http://localhost:3000/blog/rss.xml" rel="self" type="application/rss+xml"/><language><![CDATA[en]]></language><ttl>60</ttl><item><title><![CDATA[Pure-Impure Segregation Principle]]></title><description><![CDATA[<p>About two months ago I published an article titled <a href="http://localhost:3000/blog/unit-testing-is-overrated">"Unit Testing is Overrated"</a> where I shared my thoughts on how developers place way too much faith in that testing approach and why it often isn't the best tool for the job. While I didn't expect that post to do particularly well, in three weeks it managed to get over 100K views and 1000 comments, even despite its controversial nature (or, perhaps, owing to it?).</p>
<p>It was really interesting to follow the discussions that unfolded, given the vast contrast of opinions people seemed to have on the subject. And while most commenters mainly shared their personal experiences, a few have also voiced criticism of the way some arguments were presented.</p>
<p>In particular, one person mentioned that the drawbacks I've described, especially those pertaining to abstractions and mocking, are really just a byproduct of object-oriented programming and its inherent flaws. Had my examples been designed with functional principles in mind, many of the outlined problems would never have surfaced.</p>
<p>More specifically, the suggested solution was to refactor the presented class hierarchy by extracting the pure business logic away from the rest of the code. Getting rid of the impure dependency eliminates the need for mocking, which in turn simplifies unit testing.</p>
<p>This exact approach was actually mentioned in later parts of the post as well, albeit in a slightly different context. Although it does make isolated testing easier for that particular snippet of code, it doesn't actually invalidate the main issues raised by the article.</p>
<p>That said, I also think that the underlying principle of code separation based on purity is very important and often overlooked. When used correctly, it can positively influence software design, providing benefits in terms of readability, portability and, as mentioned, unit testing.</p>
<p>Depending on who you ask, this principle may have different names, such as <a href="https://destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell">functional core, imperative shell</a>, <a href="https://blog.ploeh.dk/2017/02/02/dependency-rejection">impure-pure-impure sandwich</a>, and some others. And while most developers seem to agree on its value, there's still some misunderstanding remaining as to how it's applied beyond simple academic examples.</p>
<p>At the end of the day, just like with any other software development pattern, its usefulness is entirely situational. However, it offers a good mental model for reasoning about non-determinism in code, which is relevant regardless of context.</p>
<p>In this article we will look at what actually makes something pure or impure, why is that important to us, and how we can leverage that knowledge to write better software. I will show examples of where applying this principle lends to better design, as well scenarios where it might not be as helpful.</p>
<p><em>Note: as usual, the code samples in this article are written in C#, but the main ideas apply to any language.</em></p>
<h2>Pure vs impure</h2>
<p>As I'm writing this in 2020, there is no doubt that most readers are already familiar with the concept of purity in programming. Nevertheless, let's go over it one more time to make sure we are on the same page.</p>
<p>In essence, <em>pure code</em> is code encapsulated within a function, whose <strong>evaluation is influenced only by its parameters</strong> and whose <strong>evaluation influences only its returned value</strong>. In other words, a pure function doesn't have any implicit arguments, doesn't depend on or interact with external state, and doesn't generate any observable <em>side-effects</em>.</p>
<p>Conversely, a function which breaks at least one of those two rules is called <em>impure</em>. To illustrate this, let's look at a very simple example:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFoodEdible</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> expiration<span class="token punctuation">)</span> <span class="token operator">=></span>
    DateTimeOffset<span class="token punctuation">.</span>Now <span class="token operator">&#x3C;</span> expiration<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFoodEdible</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> expiration<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> instant<span class="token punctuation">)</span> <span class="token operator">=></span>
    instant <span class="token operator">&#x3C;</span> expiration<span class="token punctuation">;</span>
</code></pre>
<p>While both versions of the <code>IsFoodEdible</code> function are similar, only one of them is pure. The first overload gets the current time from the system clock, creating an implicit dependency on some external state. In practice, this means that evaluating the function multiple times may very well produce different results even for the same input parameters, which violates the first rule of purity.</p>
<p>The other version takes the current time as an explicit parameter instead and thus does not exhibit that problem. Regardless of whether we call that function now or ten years into the future, the result is guaranteed to always be the same for the same input. In other words, the behavior of the function depends only on the parameters that were passed to it and nothing else.</p>
<p>Because of that, the second function shown in the above example is pure, while the first one isn't. Additionally, the following variant would be impure as well:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IsFoodEdible</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> expiration<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> instant<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instant <span class="token operator">&#x3C;</span> expiration<span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"It's edible."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"It's not edible."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In this case, the impurity comes from the fact that this function generates side-effects by interacting with the standard output stream. Since its evaluation influences something other than its returned value, it breaks the second rule we outlined earlier.</p>
<p>As a general rule, <strong>any function that doesn't return anything</strong> (or whose return value may be ignored) <strong>is guaranteed to be impure</strong>, because a pure function without a return value is inherently useless. Furthermore, if a function executes asynchronously, it's also a reliable giveaway that a function is impure, since asynchrony naturally comes from I/O operations.</p>
<p>Finally, the function in the following example may seem impure at a first glance too, but actually isn't:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">AllFoodEdible</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>DateTimeOffset<span class="token punctuation">></span></span> expirations<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> instant<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> expirations<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instant <span class="token operator">>=</span> expirations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Seeing as <code>AllFoodEdible</code> mutates the value of <code>i</code> during the course of its execution, one could think that such a function is not pure either. However, because the variable <code>i</code> is encapsulated within a local scope and cannot be accessed from outside, this mutation is not externally observable and, as such, does not make the function impure.</p>
<p>Now, of course it wouldn't make much sense to classify code based on these seemingly arbitrary traits if purity didn't provide us with some useful benefits. Indeed, since pure functions are deterministic and have no side-effects, they possess the following intrinsic qualities:</p>
<ul>
<li>Easy to reason about</li>
<li>Can be safely cached</li>
<li>Can be safely parallelized</li>
<li>Testable in isolation</li>
<li>Don't execute asynchronously</li>
<li>Don't influence other functions</li>
</ul>
<p>Judging by this list alone, it's rather clear that pure code is extremely flexible and convenient to work with. In fact, the initial instinct may be that we should optimize our design in such way that we focus exclusively on writing pure code.</p>
<p>Unfortunately, that's not possible because <strong>purity</strong>, in itself, <strong>is not an indication of quality, but rather of purpose</strong>. Any program will invariably have impure code, as it's required to handle infrastructural concerns, such as reading user input, persisting data, making changes in the environment, and all the other things that make our software actually useful.</p>
<p>These aspects are dictated by the functional requirements of the software and not so much by its design. That means that we can't simply eliminate impurities from our code, at least not without also changing how it works.</p>
<p>Having said that, one very important characteristic of <strong>impurity</strong> is that it's <strong>inherently contagious</strong>. Any function that depends on the execution of an impure function becomes impure as well:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Impure function</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Impure function (calls an impure function)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFilePath</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dirPath<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span> <span class="token operator">=></span>
    dirPath <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Pure function (takes the result of impure function as a parameter)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFilePath</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> dirPath<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span> <span class="token operator">=></span>
    dirPath <span class="token operator">+</span> name <span class="token operator">+</span> id<span class="token punctuation">;</span>
</code></pre>
<p>Depending on how the code is structured and how it interacts with non-deterministic and effectful operations, impurities may make up a larger or smaller portion of the whole. That, in turn, is something we can actually control.</p>
<p>In order to reap the most benefit out of pure functions, we need to design software in a way that <strong>limits impure interactions and delays them as much as possible</strong>. Ideally, we should strive to push them as far out as we can, towards the <em>boundaries of the system</em>.</p>
<h2>Flattening the dependency tree</h2>
<p>Although the concept of purity forms the foundation of functional programming, it isn't given as much thought in the object-oriented world. In fact, the main purpose of object-oriented design is to aggregate related behavior in a single contextual entity, which usually involves state and mutations.</p>
<p>Software written with OOP in mind follows a hierarchical design, where objects are composed together to represent different layers of abstraction in a connected fashion. Any impurities that may exist in those objects are free to spread from child to parent, potentially contaminating the entire dependency tree.</p>
<p>To better understand what that means in practice, let's revisit an example from my previous article. The idea was to build a simple web API application that calculates user's sunrise and sunset times based on their IP. This functionality can be modeled using three classes:</p>
<ul>
<li><code>LocationProvider</code> to get a location from an IP address, using a public GeoIP database</li>
<li><code>SolarCalculator</code> to calculate solar times from that location</li>
<li><code>SolarTimesController</code> to expose the result through an HTTP endpoint</li>
</ul>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> _httpClient<span class="token punctuation">;</span>

    <span class="token comment">/* ... */</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token class-name">IPAddress</span> ip<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ipFormatted <span class="token operator">=</span> <span class="token operator">!</span>ip<span class="token punctuation">.</span><span class="token function">IsLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">?</span> ip<span class="token punctuation">.</span><span class="token function">MapToIPv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token comment">// Impure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">GetJsonAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"http://ip-api.com/json/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ipFormatted</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> latitude <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"lat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> longitude <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"lon"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">LocationProvider</span> _locationProvider<span class="token punctuation">;</span>

    <span class="token comment">/* ... */</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">DateTimeOffset</span> <span class="token function">CalculateSunrise</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Pure (implementation omitted) */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">DateTimeOffset</span> <span class="token function">CalculateSunset</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* Pure (implementation omitted) */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span><span class="token class-name">IPAddress</span> ip<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Impure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">await</span> _locationProvider<span class="token punctuation">.</span><span class="token function">GetLocationAsync</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunrise <span class="token operator">=</span> <span class="token function">CalculateSunrise</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunset <span class="token operator">=</span> <span class="token function">CalculateSunset</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarTimes</span><span class="token punctuation">(</span>sunrise<span class="token punctuation">,</span> sunset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span><span class="token punctuation">,</span> <span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"solartimes"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarTimeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SolarCalculator</span> _solarCalculator<span class="token punctuation">;</span>

    <span class="token comment">/* ... */</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"by_ip"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesByIp</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset<span class="token punctuation">?</span></span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Impure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _solarCalculator<span class="token punctuation">.</span><span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span>
            HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">,</span>
            date <span class="token operator">??</span> DateTimeOffset<span class="token punctuation">.</span>Now
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Note how these three classes represent a vertical slice from a potentially much more involved object hierarchy. Schematically, the flow of data in this relationship can be depicted like so:</p>
<pre class="language-ini"><code class="language-ini"><span class="token selector"> [ LocationProvider ]</span>
           |
           ↓
<span class="token selector">  [ SolarCalculator ]</span>
           |
           ↓
<span class="token selector">[ SolarTimesController ]</span>
</code></pre>
<p>This is a very typical scenario for "classically" designed object-oriented software. You'll probably find it extremely familiar if you have experience working on code that follows the <a href="https://en.wikipedia.org/wiki/Multitier_architecture">n-tier architecture</a> or any other similar pattern.</p>
<p>If we consider this relationship from a standpoint of purity, we'll notice that the entire call chain shown previously is impure. And while for <code>LocationProvider</code> it makes sense because it performs non-deterministic I/O, the <code>SolarCalculator</code> is impure only due to its dependency on the former.</p>
<p>That design is not ideal, because we lose out on the benefits of pure functions without really getting anything in return. Now if we wanted to, for example, test <code>SolarCalculator.GetSolarTimesAsync</code> in isolation, we would only be able do that with the help of an autotelic abstraction and a mock object, which is not desirable.</p>
<p>This issue could've been avoided if we architected our code with the pure-impure segregation principle in mind. Let's see how we can refactor our classes to push the impurities out of <code>SolarCalculator</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationProvider</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">SolarTimes</span> <span class="token function">GetSolarTimes</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunrise <span class="token operator">=</span> <span class="token function">CalculateSunrise</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunset <span class="token operator">=</span> <span class="token function">CalculateSunset</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarTimes</span><span class="token punctuation">(</span>sunrise<span class="token punctuation">,</span> sunset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span><span class="token punctuation">,</span> <span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"solartimes"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarTimesController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">LocationProvider</span> _locationProvider<span class="token punctuation">;</span>

    <span class="token comment">/* ... */</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"by_ip"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesByIp</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset<span class="token punctuation">?</span></span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Impure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">await</span> _locationProvider<span class="token punctuation">.</span><span class="token function">GetLocationAsync</span><span class="token punctuation">(</span>
            HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> SolarCalculator<span class="token punctuation">.</span><span class="token function">GetSolarTimes</span><span class="token punctuation">(</span>
            location<span class="token punctuation">,</span>
            date <span class="token operator">??</span> DateTimeOffset<span class="token punctuation">.</span>Now
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Previously, the method in <code>SolarCalculator</code> took an IP address as a parameter and relied on <code>LocationProvider</code> to get the coordinates it maps to. After refactoring, the method is now static and instead takes the location directly, skipping the previously required impure operation.</p>
<p>Of course, that impurity didn't just disappear into thin air, our software still needs to get the location anyhow. The difference is that now this concern is pushed out towards the boundary of the system, which, in this case, is represented by the controller.</p>
<p>In doing that, we also flattened the hierarchy so that all of the dependencies are aggregated at the boundary. The data flow now looks a bit more like a pipeline instead:</p>
<pre class="language-ini"><code class="language-ini"><span class="token selector">[ LocationProvider ]</span><span class="token selector">  [ SolarCalculator ]</span>
          |                   |
          |_____         _____|
                ↓       ↓
<span class="token selector">        [ SolarTimesController ]</span>
</code></pre>
<p>The benefit of this design is that our pure business logic is no longer contaminated by effectful code, which means we can take advantage of the useful properties listed in the previous section. For example, if we wanted to parallelize or test <code>SolarCalculator</code>, it's much easier to do so now than it was before.</p>
<h2>Interleaved impurities</h2>
<p>Although very useful, the type of "lossless" refactoring shown earlier only works if the data required by the function can be easily encapsulated within input parameters. Unfortunately, this is not always the case.</p>
<p>Often a function may need to dynamically resolve data from an external API or a database, with no way of knowing about it beforehand. This typically results in an implementation where pure and impure concerns are interleaved with each other, creating a tightly coupled cohesive structure.</p>
<p>To illustrate a scenario like that, let's take a look at a slightly more involved example. The following snippet contains a class called <code>RecommendationsProvider</code> which is responsible for generating song suggestions for a user of some music streaming service:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecommendationsProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SongService</span> _songService<span class="token punctuation">;</span>

    <span class="token comment">/* ... */</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IReadOnlyList<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">GetRecommendationsAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> userName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 1. Get user's own top scrobbles</span>
        <span class="token comment">// 2. Get other users who listened to the same songs</span>
        <span class="token comment">// 3. Get top scrobbles of those users</span>
        <span class="token comment">// 4. Aggregate the songs into recommendations</span>

        <span class="token comment">// Impure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> scrobbles <span class="token operator">=</span> <span class="token keyword">await</span> _songService<span class="token punctuation">.</span><span class="token function">GetTopScrobblesAsync</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> scrobblesSnapshot <span class="token operator">=</span> scrobbles
            <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>ScrobbleCount<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> recommendationCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> scrobble <span class="token keyword">in</span> scrobblesSnapshot<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Impure</span>
            <span class="token class-name"><span class="token keyword">var</span></span> otherListeners <span class="token operator">=</span> <span class="token keyword">await</span> _songService
                <span class="token punctuation">.</span><span class="token function">GetTopListenersAsync</span><span class="token punctuation">(</span>scrobble<span class="token punctuation">.</span>Song<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Pure</span>
            <span class="token class-name"><span class="token keyword">var</span></span> otherListenersSnapsot <span class="token operator">=</span> otherListeners
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>TotalScrobbleCount <span class="token operator">>=</span> <span class="token number">10_000</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>TotalScrobbleCount<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> otherListener <span class="token keyword">in</span> otherListenersSnapsot<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// Impure</span>
                <span class="token class-name"><span class="token keyword">var</span></span> otherScrobbles <span class="token operator">=</span> <span class="token keyword">await</span> _songService
                    <span class="token punctuation">.</span><span class="token function">GetTopScrobblesAsync</span><span class="token punctuation">(</span>otherListener<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// Pure</span>
                <span class="token class-name"><span class="token keyword">var</span></span> otherScrobblesSnapshot <span class="token operator">=</span> otherScrobbles
                    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">.</span>IsVerifiedArtist<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">.</span>Rating<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                recommendationCandidates<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>
                    otherScrobblesSnapshot<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> recommendations <span class="token operator">=</span> recommendationCandidates
            <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Rating<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> recommendations<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The above algorithm works by retrieving the user's most listened songs, finding other people who have also listened to the same titles, and then extracting their top songs as well. Those songs are then aggregated into a list of recommendations and returned back to the caller.</p>
<p>It's quite clear that this function would benefit greatly from being pure, seeing how much business logic is encapsulated within it. Unfortunately, the technique we relied upon earlier won't work here.</p>
<p>In order to fully isolate <code>GetRecommendationsAsync</code> from its impure dependencies, we would have to somehow supply the function with an entire list of songs, users, and their scrobbles upfront. If we assume that we're dealing with data on millions of users, it's obvious that this would be completely impractical and likely even impossible.</p>
<p>A seemingly simple way we could try to work around this problem is to split the function into smaller pieces, each handling one of the four stages of the algorithm separately:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecommendationsProvider</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>

    <span class="token comment">// Pure</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">HandleOwnScrobbles</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>Scrobble<span class="token punctuation">></span></span> scrobbles<span class="token punctuation">)</span> <span class="token operator">=></span>
        scrobbles
            <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>ScrobbleCount<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Pure</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">HandleOtherListeners</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>User<span class="token punctuation">></span></span> users<span class="token punctuation">)</span> <span class="token operator">=></span>
        users
            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>TotalScrobbleCount <span class="token operator">>=</span> <span class="token number">10_000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>TotalScrobbleCount<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>u <span class="token operator">=></span> u<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Pure</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span></span> <span class="token function">HandleOtherScrobbles</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>Scrobble<span class="token punctuation">></span></span> scrobbles<span class="token punctuation">)</span> <span class="token operator">=></span>
        scrobbles
            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">.</span>IsVerifiedArtist<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">.</span>Rating<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Song<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Pure</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span></span> <span class="token function">FinalizeRecommendations</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span></span> songs<span class="token punctuation">)</span> <span class="token operator">=></span>
        songs
            <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Rating<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IReadOnlyList<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">GetRecommendationsAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> userName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Impure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> scrobbles <span class="token operator">=</span> <span class="token keyword">await</span> _songService<span class="token punctuation">.</span><span class="token function">GetTopScrobblesAsync</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Pure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> songIds <span class="token operator">=</span> <span class="token function">HandleOwnScrobbles</span><span class="token punctuation">(</span>scrobbles<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> recommendationCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&#x3C;</span>Song<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> songId <span class="token keyword">in</span> songIds<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// Impure</span>
            <span class="token class-name"><span class="token keyword">var</span></span> otherListeners <span class="token operator">=</span> <span class="token keyword">await</span> _songService
                <span class="token punctuation">.</span><span class="token function">GetTopListenersAsync</span><span class="token punctuation">(</span>songId<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Pure</span>
            <span class="token class-name"><span class="token keyword">var</span></span> otherUserNames <span class="token operator">=</span> <span class="token function">HandleOtherListeners</span><span class="token punctuation">(</span>otherListeners<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> otherUserName <span class="token keyword">in</span> otherUserNames<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// Impure</span>
                <span class="token class-name"><span class="token keyword">var</span></span> otherScrobbles <span class="token operator">=</span> <span class="token keyword">await</span> _songService
                    <span class="token punctuation">.</span><span class="token function">GetTopScrobblesAsync</span><span class="token punctuation">(</span>otherListener<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// Pure</span>
                <span class="token class-name"><span class="token keyword">var</span></span> songsToRecommend <span class="token operator">=</span> <span class="token function">HandleOtherScrobbles</span><span class="token punctuation">(</span>otherScrobbles<span class="token punctuation">)</span><span class="token punctuation">;</span>

                recommendationCandidates<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>songsToRecommend<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Pure</span>
        <span class="token keyword">return</span> <span class="token function">FinalizeRecommendations</span><span class="token punctuation">(</span>recommendationCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>By extracting all of the pure code out of <code>GetRecommendationsAsync</code>, we can now write unit tests that verify that the intermediate stages of the algorithm work as intended. On the surface, it looks as though we managed to achieve exactly what we wanted.</p>
<p>However, instead of having one cohesive element to reason about, we ended up with multiple fragments, each having no meaning or value of its own. While unit testing of individual parts may have become easier, the benefit is very questionable, as it provides no confidence in the correctness of the algorithm as a whole.</p>
<p>Ultimately, we weren't able to push impurities out towards the system boundaries -- what we did was simply push the pure code further in instead. In other words, the flow of data in the program remains completely unchanged.</p>
<p>The main issue is that each stage of the recommendation algorithm depends on additional data derived from the previous stages. Since this behavior is inherently non-deterministic, it's impossible to express it using pure functions.</p>
<h2>Pure "enough" code</h2>
<p>Although it's convenient to treat purity as an objectively provable characteristic, it's actually a bit more nuanced than that. As a matter of fact, one could say that purity is a relative concept, not an absolute one.</p>
<p>To understand what exactly I mean by that, let's take a look at an example:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">FindIndexOf</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&#x3C;</span>Item<span class="token punctuation">></span></span> items<span class="token punctuation">,</span> <span class="token class-name">Item</span> item<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> o <span class="token keyword">in</span> items<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> item<span class="token punctuation">)</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>

        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Item not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This is a very simple function that attempts to find an index that corresponds to the position of an item in a sequence or throw an exception in case of failure. The negative outcome is assumed to be very improbable in this scenario, hence why an exception is used as opposed to a fallback value.</p>
<p>According to the criteria of purity, this function is not pure because the result of its evaluation is not entirely encapsulated within the returned value. Throwing an exception is an effectful operation, since it can change the behavior of the function above in the call stack, or lead to the termination of the program altogether.</p>
<p>However, despite all that, the function is still deterministic, cacheable, parallelizable, and testable, as long as we remember to handle the exception that may be raised in certain circumstances. Even though it's not technically pure, it still retains most of the important properties we care about.</p>
<p>Let's consider an even simpler example:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> period<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">value</span> <span class="token operator">%</span> period<span class="token punctuation">;</span>
</code></pre>
<p>Seeing as the above code literally just represents a mathematical expression, it seems logical that it must be pure. However, this function shares the exact same problem as the one in the previous snippet.</p>
<p>The modulus operator has an exceptional outcome, which occurs when the supplied divisor is equal to <em>zero</em>. If we were to try and invoke <code>Wrap(123, 0)</code>, it would throw an exception, indicating that the function is actually impure as well.</p>
<p>Notably, this problem could be avoided if we used something like <code>Option&#x3C;int></code> as return type instead. This approach eliminates the need for an exception (and this is how <a href="https://docs.darklang.com/languagedetails#floats">Darklang does it</a>), but comes at an expense of making basic arithmetic operations appear more cumbersome.</p>
<p>In any case, even though the code we wrote originally doesn't satisfy the theoretical definition of purity, it might be <em>pure enough</em> for our usage scenario.</p>
<p>Let's also take a look at an opposite situation:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOutputPath</span><span class="token punctuation">(</span><span class="token class-name">Report</span> report<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> outputDir<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fileExtension <span class="token operator">=</span> report<span class="token punctuation">.</span>Format <span class="token operator">==</span> ReportFormat<span class="token punctuation">.</span>Html
        <span class="token punctuation">?</span> <span class="token string">"html"</span>
        <span class="token punctuation">:</span> <span class="token string">"txt"</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">report<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fileExtension</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The code above assembles a file path for the provided report by combining the output directory with the generated file name. It calls the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=netcore-3.1#System_IO_Path_Combine_System_String_System_String_"><code>Path.Combine</code></a> method, whose behavior relies on the value of the <code>Path.DirectorySeparatorChar</code> constant, as it indicates which directory separator is used by the operating system.</p>
<p>Since it is a constant and its value is guaranteed to always be the same for the duration of the program's lifetime, our function is pure (as long as we also disregard exceptions). However, it's pure only within the current session.</p>
<p>If we imagine that we're building a cross-platform solution, it's logical that we treat specifics of each platform as environmental parameters. In other words, for code that is expected to run seamlessly on Windows and Linux, the path separator constant essentially acts as a global variable.</p>
<p>Assuming our goal is to test <code>GetOutputPath</code> in isolation, simply relying on the parameters of the function is not enough. We would also need to execute tests on each of the supported operating systems, to make sure it actually works with all possible path separators.</p>
<p>In this case, the fact that the function is pure does not provide us with sufficient guarantees. While it's pure by definition, it's not <em>pure enough</em> for what we need.</p>
<p>As you can see, the concept of purity gets a bit hazy once you start digging into specifics. In reality, everything around us is inherently impure, so what we accept as pure really depends on what level of abstraction we choose to operate at.</p>
<p>If you decide to follow the rules pedantically, you'll find the idea of modelling any problem domain with pure functions quickly becomes impractical. However, it's important to remember that <strong>the goal is not purity in itself, but rather the benefits it provides</strong>.</p>
<p>At the end of the day, the entire notion of purity is just a mathematical model, which may not necessarily translate very well to applied programming. As a developer of the project, it is up to you to draw the line and decide what makes sense and what doesn't.</p>
<h2>Summary</h2>
<p>Overall, purity is a pretty useful concept, as it helps us understand how some operations may make our code non-deterministic, difficult to reason about, and cumbersome to test in isolation. Impure interactions are not bad on their own, but the constraints they impose are contagious in nature and may spread to other parts of the application.</p>
<p>The pure-impure segregation principle aims to limit impurities to an essential minimum, by decoupling them from the rest of the code. Ultimately, the goal is to push all non-pure operations towards the outermost layers of the system, while keeping the domain layer comprised entirely of pure functions.</p>
<p>Designing software in such way leads to an architecture that resembles a pipeline rather than a hierarchy, which favors functional style of programming. Depending on the project, this may aid in expressing the flow of data more clearly, among other useful benefits.</p>
<p>However, this is not always practical and there are scenarios where extracting pure code comes at a cost of severely reduced cohesiveness. In any case, if your goal is to facilitate testing without mocking, <a href="http://localhost:3000/blog/unit-testing-is-overrated">architecting your solution for high-level testing</a> is likely going to be a much better time investment.</p>]]></description><link>http://localhost:3000/blog/pure-impure-segregation-principle</link><guid isPermaLink="false">http://localhost:3000/blog/pure-impure-segregation-principle</guid><category><![CDATA[programming]]></category><category><![CDATA[software design]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Mon, 24 Aug 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Unit Testing is Overrated]]></title><description><![CDATA[<p>The importance of testing in modern software development is really hard to overstate. Delivering a successful product is not something you do once and forget about, but is rather a continuous recurring process. With every line of code that changes, software must remain in a functional state, which implies the need for rigorous testing.</p>
<p>Over time, as the software industry evolved, testing practices have matured as well. Gradually moving towards automation, testing approaches have influenced software design itself, spawning mantras like test-driven development, emphasizing patterns such as dependency inversion, and popularizing high-level architectures that are built around it.</p>
<p>Nowadays, automated testing is embedded so deeply within our perception of software development, it's hard to imagine one without the other. And since that ultimately enables us to produce software quickly without sacrificing quality, it's hard to argue that it's not a good thing.</p>
<p>However, despite there being many different approaches, modern "best practices" primarily push developers specifically towards <em>unit testing</em>. Tests, whose scope lies higher on <a href="https://martinfowler.com/articles/practical-test-pyramid.html#TheTestPyramid">Mike Cohn's pyramid</a> are either written as part of a wider suite (often by completely different people) or even disregarded entirely.</p>
<p>The benefit of this approach is often supported by the argument that unit tests provide the most value during development because they're able to catch errors quickly and help enforce design patterns that facilitate modularity. This idea has become so widely accepted that the term "unit testing" is now somewhat conflated with automated testing in general, losing part of its meaning and contributing to confusion.</p>
<p>When I was a less experienced developer, I believed in following these "best practices" to the letter, as I thought that would make my code better. I didn't particularly enjoy writing unit tests because of all the ceremony involved with abstractions and mocking, but it was the recommended approach after all, so who am I to know better.</p>
<p>It was only later, as I've experimented more and built more projects, that I started to realize that there are much better ways to approach testing and that <strong>focusing on unit tests is</strong>, in most cases, <strong>a complete waste of time</strong>.</p>
<p>Aggressively popularized "best practices" often have a tendency of manifesting cargo cults around them, enticing developers to apply design patterns or use specific approaches without giving them a much needed second thought. In the context of automated testing, I find this prevalent when it comes to our industry's unhealthy obsession with unit testing.</p>
<p>In this article I will share my observations about this testing technique and go over why I believe it to be inefficient. I'll also explain which approaches I'm currently using instead to test my code, both in open source projects and day-to-day work.</p>
<p><em>Note: this article contains code examples which are written in C#, but the language itself is not (too) important to the points I'm making.</em></p>
<p><em>Note 2: I've come to realize that programming terms are completely useless at conveying meanings because everyone seems to understand them differently. In this article I will be relying on the "standard" definitions, where unit testing targets smallest separable parts of code, end-to-end testing targets software's outermost entry points, while integration testing is for everything in-between.</em></p>
<p><em>Note 3: if you don't feel like reading the entirety of the article, you can skip to the end for the summary.</em></p>
<h2>Fallacies of unit testing</h2>
<p>Unit tests, as evident by the name, revolve around the concept of a "unit", which denotes a very small isolated part of a larger system. There is no formal definition of what a unit is or how small it should be, but it's mostly accepted that it corresponds to an individual function of a module (or method of an object).</p>
<p>Normally, when the code isn't written with unit tests in mind, it may be impossible to test some functions in complete isolation because they can have external dependencies. In order to <em>work around</em> this issue, we can apply the dependency inversion principle and replace concrete dependencies with abstractions. These abstractions can then be substituted with real or fake implementations, depending on whether the code is executing normally or as part of a test.</p>
<p>Besides that, unit tests are expected to be pure. For example, if a function contains code that writes data to the file system, that part needs to be abstracted away as well, otherwise the test that verifies such behavior will be considered an integration test instead, since its coverage extends to the unit's integration with the file system.</p>
<p>Considering the factors mentioned above, we can reason that <strong>unit tests are only useful to verify pure business logic inside of a given function</strong>. Their scope does not extend to testing side-effects or other integrations because that belongs to the domain of integration testing.</p>
<p>To illustrate how these nuances affect design, let's take a look at an example of a simple system that we want to test. Imagine we're working on an application that calculates local sunrise and sunset times, which it does through the help of the following two classes:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> _httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets location by query</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> locationQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token comment">// Gets current location by IP</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _httpClient<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">LocationProvider</span> _locationProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LocationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets solar times for current location and specified date</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _locationProvider<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Although the design above is perfectly valid in terms of OOP, neither of these classes are actually unit-testable. Because <code>LocationProvider</code> depends on its own instance of <code>HttpClient</code> and <code>SolarCalculator</code> in turn depends on <code>LocationProvider</code>, it's impossible to isolate the business logic that may be contained within methods of these classes.</p>
<p>Let's iterate on that code and replace concrete implementations with abstractions:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILocationProvider</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> locationQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILocationProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> _httpClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LocationProvider</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient<span class="token punctuation">)</span> <span class="token operator">=></span>
        _httpClient <span class="token operator">=</span> httpClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> locationQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISolarCalculator</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISolarCalculator</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILocationProvider</span> _locationProvider<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SolarCalculator</span><span class="token punctuation">(</span><span class="token class-name">ILocationProvider</span> locationProvider<span class="token punctuation">)</span> <span class="token operator">=></span>
        _locationProvider <span class="token operator">=</span> locationProvider<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>By doing so we were able to decouple <code>LocationProvider</code> from <code>SolarCalculator</code>, but in exchange our code nearly doubled in size. Also note that we had to drop <code>IDisposable</code> from both classes because they <strong>no longer own their dependencies</strong> and thus have no business taking responsibility for their lifecycle.</p>
<p>While these changes may seem as an improvement to some, it's important to point out that the interfaces we've defined serve <strong>no practical purpose other than making unit testing possible</strong>. There's no need for actual polymorphism in our design, so, as far as our code is concerned, these abstractions are <em>autotelic</em> (i.e. abstractions for the sake of abstractions).</p>
<p>Let's try to reap the benefits of all that work and write a unit test for <code>SolarCalculator.GetSolarTimesAsync</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculatorTests</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">GetSolarTimesAsync_ForKyiv_ReturnsCorrectSolarTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Arrange</span>
        <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span><span class="token punctuation">(</span><span class="token number">50.45</span><span class="token punctuation">,</span> <span class="token number">30.52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> expectedSolarTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarTimes</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">06</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeSpan</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> locationProvider <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Of</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>ILocationProvider<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>lp <span class="token operator">=></span>
            lp<span class="token punctuation">.</span><span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> solarCalculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarCalculator</span><span class="token punctuation">(</span>locationProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Act</span>
        <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> <span class="token keyword">await</span> solarCalculator<span class="token punctuation">.</span><span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Assert</span>
        solarTimes<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeEquivalentTo</span><span class="token punctuation">(</span>expectedSolarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Here we have a basic test that verifies that <code>SolarCalculator</code> works correctly for a known location. Since unit tests and their units are tightly coupled, we're following the recommended naming convention, where the test class is named after the class under test, and the name of the test method follows the <code>Method_Precondition_Result</code> pattern.</p>
<p>In order to simulate the desired precondition in the arrange phase, we have to inject corresponding behavior into the unit's dependency, <code>ILocationProvider</code>. In this case we do that by substituting the return value of <code>GetLocationAsync()</code> with a location for which the correct solar times are already known ahead of time.</p>
<p>Note that although <code>ILocationProvider</code> exposes two different methods, from the contract perspective <strong>we have no way of knowing which one actually gets called</strong>. This means that by choosing to mock a specific one of these methods, we are making an <strong>assumption about the underlying implementation</strong> of the method we're testing (which was deliberately hidden in the previous snippets).</p>
<p>All in all, the test does correctly verify that the business logic inside <code>GetSolarTimesAsync</code> works as expected. However, let's expand on some of the observations we've made in the process.</p>
<hr>
<ol>
<li>Unit tests <strong>have a limited purpose</strong></li>
</ol>
<p>It's important to understand that the purpose of any unit test is very simple: verify business logic in an isolated scope. Depending on which interactions you intend to test, unit testing may or may not be the right tool for the job.</p>
<p>For example, does it make sense to unit test a method that calculates solar times using a long and complicated mathematical algorithm? Most likely, <em>yes</em>.</p>
<p>Does it make sense to unit test a method that sends a request to a REST API to get geographical coordinates? Most likely, <em>not</em>.</p>
<p>If you treat unit testing as a goal in itself, you will quickly find that, despite putting a lot of effort, most tests will not be able to provide you with the confidence you need, simply because they're testing the wrong thing. In many cases it's much more beneficial to test wider interactions with integration tests, rather than focusing specifically on unit tests.</p>
<p>Interestingly, some developers do end up writing integration tests in such scenarios, but still refer to them as unit tests, mostly due to confusion surrounding the concept. Although it could be argued that a unit size can be chosen arbitrarily and can span multiple components, this makes the definition very fuzzy, ultimately just turning overall usage of the term completely useless.</p>
<ol start="2">
<li>Unit tests <strong>lead to more complicated design</strong></li>
</ol>
<p>One of the most popular arguments in favor of unit testing is that it enforces you to design software in a highly modular way. This builds on an assumption that it's easier to reason about code when it's split into many smaller components rather than a few larger ones.</p>
<p>However, it often leads to the opposite problem, where the functionality may end up becoming unnecessarily fragmented. This makes it much harder to assess the code because a developer needs to scan through multiple components that make up what should have been a single cohesive element.</p>
<p>Additionally, the abundant usage of abstraction, which is required to achieve component isolation, creates a lot of unneeded indirection. Although an incredibly powerful and useful technique in itself, abstraction inevitably increases cognitive complexity, making it further more difficult to reason about the code.</p>
<p>Through that indirection we also end up losing some degree of encapsulation that we were able to maintain otherwise. For example, the responsibility of managing lifetimes of individual dependencies shifts from components that contain them to some other unrelated service (usually the dependency container).</p>
<p>Some of that infrastructural complexity can be also delegated to a dependency injection framework, making it easier to configure, manage, and activate dependencies. However, that reduces portability, which may be undesirable in some cases, for example when writing a library.</p>
<p>At the end of the day, while it's clear that unit testing does influence software design, it's highly debatable whether that's really a good thing.</p>
<ol start="3">
<li>Unit tests <strong>are expensive</strong></li>
</ol>
<p>Logically, it would make sense to assume that, since they are small and isolated, unit tests should be really easy and quick to write. Unfortunately, this is just another fallacy that seems to be rather popular, especially among managers.</p>
<p>Even though the previously mentioned modular architecture lures us into thinking that individual components can be considered separately from each other, unit tests don't actually benefit from that. In fact, the complexity of a unit test only grows proportionally to the number of external interactions the unit has, due to all the work that you must do to achieve isolation while still exercising required behavior.</p>
<p>The example illustrated previously in this article is very simple, but in a real project it's not unusual to see the arrange phase spanning many long lines, just to set preconditions for a single test. In some cases, the mocked behavior can be so complex, it's almost impossible to unravel it back to figure out what it was supposed to do.</p>
<p>Besides that, unit tests are by design very tightly coupled to the code they're testing, which means that any effort to make a change is effectively doubled as the test suite needs to be updated as well. What makes this worse is that very few developers seem to find doing that an enticing task, often just pawning it off to more junior members on the team.</p>
<ol start="4">
<li>Unit tests <strong>rely on implementation details</strong></li>
</ol>
<p>The unfortunate implication of mock-based unit testing is that any test written with this approach is inherently implementation-aware. By mocking a specific dependency, your test becomes reliant on how the code under test consumes that dependency, which is not regulated by the public interface.</p>
<p>This additional coupling often leads to unexpected issues, where seemingly non-breaking changes can cause tests to start failing as mocks become out of date. It can be very frustrating and ultimately discourages developers from trying to refactor code, because it's never clear whether the error in test comes from an actual regression or due to being reliant on some implementation detail.</p>
<p>Unit testing stateful code can be even more tricky because it may not be possible to observe mutations through the publicly exposed interface. To work around this, you would normally inject spies, which is a type of mocked behavior that records when a function is called, helping you ensure that the unit uses its dependencies correctly.</p>
<p>Of course, when you not only rely on a specific function being called, but also on how many times it happened or which arguments were passed, the test becomes even more coupled to the implementation. Tests written in such way are only useful if the internal specifics are not ever expected to change, which is a highly unreasonable expectation to have.</p>
<p>Relying too much on implementation details also makes the tests themselves very complex, considering how much setup is required to configure mocks in order to simulate a specific behavior, especially when the interactions are not that trivial or when there are a lot of dependencies. When the tests get so complicated that their own behavior is hard to reason about, who is going to write tests to test the tests?</p>
<ol start="5">
<li>Unit tests <strong>don't exercise user behavior</strong></li>
</ol>
<p>No matter what type of software you're developing, its goal is to provide value for the end user. In fact, the primary reason why we're writing automated tests in the first place is to ensure that there are no unintended defects that would diminish that value.</p>
<p>In most cases, the user works with the software through some top-level interface such as a UI, CLI, or API. While the code itself might involve numerous layers of abstractions, the only one that matters to the user is the one they get to actually see and interact with.</p>
<p>It doesn't even matter if a few layers deep there's a bug in some part of the system, as long as it never surfaces to the user and doesn't affect the provided functionality. Conversely, it makes no difference that we may have full coverage on all the lower-level pieces, if there's a defect in the user interface that renders our system effectively useless.</p>
<p>Of course, if you want to ensure that something works correctly, you have to check that exact thing and see if it does. In our case, the best way to gain confidence in the system is to simulate how a real user would interact with the top-level interface and see if it works properly according to expectations.</p>
<p>The problem with unit tests is that they're the exact opposite of that. Since we're always dealing with small isolated pieces of our code that the user doesn't directly interact with, we never test the actual user behavior.</p>
<p>Doing mock-based testing puts the value of such tests under an even bigger question, because the parts of our system that would've been used otherwise are replaced with mocks, further distancing the simulated environment from reality. It's impossible to gain confidence that the user will have a smooth experience by testing something that doesn't resemble that experience.</p>
<p><a href="https://twitter.com/rkoutnik/status/1242073856128495620"><img src="http://localhost:3000/Tweet-testing-mocks.png" alt="&#x22;Unit testing is a great way to ensure your mocks work&#x22; (Tweet by @rkoutnik)"></a></p>
<h2>Pyramid-driven testing</h2>
<p>So why would we, as an industry, decide that unit testing should be the primary method of testing software, given all of its existing flaws? For the most part, it's because testing at higher levels has always been considered too hard, slow, and unreliable.</p>
<p>If you refer to the traditional test pyramid, you will find that it suggests that the most significant part of testing should be performed at the unit level. The idea is that, since coarse-grained tests are assumed to be slower and more complicated, you will want to concentrate efforts towards the bottom of the integration spectrum to end up with an efficient and maintainable test suite:</p>
<p><img src="http://localhost:3000/Test-pyramid.png" alt="Test pyramid. Shows unit tests at the bottom, integration tests on top, and end-to-end tests at the peak."></p>
<p>The metaphorical model offered by the pyramid is meant to convey that a good testing approach should involve many different layers, because focusing on the extremes can lead to issues where the tests are either too slow and unwieldy, or are useless at providing any confidence. That said, the lower levels are emphasized as that's where the return on investment for development testing is believed to be the highest.</p>
<p>Top-level tests, despite providing the most confidence, often end up being slow, hard to maintain, or too broad to be included as part of typically fast-paced development flow. That's why, in most cases, such tests are instead maintained separately by dedicated QA specialists, as it's usually not considered to be the developer's job to write them.</p>
<p>Integration testing, which is an abstract part of the spectrum that lies somewhere between unit testing and complete end-to-end testing, is quite often just disregarded entirely. Because it's not really clear what exact level of integration is preferable, how to structure and organize such tests, or for the fear that they might get out of hand, many developers prefer to avoid them in favor of a more clear-cut extreme which is unit testing.</p>
<p>For these reasons, all testing done during development typically resides at the very bottom of the pyramid. In fact, over time this has become so commonplace that development testing and unit testing are now practically synonymous with each other, leading to confusion that is only further perpetuated by conference talks, blog posts, books, and even some IDEs (all tests are unit tests, as far as JetBrains Rider is concerned).</p>
<p>In the eyes of most developers, the test pyramid looks somewhat like this instead:</p>
<p><img src="http://localhost:3000/Test-pyramid-real.png" alt="Test pyramid as developers see it. Shows unit tests at the bottom and the rest marked as someone else&#x27;s problem."></p>
<p>While the pyramid is a noble attempt to turn software testing into a solved problem, there are obviously many issues with this model. In particular, the assumptions it relies on might not be true for every context, especially the premise of highly integrated test suites being slow or hard.</p>
<p>As humans, we are naturally inclined to rely on information passed on to us from those who are more experienced, so that we can benefit from the knowledge of past generations and apply our <a href="https://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow#Two_systems">second thinking system</a> on something more useful instead. This is an important evolutionary trait that makes our species extremely fit for survival.</p>
<p>However, whenever we extrapolate experiences into guidelines, we tend to think of them as being good on their own, forgetting about the circumstances that are integral to their relevancy. The reality is that circumstances change, and once perfectly reasonable conclusions (or best practices) might not apply so well anymore.</p>
<p>If we look back, it's clear that high-level testing was tough in 2000, it probably still was in 2009, but it's 2020 outside and we are, in fact, living in the future. Advancements in technology and software design have made it a much less significant issue than it once was.</p>
<p>Most modern application frameworks nowadays provide some sort of separate API layer used for testing, where you can run your application in a simulated in-memory environment that is very close to the real one. Virtualization tools like Docker also make it possible to execute tests that rely on actual infrastructural dependencies, while still remaining deterministic and fast.</p>
<p>We have solutions like <a href="http://mbtest.org">Mountebank</a>, <a href="http://wiremock.org">WireMock</a>, <a href="https://greenmail-mail-test.github.io/greenmail">GreenMail</a>, <a href="http://appium.io">Appium</a>, <a href="https://selenium.dev">Selenium</a>, <a href="https://cypress.io">Cypress</a>, and countless others that simplify different aspects of high-level testing that were once considered unapproachable. Unless you're developing desktop applications for Windows and are stuck with <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/entry-uiauto-win32">UIAutomation framework</a>, you will likely have many options available.</p>
<p>On one of my previous projects, we had a web service which was tested at the system boundary using close to a hundred behavioral tests that took just under 10 seconds to run in parallel. Sure, it's possible to get much faster execution time than that with unit tests but given the confidence they provide this was a no-brainer.</p>
<p>The slow test fallacy is, however, not the only false assumption that the pyramid is based on. The idea of having the majority of testing concentrated at the unit level only works out if those tests actually provide value, which of course depends on how much business logic is contained within the code under test.</p>
<p>Some applications may have a lot of business logic (e.g. payroll systems), some may have close to none (e.g. CRUD apps), most are somewhere in between. Majority of the projects I've personally worked on didn't have nearly enough of it to warrant extensive coverage with unit tests but had plenty of infrastructural complexity on the other hand, which would benefit from integration testing.</p>
<p>Of course, in an ideal world one would evaluate the context of the project and come up with a testing approach that is most suitable for the problem at hand. In reality, however, most developers don't even begin to think about it at all, instead just blindly stacking mountains of unit tests following what the best practices seemingly advise you to do.</p>
<p>Finally, I think it's fair to say, the model provided by the test pyramid is just too simplistic in general. The vertical axes present the testing spectrum as a linear scale, where any gain in confidence you get by going up is apparently offset by an equivalent amount of loss in maintainability and speed. This may be true if you compare the extremes, but not necessarily so for the rest of the points in between.</p>
<p>It also doesn't account for the fact that isolation has a cost in itself and isn't something that comes for free simply by "avoiding" external interactions. Given how much effort it takes to write and maintain mocks, it's entirely possible that a less-isolated test can be cheaper and end up providing more confidence, albeit running slightly slower.</p>
<p>If you consider these aspects, it seems likely that the scale is not linear after all and that the point of highest return on investment resides somewhere closer to the middle rather than at the unit level:</p>
<p><img src="http://localhost:3000/Test-conversion-efficiency.png" alt="Graph that shows that the scale of cost &#x26; speed might not be linear to integration."></p>
<p>All in all, when you're trying to establish an efficient test suite for your project, the test pyramid isn't the best guideline you can follow. It makes a lot more sense to focus on what's relevant specifically to your context, instead of relying on "best practices".</p>
<h2>Reality-driven testing</h2>
<p>At the most basic level, a test provides value if it grants certainty that the software is working correctly. The more confident we feel, the less we have to rely on ourselves to spot potential bugs and regressions while introducing changes in code, because we trust our tests to do that for us.</p>
<p>That trust in turn depends on how accurately the test resembles the actual user behavior. A test scenario operating at the system boundary without knowledge of any internal specifics is bound to provide us with greater confidence (and thus, value) than a test working at a lower level.</p>
<p>In essence, the degree of confidence we gain from tests is the primary metric by which their value should be measured. Pushing it as high as possible is also the primary goal.</p>
<p>Of course, as we know, there are other factors in play as well, such as cost, speed, ability to parallelize, and whatnot, which are all important. The test pyramid makes strong assumptions about how these things scale in relation to each other, but these assumptions are not universal.</p>
<p>Moreover, these factors are also secondary to the primary goal of obtaining confidence. An expensive test that takes a really long time to run but provides a lot of confidence is still infinitely more useful than an extremely fast and simple test that does nothing.</p>
<p>For that reason, I find it best to <strong>write tests that are as highly integrated as possible, while keeping their speed and complexity reasonable</strong>.</p>
<p>Does this mean that every test we write should be an end-to-end test? No, but we should be trying to get as far as we can in that direction, while keeping the downsides at an acceptable level.</p>
<p>What's acceptable or not is subjective and depends on the context. At the end of the day, it's important that those tests are written by developers and are used during development, which means they shouldn't feel like a burden to maintain and it should be possible to run them for local builds and on CI.</p>
<p>Doing this also means that you will likely end up with tests that are scattered across different levels of the integration scale, with seemingly no clear sense of structure. This isn't an issue we would have had with unit testing, because there each test is coupled to a specific method or a function, so the structure usually ends up mirroring that of the code itself.</p>
<p>Fortunately, this doesn't matter because organizing tests by individual classes or modules is not important in itself but is rather a side-effect of unit testing. Instead, the tests should be partitioned by the actual user-facing functionality that they are meant to verify.</p>
<p>Such tests are often called <em>functional</em> because they are based on the software's functional requirements that describe what features it has and how they work. Functional testing is not another layer on the pyramid, but instead a completely orthogonal concept.</p>
<p>Contrary to the popular belief, writing functional tests does not require you to use <a href="https://en.wikipedia.org/wiki/Cucumber_(software)#Gherkin_language">Gherkin</a> or a BDD framework, but can be done with the very same tools that are typically used for unit testing. For example, consider how we can rewrite the example from the beginning of the article so that the tests are structured around supported user behavior rather than units of code:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarTimesSpecs</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_automatically_for_their_location</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_during_periods_of_midnight_sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_if_their_location_cannot_be_resolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Note that the actual implementation of the tests is hidden because it's not relevant to the fact that they're functional. What matters is that the tests and their structure are driven by the software requirements, while their scope can theoretically range anywhere from end-to-end to even unit level.</p>
<p>Naming tests in accordance to specifications rather than classes has an additional advantage of removing that unnecessary coupling. Now, if we decide to rename <code>SolarCalculator</code> to something else or move it to a different directory, the test names won't need to be updated to reflect that.</p>
<p>By adhering to this structure, our test suite will effectively take form of a living documentation. For example, this is how the test suite is organized in <a href="https://github.com/Tyrrrz/CliWrap">CliWrap</a> (the underscores are replaced with spaces by <a href="https://xunit.net/docs/configuration-files#methodDisplayOptions">xUnit</a>):</p>
<p><img src="http://localhost:3000/CliWrap-functional-tests.png" alt="Functional tests used for CliWrap"></p>
<p>As long as a piece of software does something at least remotely useful, it will always have functional requirements. Those can be either <em>formal</em> (specification documents, user stories, etc.) or <em>informal</em> (verbally agreed upon, assumed, JIRA tickets, written on toilet paper, etc.)</p>
<p>Turning informal specifications into functional tests can often be difficult because it requires us to take a step away from code and challenge ourselves to think from a user's perspective. What helps me with my open source projects is that I start by creating a readme file where I list a bunch of relevant usage examples, and then encode those into tests.</p>
<p>To summarize, we can conclude that it's a good idea to <strong>partition tests based on threads of behavior, rather than the code's internal structure</strong>.</p>
<p>Both of the aforementioned guidelines, when combined, form a mental framework that provides us with a clear goal for writing tests and a good sense of organization, while not relying on any assumptions. We can use it to establish a test suite for our project that focuses on value, and then scale it according to priorities and limitations relevant to the current context.</p>
<p>The idea is that, instead of focusing on a specific scope or distribution of scopes, we build our test suite based on the user-facing functionality, while attempting to cover that functionality as accurately as we can.</p>
<h2>Functional testing for web services (via ASP.NET Core)</h2>
<p>There might still be some confusion as to what constitutes functional testing or how exactly it's supposed to look especially if you've never done it before, so it makes sense to show a simple but complete example. For this, we will turn the solar calculator from earlier into a web service and cover it with tests according to the rules we've outlined in the previous part of the article. This app will be based on ASP.NET Core, which is a web framework I'm most familiar with, but the same idea should also equally apply to any other platform.</p>
<p>Our web service is going to expose endpoints to calculate sunrise and sunset times based on the user's IP or provided location. To make things a bit more interesting, we'll also add a Redis caching layer to store previous calculations for faster responses.</p>
<p>The tests will work by launching the app in a simulated environment where it can receive HTTP requests, handle routing, perform validation, and exhibit almost identical behavior to an app running in production. At the same time, we will also use Docker to make sure our tests rely on the same infrastructural dependencies as the real app does.</p>
<p>Let us first go over the implementation of the web app to understand what we're dealing with. Note, some parts in the code snippets below are omitted for brevity, but you can also check out the full project on <a href="https://github.com/Tyrrrz/FuncTestingInAspNetCoreExample">GitHub</a>.</p>
<p>First off, we will need a way to get the user's location by IP, which is done by the <code>LocationProvider</code> class we've seen in earlier examples. It works simply by wrapping an external GeoIP lookup service called <a href="https://ip-api.com/">IP-API</a>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> _httpClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LocationProvider</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient<span class="token punctuation">)</span> <span class="token operator">=></span>
        _httpClient <span class="token operator">=</span> httpClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Location<span class="token punctuation">></span></span> <span class="token function">GetLocationAsync</span><span class="token punctuation">(</span><span class="token class-name">IPAddress</span> ip<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// If IP is local, just don't pass anything (useful when running on localhost)</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ipFormatted <span class="token operator">=</span> <span class="token operator">!</span>ip<span class="token punctuation">.</span><span class="token function">IsLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">?</span> ip<span class="token punctuation">.</span><span class="token function">MapToIPv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">GetJsonAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"http://ip-api.com/json/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ipFormatted</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> latitude <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"lat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> longitude <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"lon"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span>
        <span class="token punctuation">{</span>
            Latitude <span class="token operator">=</span> latitude<span class="token punctuation">,</span>
            Longitude <span class="token operator">=</span> longitude
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In order to turn location into solar times, we're going to rely on the <a href="https://edwilliams.org/sunrise_sunset_algorithm.htm">sunrise/sunset algorithm published by US Naval Observatory</a>. The algorithm itself is too long to include here, but the rest of the implementation for <code>SolarCalculator</code> is as follows:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">LocationProvider</span> _locationProvider<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SolarCalculator</span><span class="token punctuation">(</span><span class="token class-name">LocationProvider</span> locationProvider<span class="token punctuation">)</span> <span class="token operator">=></span>
        _locationProvider <span class="token operator">=</span> locationProvider<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">TimeSpan</span> <span class="token function">CalculateSolarTimeOffset</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> instant<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">double</span></span> zenith<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isSunrise<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>

        <span class="token comment">// Algorithm omitted for brevity</span>

        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span> <span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span><span class="token class-name">IPAddress</span> ip<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">await</span> _locationProvider<span class="token punctuation">.</span><span class="token function">GetLocationAsync</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sunriseOffset <span class="token operator">=</span> <span class="token function">CalculateSolarTimeOffset</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">,</span> <span class="token number">90.83</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunsetOffset <span class="token operator">=</span> <span class="token function">CalculateSolarTimeOffset</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">,</span> <span class="token number">90.83</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sunrise <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">ResetTimeOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>sunriseOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunset <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">ResetTimeOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>sunsetOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarTimes</span>
        <span class="token punctuation">{</span>
            Sunrise <span class="token operator">=</span> sunrise<span class="token punctuation">,</span>
            Sunset <span class="token operator">=</span> sunset
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Since it's an MVC web app, we will also have a controller that provides endpoints to expose the app's functionality:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"solartimes"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarTimeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SolarCalculator</span> _solarCalculator<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CachingLayer</span> _cachingLayer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SolarTimeController</span><span class="token punctuation">(</span><span class="token class-name">SolarCalculator</span> solarCalculator<span class="token punctuation">,</span> <span class="token class-name">CachingLayer</span> cachingLayer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _solarCalculator <span class="token operator">=</span> solarCalculator<span class="token punctuation">;</span>
        _cachingLayer <span class="token operator">=</span> cachingLayer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"by_ip"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">GetByIp</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset<span class="token punctuation">?</span></span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ip <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> cacheKey <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ip</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">date</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> cachedSolarTimes <span class="token operator">=</span> <span class="token keyword">await</span> _cachingLayer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetAsync</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedSolarTimes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>cachedSolarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> <span class="token keyword">await</span> _solarCalculator<span class="token punctuation">.</span><span class="token function">GetSolarTimesAsync</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> date <span class="token operator">??</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> _cachingLayer<span class="token punctuation">.</span><span class="token function">SetAsync</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> solarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>solarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"by_location"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">GetByLocation</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> lat<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> lon<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset<span class="token punctuation">?</span></span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As seen above, the <code>/solartimes/by_ip</code> endpoint mostly just delegates execution to <code>SolarCalculator</code>, but also has very simple caching logic to avoid redundant requests to 3rd party services. The caching is done by the <code>CachingLayer</code> class which encapsulates a Redis client used to store and retrieve JSON content:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingLayer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IConnectionMultiplexer</span> _redis<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CachingLayer</span><span class="token punctuation">(</span><span class="token class-name">IConnectionMultiplexer</span> connectionMultiplexer<span class="token punctuation">)</span> <span class="token operator">=></span>
        _redis <span class="token operator">=</span> connectionMultiplexer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">TryGetAsync</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _redis<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StringGetAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>
            <span class="token keyword">return</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">SetAsync</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span> <span class="token operator">=></span>
        <span class="token keyword">await</span> _redis<span class="token punctuation">.</span><span class="token function">GetDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StringSetAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JsonSerializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Finally, all of the above parts are wired together in the <code>Startup</code> class by configuring request pipeline and registering required services:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IConfiguration</span> _configuration<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Startup</span><span class="token punctuation">(</span><span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span> <span class="token operator">=></span>
        _configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetRedisConnectionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        _configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">"Redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span>o <span class="token operator">=></span> o<span class="token punctuation">.</span>EnableEndpointRouting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>IConnectionMultiplexer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>
            ConnectionMultiplexer<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token function">GetRedisConnectionString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>CachingLayer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>LocationProvider<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarCalculator<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseMvcWithDefaultRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Note that we didn't have our classes implement any autotelic interfaces because we're not planning to use mocks. It may happen that we will need to substitute one of the services in tests but it's not yet clear now, so we avoid unnecessary work (and design damage) until we're sure we need it.</p>
<p>Although it's a rather simple project, this app already incorporates a decent amount of infrastructural complexity by relying on a 3rd party web service (GeoIP provider) as well as a persistence layer (Redis). This is a rather common setup which a lot of real-life projects can relate to.</p>
<p>With a classical approach focused on unit testing, we would find ourselves targeting the service layer and possibly the controller layer of our app, writing isolated tests that ensure that every branch of code executes correctly. Doing that would be useful to an extent but could never give us confidence that the actual endpoints, with all of the middleware and peripheral components, work as intended.</p>
<p>Instead, we will write tests that target the endpoints directly. To do that, we will need to create a separate testing project and add a few infrastructural components that will support our tests. One of them is <code>FakeApp</code> which is going to be used to encapsulate a virtual instance of our app:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FakeApp</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">WebApplicationFactory<span class="token punctuation">&#x3C;</span>Startup<span class="token punctuation">></span></span> _appFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">HttpClient</span> Client <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">FakeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _appFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebApplicationFactory<span class="token punctuation">&#x3C;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Client <span class="token operator">=</span> _appFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Client<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _appFactory<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The majority of the work here is already done by <a href="https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-3.1"><code>WebApplicationFactory</code></a>, which is a utility provided by the framework that allows us to bootstrap the app in-memory for testing purposes. It also provides us with API to override configuration, service registrations, and the request pipeline if needed.</p>
<p>We can use an instance of this object in tests to run the app, send requests with the provided <code>HttpClient</code>, and then check that the response matches our expectations. This instance can be either shared among multiple tests or instead created separately for each one.</p>
<p>Since we also rely on Redis, we want to have a way to spin up a fresh server to be used by our app. There are many ways to do it, but for a simple example I decided to use xUnit's fixture API for this purpose:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisFixture</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncLifetime</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> _containerId<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InitializeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Simplified, but ideally should bind to a random port</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> Cli<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token string">"docker"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithArguments</span><span class="token punctuation">(</span><span class="token string">"run -d -p 6379:6379 redis"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ExecuteBufferedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        _containerId <span class="token operator">=</span> result<span class="token punctuation">.</span>StandardOutput<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ResetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">await</span> Cli<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token string">"docker"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithArguments</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"exec </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_containerId</span><span class="token punctuation">}</span></span><span class="token string"> redis-cli FLUSHALL"</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">await</span> Cli<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token string">"docker"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">WithArguments</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"container kill </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_containerId</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The above code works by implementing the <code>IAsyncLifetime</code> interface that lets us define methods which are going to be executed before and after the tests run. We are using these methods to start a Redis container in Docker and then kill it once the testing has finished.</p>
<p>Besides that, the <code>RedisFixture</code> class also exposes <code>ResetAsync</code> method which can be used to execute the <code>FLUSHALL</code> command to delete all keys from the database. We will be calling this method to reset Redis to a clean slate before each test. As an alternative, we could also just restart the container instead, which takes a bit longer but is probably more reliable.</p>
<p>Now that the infrastructure is set up, we can move on to writing our first test:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarTimeSpecs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IClassFixture<span class="token punctuation">&#x3C;</span>RedisFixture<span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">IAsyncLifetime</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RedisFixture</span> _redisFixture<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SolarTimeSpecs</span><span class="token punctuation">(</span><span class="token class-name">RedisFixture</span> redisFixture<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _redisFixture <span class="token operator">=</span> redisFixture<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Reset Redis before each test</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">InitializeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> _redisFixture<span class="token punctuation">.</span><span class="token function">ResetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_for_their_location_by_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Arrange</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Act</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">"/solartimes/by_ip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Assert</span>
        solarTimes<span class="token punctuation">.</span>Sunset<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeWithin</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>solarTimes<span class="token punctuation">.</span>Sunrise<span class="token punctuation">)</span><span class="token punctuation">;</span>
        solarTimes<span class="token punctuation">.</span>Sunrise<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        solarTimes<span class="token punctuation">.</span>Sunset<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, the setup is really simple. All we need to do is create an instance of <code>FakeApp</code> and use the provided <code>HttpClient</code> to send requests to one of the endpoints, just like you would if it was a real web app.</p>
<p>This specific test works by querying the <code>/solartimes/by_ip</code> route, which determines user's sunrise and sunset times for the current date based on their IP. Since we're relying on an actual GeoIP provider and don't know what the result is going to be, we're performing property-based assertions to ensure that the solar times are valid.</p>
<p>Although those assertions will be able to catch a multitude of potential bugs, it doesn't give us full confidence that the result is fully correct. There are a couple of different ways we can improve on this, however.</p>
<p>An obvious option would be to replace the real GeoIP provider with a fake instance that will always return the same location, allowing us to hard-code the expected solar times. The downside of doing that is that we will be effectively reducing the integration scope, which means we won't be able to verify that our app talks to the 3rd party service correctly.</p>
<p>As an alternative approach, we can instead substitute the IP address that the test server receives from the client. This way we can make the test more strict, while maintaining the same integration scope.</p>
<p>To accomplish this, we will need to create a startup filter that lets us inject a custom IP address into request context using middleware:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FakeIpStartupFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IStartupFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IPAddress</span> Ip <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"::1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Action<span class="token punctuation">&#x3C;</span>IApplicationBuilder<span class="token punctuation">></span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&#x3C;</span>IApplicationBuilder<span class="token punctuation">></span></span> nextFilter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> app <span class="token operator">=></span>
        <span class="token punctuation">{</span>
            app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=></span>
            <span class="token punctuation">{</span>
                ctx<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress <span class="token operator">=</span> Ip<span class="token punctuation">;</span>
                <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token function">nextFilter</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>We can then wire it into <code>FakeApp</code> by registering it as a service:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FakeApp</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">WebApplicationFactory<span class="token punctuation">&#x3C;</span>Startup<span class="token punctuation">></span></span> _appFactory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">FakeIpStartupFilter</span> _fakeIpStartupFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeIpStartupFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">HttpClient</span> Client <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IPAddress</span> ClientIp
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> _fakeIpStartupFilter<span class="token punctuation">.</span>Ip<span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> _fakeIpStartupFilter<span class="token punctuation">.</span>Ip <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">FakeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _appFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebApplicationFactory<span class="token punctuation">&#x3C;</span>Startup<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithWebHostBuilder</span><span class="token punctuation">(</span>o <span class="token operator">=></span>
        <span class="token punctuation">{</span>
            o<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>s <span class="token operator">=></span>
            <span class="token punctuation">{</span>
                s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>IStartupFilter<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>_fakeIpStartupFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Client <span class="token operator">=</span> _appFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now we can update the test to rely on concrete data:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_for_their_location_by_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeApp</span>
    <span class="token punctuation">{</span>
        ClientIp <span class="token operator">=</span> IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"20.112.101.1"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunrise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">05</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryBuilder</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">"date"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"O"</span><span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"/solartimes/by_ip</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">query</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    solarTimes<span class="token punctuation">.</span>Sunrise<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunrise<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    solarTimes<span class="token punctuation">.</span>Sunset<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunset<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Some developers might still feel uneasy about relying on a real 3rd party web service in tests, because it may lead to non-deterministic results. Conversely, one can argue that we do actually want our tests to incorporate that dependency, because we want to be aware if it breaks or changes in unexpected ways, as it can lead to bugs in our own software.</p>
<p>Of course, using real dependencies is not always possible, for example if the service has usage quotas, costs money, or is simply slow or unreliable. In such cases we would want to replace it with a fake (preferably not mocked) implementation to be used in tests instead. This, however, is not one of those cases.</p>
<p>Similarly to how we did with the first one, we can also write a test that covers the second endpoint. This one is simpler because all input parameters are passed directly as part of URL query:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_for_a_specific_location_and_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunrise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryBuilder</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">"lat"</span><span class="token punctuation">,</span> <span class="token string">"50.45"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">"lon"</span><span class="token punctuation">,</span> <span class="token string">"30.52"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">"date"</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"O"</span><span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"/solartimes/by_location</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">query</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    solarTimes<span class="token punctuation">.</span>Sunrise<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunrise<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    solarTimes<span class="token punctuation">.</span>Sunset<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunset<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>We can keep adding tests like this one to ensure that the app supports all possible locations, dates, and handles potential edge cases such as the <a href="https://en.wikipedia.org/wiki/Midnight_sun">midnight sun phenomenon</a>. However, it's possible that doing so will scale poorly as we may not want to execute the entire pipeline each time just to verify that the business logic that calculates solar times works correctly.</p>
<p>It's important to note that, although we want to avoid it if possible, we can still reduce the integration scope if there's a real reason for it. In this case, we can choose to cover additional cases with unit tests instead.</p>
<p>Normally, that would imply that we need to isolate <code>SolarCalculator</code> from <code>LocationProvider</code> somehow, which in turn implies mocking. Fortunately, there is a clever way to avoid it.</p>
<p>We can alter the implementation of <code>SolarCalculator</code> by separating the pure and impure parts of the code away from each other:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarCalculator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">TimeSpan</span> <span class="token function">CalculateSolarTimeOffset</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> instant<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">double</span></span> zenith<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isSunrise<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">SolarTimes</span> <span class="token function">GetSolarTimes</span><span class="token punctuation">(</span><span class="token class-name">Location</span> location<span class="token punctuation">,</span> <span class="token class-name">DateTimeOffset</span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunriseOffset <span class="token operator">=</span> <span class="token function">CalculateSolarTimeOffset</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">,</span> <span class="token number">90.83</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunsetOffset <span class="token operator">=</span> <span class="token function">CalculateSolarTimeOffset</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">,</span> <span class="token number">90.83</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> sunrise <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">ResetTimeOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>sunriseOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sunset <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">ResetTimeOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>sunsetOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarTimes</span>
        <span class="token punctuation">{</span>
            Sunrise <span class="token operator">=</span> sunrise<span class="token punctuation">,</span>
            Sunset <span class="token operator">=</span> sunset
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>What changed is now, instead of relying on <code>LocationProvider</code> to provide it, the <code>GetSolarTimes</code> method takes location as an explicit parameter. Doing that means that we also no longer require dependency inversion, as there are no dependencies to invert.</p>
<p>To wire everything back together, all we need to do is update the controller:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"solartimes"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SolarTimeController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SolarCalculator</span> _solarCalculator<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">LocationProvider</span> _locationProvider<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CachingLayer</span> _cachingLayer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SolarTimeController</span><span class="token punctuation">(</span>
        <span class="token class-name">SolarCalculator</span> solarCalculator<span class="token punctuation">,</span>
        <span class="token class-name">LocationProvider</span> locationProvider<span class="token punctuation">,</span>
        <span class="token class-name">CachingLayer</span> cachingLayer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _solarCalculator <span class="token operator">=</span> solarCalculator<span class="token punctuation">;</span>
        _locationProvider <span class="token operator">=</span> locationProvider<span class="token punctuation">;</span>
        _cachingLayer <span class="token operator">=</span> cachingLayer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"by_ip"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IActionResult<span class="token punctuation">></span></span> <span class="token function">GetByIp</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset<span class="token punctuation">?</span></span> date<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ip <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> cacheKey <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> cachedSolarTimes <span class="token operator">=</span> <span class="token keyword">await</span> _cachingLayer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">TryGetAsync</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedSolarTimes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>cachedSolarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Composition instead of dependency injection</span>
        <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">await</span> _locationProvider<span class="token punctuation">.</span><span class="token function">GetLocationAsync</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> _solarCalculator<span class="token punctuation">.</span><span class="token function">GetSolarTimes</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date <span class="token operator">??</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">await</span> _cachingLayer<span class="token punctuation">.</span><span class="token function">SetAsync</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> solarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>solarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Since our existing tests are not aware of implementation details, this simple refactoring didn't break them in any way. With that done, we can write some additional light-weight tests to cover the business logic more extensively, while still not mocking anything:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">User_can_get_solar_times_for_New_York_in_November</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span>
    <span class="token punctuation">{</span>
        Latitude <span class="token operator">=</span> <span class="token number">40.71</span><span class="token punctuation">,</span>
        Longitude <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">74.00</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunrise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">06</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetSolarTimes</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    solarTimes<span class="token punctuation">.</span>Sunrise<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunrise<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    solarTimes<span class="token punctuation">.</span>Sunset<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunset<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">User_can_get_solar_times_for_Tromso_in_January</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token class-name"><span class="token keyword">var</span></span> location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Location</span>
    <span class="token punctuation">{</span>
        Latitude <span class="token operator">=</span> <span class="token number">69.65</span><span class="token punctuation">,</span>
        Longitude <span class="token operator">=</span> <span class="token number">18.96</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunrise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> expectedSunset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromHours</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SolarCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetSolarTimes</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    solarTimes<span class="token punctuation">.</span>Sunrise<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunrise<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    solarTimes<span class="token punctuation">.</span>Sunset<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeCloseTo</span><span class="token punctuation">(</span>expectedSunset<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Although these tests no longer exercise the full integration scope, they are still driven by functional requirements of the app. Because we already have another high-level test that covers the entire endpoint, we can keep these ones more narrow without sacrificing overall confidence.</p>
<p>This trade-off makes sense if we're trying to improve execution speed, but I would recommend to stick to high-level tests as much as possible, at least until it becomes a problem.</p>
<p>Finally, we may also want to do something to ensure that our Redis caching layer works correctly as well. Even though we're using it in our tests, it never actually returns a cached response because the database gets reset between tests.</p>
<p>The problem with testing things like caching is that they can't be defined by functional requirements. A user, with no awareness of the app's internal affairs, has no way of knowing whether the responses are returned from cache or not.</p>
<p>However, if our goal is only to test the integration between the app and Redis, we don't need to write implementation-aware tests and can do something like this instead:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">User_can_get_solar_times_for_their_location_by_ip_multiple_times</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FakeApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> collectedSolarTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">"/solartimes/by_ip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> solarTimes <span class="token operator">=</span> JsonSerializer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Deserialize</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>SolarTimes<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        collectedSolarTimes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>solarTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Assert</span>
    collectedSolarTimes<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=></span> t<span class="token punctuation">.</span>Sunrise<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContainSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    collectedSolarTimes<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=></span> t<span class="token punctuation">.</span>Sunset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContainSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The test will query the same endpoint multiple times and assert that the result always remains the same. This is enough to ensure that the responses are cached properly and then returned in the same way as normal responses.</p>
<p>At the end of the day we have a simple test suite that looks like this:</p>
<p><img src="http://localhost:3000/Example-test-results.png" alt="Test suite"></p>
<p>Note that the duration of the tests is pretty good, with the fastest integration test completing at 55ms and the slowest being under a second (due to suffering from cold start). Considering that these tests involve the entire lifecycle, include all dependencies and infrastructure, while relying on a grand total of zero mocks, I would say that this is more than acceptable.</p>
<p>If you want to tinker with the example project yourself, you can find it <a href="https://github.com/Tyrrrz/FuncTestingInAspNetCoreExample">on GitHub</a>.</p>
<h2>Drawbacks and considerations</h2>
<p>Unfortunately, there is <a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">no silver bullet</a> and the approaches described in this article also suffer from some potential drawbacks. In the interest of fairness, it makes sense to mention them as well.</p>
<p>One of the biggest challenges I've found when doing high-level functional testing is figuring out a good balance between usefulness and usability. Compared to approaches that focus specifically on unit testing, it does take more effort to ensure that such tests are sufficiently deterministic, don't take too long, can run independently of each other, and are generally usable during development.</p>
<p>The wide scope of tests also implies the need for a deeper understanding of the project's dependencies and technologies it relies upon. It's important to know how they're used, whether they can be easily containerized, which options are available and what are the trade-offs.</p>
<p>In the context of integration testing, the "testability" aspect is not defined by how well the code can be isolated, but instead by how well the actual infrastructure accommodates and facilitates testing. This puts a certain prerequisite on the responsible person and the team in general in terms of technical expertise.</p>
<p>It may also take some time to set up and configure the testing environment, as it includes creating fixtures, wiring fake implementations, adding custom initialization and cleanup behavior, and so on. All these things need to be maintained as the project scales and becomes more complicated.</p>
<p>Writing functional tests in itself involves a bit more planning as well, because it's no longer just about covering every method of every class, but rather about outlining software requirements and turning them into code. Understanding what those requirements are and which of them are functional can also be tricky sometimes, as it requires an ability to think from a user's perspective.</p>
<p>Another common concern is that high-level tests often suffer from a lack of locality. If a test fails, either due to unmet expectations or because of an unhandled exception, it's usually unclear what exactly caused the error.</p>
<p>Although there are ways to mitigate this issue, ultimately it's always going to be a trade-off: isolated tests are better at indicating the cause of an error, while integrated tests are better at highlighting the impact. Both are equally useful, so it comes down to what you consider to be more important.</p>
<p>At the end of the day, I still think functional testing is worth it even despite these shortcomings, as I find that it leads to a better developer experience overall. It's been a while since I've done classic unit testing and I'm not looking forward to starting again.</p>
<h2>Summary</h2>
<p>Unit testing is a popular approach for testing software, but mostly for the wrong reasons. It's often touted as an effective way for developers to test their code while also enforcing best design practices, however many find it encumbering and superficial.</p>
<p>It's important to understand that development testing does not equate to unit testing. The primary goal is not to write tests which are as isolated as possible, but rather to gain confidence that the code works according to its functional requirements. And there are better ways to achieve that.</p>
<p>Writing high-level tests that are driven by user behavior will provide you with much higher return on investment in the long run, and it isn't as hard as it seems. Find an approach that makes the most sense for your project and stick to it.</p>
<p>Here are the main takeaways:</p>
<ol start="0">
<li>Think critically and challenge best practices</li>
<li>Don't rely on the test pyramid</li>
<li>Separate tests by functionality, rather than by classes, modules, or scope</li>
<li>Aim for the highest level of integration while maintaining reasonable speed and cost</li>
<li>Avoid sacrificing software design for testability</li>
<li>Consider mocking only as a last resort</li>
</ol>]]></description><link>http://localhost:3000/blog/unit-testing-is-overrated</link><guid isPermaLink="false">http://localhost:3000/blog/unit-testing-is-overrated</guid><category><![CDATA[programming]]></category><category><![CDATA[software design]]></category><category><![CDATA[testing]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Tue, 07 Jul 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Simulating Return Type Inference in C#]]></title><description><![CDATA[<p>Above everything else in software development, I really enjoy building frameworks that enable other developers to create something cool. Sometimes, when chasing that perfect design I have in mind, I find myself coming up with weird hacks that really push the C# language to the limit.</p>
<p>One such case happened not so long ago, when my coworker and I were looking at how to avoid specifying generic arguments, in places where the compiler should seemingly be able to guess it based on the return type. He said it was impossible, seeing as C# can only infer generic arguments from method parameters, however I was able to come up with a way to prove him wrong.</p>
<p>In this article I will show a little trick I came up with to simulate return type inference, as well as some examples where that can be useful.</p>
<h2>Type inference</h2>
<p>Type inference, in general, is the ability of a compiler to automatically detect the type of a particular expression, without having the programmer explicitly specify it. This feature works by analyzing the context in which the expression is evaluated, as well as the constraints imposed by the flow of data in the program.</p>
<p>By being able to detect the type automatically, languages that support type inference allow writing more succinct code, while still maintaining the full benefits of a static type system. This is why most mainstream statically typed languages have type inference, in one form or another.</p>
<p>C#, being one of those languages, has type inference as well. The simplest possible example of it is the <code>var</code> keyword:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>              <span class="token comment">// int</span>
<span class="token class-name"><span class="token keyword">var</span></span> y <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>          <span class="token comment">// string</span>
<span class="token class-name"><span class="token keyword">var</span></span> z <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token comment">// double</span>
<span class="token class-name"><span class="token keyword">var</span></span> g <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Guid</span>
</code></pre>
<p>When doing a combined declaration and assignment operation with the <code>var</code> keyword, you don't need to specify the type of the variable. The compiler is able to detect it on its own based on the expression on the right side.</p>
<p>In a similar vein, C# also allows initializing an array without having to manually specify its type:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// string[]</span>
</code></pre>
<p>In this case, the compiler can see that we're initializing the array with two string elements so it can safely conclude that the resulting array is of type <code>string[]</code>. In some (very rare) cases, it can even infer the type of the array based on the most specific common type among the individual elements:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// double[]</span>
</code></pre>
<p>However, the most interesting aspect of type inference in C# is, of course, generic methods. When calling a method with a generic signature, we can omit type arguments as long as they can be deduced from the values passed to the method parameters.</p>
<p>For example, we can define a generic method <code>List.Create&#x3C;T></code> that creates a list from a sequence of elements:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">List</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token class-name">T<span class="token punctuation">[</span><span class="token punctuation">]</span></span> items<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which in turn can be used like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// List&#x3C;int></span>
</code></pre>
<p>In the above scenario we could've specified the type explicitly by writing <code>List.Create&#x3C;int>(...)</code> but we didn't have to. The compiler is able to detect it automatically based on the parameters we passed into the method, which are constrained by the same type as the returned list itself.</p>
<p>Interestingly enough, all of the examples shown above are in fact based on the same form of type inference, which works by analyzing the constraints imposed by other expressions, whose type is already known. In other words, it examines the flow of data that <em>goes in</em> and draws conclusions about the data that <em>goes out</em>.</p>
<p>There are scenarios, however, where we may want the type inference to work in the opposite direction. Let's see where that could be useful.</p>
<h2>Option type</h2>
<p>If you have been writing code in a functional style before, it's very likely that you're intimately familiar with the <code>Option&#x3C;T></code> type. It's a container that encapsulates a single value (or absence thereof) and allows us to perform various operations on the content without actually observing its state.</p>
<p>In C#, an option type is usually defined by encapsulating two fields -- a generic value and a flag that indicates whether that value is actually set. It could look something like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">T</span> _value<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">bool</span></span> _hasValue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Option</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> hasValue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        _hasValue <span class="token operator">=</span> hasValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Option</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">TOut</span> <span class="token generic-method"><span class="token function">Match</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> TOut<span class="token punctuation">></span></span> some<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span> none<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token return-type class-name">_hasValue <span class="token punctuation">?</span></span> <span class="token function">some</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Match</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> some<span class="token punctuation">,</span> <span class="token class-name">Action</span> none<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_hasValue<span class="token punctuation">)</span>
            <span class="token function">some</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> TOut<span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token operator">=></span>
        _hasValue <span class="token punctuation">?</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Bind</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> Option<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span><span class="token punctuation">></span></span> bind<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token return-type class-name">_hasValue <span class="token punctuation">?</span></span> <span class="token function">bind</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>TOut<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This API design is fairly basic. The implementation above hides the actual value away from consumers, surfacing it only through the <code>Match(...)</code> method, which unwraps the container by handling both of its potential states. Additionally, there are <code>Select(...)</code> and <code>Bind(...)</code> methods that can be used to safely transform the value, regardless of whether it's actually been set or not.</p>
<p>Also, in this example, <code>Option&#x3C;T></code> is defined as a <code>readonly struct</code>. Seeing as it's mainly returned from methods and used in local scopes, this decision makes sense from a performance point of view.</p>
<p>Just to make things convenient, we may also want to provide factory methods that help construct new instances of <code>Option&#x3C;T></code> in a more fluent manner:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Option</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Some</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">None</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which can be used like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">.</span>TryParse<span class="token return-type class-name"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">?</span></span> Option<span class="token punctuation">.</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> Option<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">None</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, in case with <code>Option.Some&#x3C;T>(...)</code>, we can drop the generic argument because the compiler can infer it based on the type of <code>value</code>, which is <code>int</code>. On the other hand, the same doesn't work with <code>Option.None&#x3C;T>(...)</code> because it doesn't have any parameters, hence why we need to specify the type manually.</p>
<p>Even though the type argument for <code>Option.None&#x3C;T>(...)</code> seems to be inherently obvious from the context, the compiler is not able to deduce it. This is because, as mentioned earlier, type inference in C# only works by analyzing the data that flows in and not the other way around.</p>
<p>Of course, ideally, we would want the compiler to figure out the type of <code>T</code> in <code>Option.None&#x3C;T>(...)</code> based on the <em>return type</em> this expression is <em>expected</em> to have, as dictated by the signature of the containing method. If not, we would want it to at least get the <code>T</code> from the first branch of the conditional expression, where it was already inferred from <code>value</code>.</p>
<p>Unfortunately, neither of these is possible with C#'s type system because it would need to work out the type in reverse, which it cannot do. That said, we can help it a little bit.</p>
<p>We can simulate <em>return type inference</em> by having <code>Option.None</code> return a special non-generic type representing an option with deferred initialization, which can be coerced into <code>Option&#x3C;T></code>. Here's how that would look:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">T</span> _value<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">bool</span></span> _hasValue<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Option</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> hasValue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
        _hasValue <span class="token operator">=</span> hasValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Option</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token generic-method"><span class="token function">Option</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">NoneOption</span> none<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">NoneOption</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Option</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Some</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Option<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NoneOption</span> None <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NoneOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, <code>Option.None</code> now returns a dummy <code>NoneOption</code> object, which essentially represents an empty option whose type hasn't been decided yet. Because <code>NoneOption</code> is not generic, we were able to drop the generic arguments and turn <code>Option.None</code> into a property.</p>
<p>Additionally, we made it so <code>Option&#x3C;T></code> implements an implicit conversion from <code>NoneOption</code>. Although operators themselves can't be generic in C#, they still retain type arguments of the declaring type, which allows us to define this conversion for <em>every possible</em> variant of <code>Option&#x3C;T></code>.</p>
<p>All of this allows us to write <code>Option.None</code> and have the compiler coerce it automatically to the destination type. From the consumer's point of view, it looks as though we've implemented return type inference:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Option<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> number<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">.</span>TryParse<span class="token return-type class-name"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">?</span></span> Option<span class="token punctuation">.</span><span class="token function">Some</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> Option<span class="token punctuation">.</span>None<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Result type</h2>
<p>Just like we did with <code>Option&#x3C;T></code>, we may want to apply the same treatment to <code>Result&#x3C;TOk, TError></code>. This type fulfills a similar purpose, except that it also has a fully fledged value representing the negative case, instead of just being empty.</p>
<p>Here's how we could implement it:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TOk</span> _ok<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TError</span> _error<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">bool</span></span> _isError<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">,</span> <span class="token class-name">TError</span> error<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isError<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _ok <span class="token operator">=</span> ok<span class="token punctuation">;</span>
        _error <span class="token operator">=</span> error<span class="token punctuation">;</span>
        _isError <span class="token operator">=</span> isError<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TError</span> error<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Result</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Ok</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Error</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">TError</span> error<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And here's how it would then be used:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Result<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">.</span>TryParse<span class="token return-type class-name"><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">?</span></span> Result<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Ok</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> Result<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Error</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"Invalid value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, the situation regarding type inference is even more dire here. Neither <code>Result.Ok&#x3C;TOk, TError>(...)</code> nor <code>Result.Error&#x3C;TOk, TError>(...)</code> have enough parameters to infer both generic arguments, so we are forced to specify them manually in both cases.</p>
<p>Having to write out these types every time leads to visual noise, code duplication, and bad developer experience in general. Let's try to rectify this using the same technique from earlier:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TOk</span> _ok<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TError</span> _error<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">bool</span></span> _isError<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">,</span> <span class="token class-name">TError</span> error<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isError<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _ok <span class="token operator">=</span> ok<span class="token punctuation">;</span>
        _error <span class="token operator">=</span> error<span class="token punctuation">;</span>
        _isError <span class="token operator">=</span> isError<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TError</span> error<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token generic-method"><span class="token function">Result</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">DelayedResult<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span> ok<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>ok<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token generic-method"><span class="token function">Result</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">DelayedResult<span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span> error<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">DelayedResult<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">DelayedResult</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Result</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DelayedResult<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Ok</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelayedResult<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DelayedResult<span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Error</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">TError</span> error<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelayedResult<span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Here we similarly defined <code>DelayedResult&#x3C;T></code> that represents the initialized part of <code>Result&#x3C;TOk, TError></code>. Again, we're using implicit conversion operators to coerce the delayed instance into the destination type.</p>
<p>Doing all that enables us to rewrite our code like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Result<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">?</span> <span class="token punctuation">(</span>Result<span class="token operator">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">)</span> Result<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> Result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This is a bit better but not ideal. The problem here is that the conditional expression in C# doesn't coerce its branches directly to the expected type, but instead tries to convert the type of the negative branch into the type of the positive branch. Because of that, we need to explicitly cast the positive branch into <code>Result&#x3C;int, string></code> to specify the common denominator.</p>
<p>However, this issue can be completely avoided if we just use a conditional statement instead:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Result<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I'm much more satisfied with this setup. We were able to drop the generic arguments entirely, while maintaining the same signature and type safety as before. Again, from a high-level perspective this may look as if the generic arguments were somehow inferred from the expected return type.</p>
<p>However, you may have noticed that there's a bug in the implementation. If the types of <code>TOk</code> and <code>TError</code> are the same, there's an ambiguity as to which state <code>DelayedResult&#x3C;T></code> actually represents.</p>
<p>For example, imagine we were using our result type in the following scenario:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITranslationService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span> <span class="token function">IsLanguageSupportedAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">TranslateAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> targetLanguage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Translator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ITranslationService</span> _translationService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Translator</span><span class="token punctuation">(</span><span class="token class-name">ITranslationService</span> translationService<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _translationService <span class="token operator">=</span> translationService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Result<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">TranslateAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> language<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">await</span> _translationService<span class="token punctuation">.</span><span class="token function">IsLanguageSupportedAsync</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Language </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">language</span><span class="token punctuation">}</span></span><span class="token string"> is not supported"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> translated <span class="token operator">=</span> <span class="token keyword">await</span> _translationService<span class="token punctuation">.</span><span class="token function">TranslateAsync</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>translated<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Here <code>Result.Error&#x3C;TError>(...)</code> and <code>Result.Ok&#x3C;TOk>(...)</code> both return <code>DelayedResult&#x3C;string></code>, so the compiler struggles to figure out what to do with it:</p>
<pre class="language-ini"><code class="language-ini">Cannot convert expression type 'DelayedResult&#x3C;string>' to return type 'Result&#x3C;string,string>'
</code></pre>
<p>Luckily, the fix is simple -- we just need to represent each of the individual states separately:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TOk</span> _ok<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">TError</span> _error<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">bool</span></span> _isError<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">,</span> <span class="token class-name">TError</span> error<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isError<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _ok <span class="token operator">=</span> ok<span class="token punctuation">;</span>
        _error <span class="token operator">=</span> error<span class="token punctuation">;</span>
        _isError <span class="token operator">=</span> isError<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token class-name">TError</span> error<span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token generic-method"><span class="token function">Result</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">DelayedOk<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span> ok<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>ok<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token generic-method"><span class="token function">Result</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">DelayedError<span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span> error<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Result<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">,</span> TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">DelayedOk<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">DelayedOk</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">DelayedError<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">DelayedError</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Result</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DelayedOk<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Ok</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">TOk</span> ok<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelayedOk<span class="token punctuation">&#x3C;</span>TOk<span class="token punctuation">></span></span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DelayedError<span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Error</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">TError</span> error<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DelayedError<span class="token punctuation">&#x3C;</span>TError<span class="token punctuation">></span></span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Going back to the code from earlier, it will now work exactly as expected:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Translator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ITranslationService</span> _translationService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Translator</span><span class="token punctuation">(</span><span class="token class-name">ITranslationService</span> translationService<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _translationService <span class="token operator">=</span> translationService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>Result<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">TranslateAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> language<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">await</span> _translationService<span class="token punctuation">.</span><span class="token function">IsLanguageSupportedAsync</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Language </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">language</span><span class="token punctuation">}</span></span><span class="token string"> is not supported"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> translated <span class="token operator">=</span> <span class="token keyword">await</span> _translationService<span class="token punctuation">.</span><span class="token function">TranslateAsync</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">Ok</span><span class="token punctuation">(</span>translated<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Summary</h2>
<p>Although type inference in C# has its limits, we can push them a bit further with the help of implicit conversion operators. Using a simple trick shown in this article, we can simulate return type inference, enabling some potentially interesting design opportunities.</p>]]></description><link>http://localhost:3000/blog/return-type-inference</link><guid isPermaLink="false">http://localhost:3000/blog/return-type-inference</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Tue, 10 Mar 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Working with Expression Trees in C#]]></title><description><![CDATA[<p>Expression trees is an obscure, although very interesting feature in .NET. Most people probably think of it as something synonymous with object-relational mapping frameworks, but despite being its most common use case, it's not the only one. There are a lot of creative things you can do with expression trees, including code generation, transpilation, metaprogramming, and more.</p>
<p>In this article I will give an overview of what expression trees are and how to work with them, as well as show some interesting scenarios where I've seen them used to great effect.</p>
<h2>What is an expression tree?</h2>
<p>When it comes to programming languages, an expression describes some operation on data that produces a certain result. It's one of the foundational constructs of any language.</p>
<p>As an example of a very simple expression, consider <code>2 + 3</code>. It consists of a constant, a plus operator, and another constant. We can evaluate this expression and get the result, which is <code>5</code>.</p>
<p>Of course, expressions vary in complexity and can contain different combinations of constants, variables, operators and function calls. For example, the following piece of code is also an expression:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>personName<span class="token punctuation">)</span>
    <span class="token punctuation">?</span> <span class="token string">"Greetings, "</span> <span class="token operator">+</span> personName
    <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre>
<p>Looking at the above expression, we can also consider two of its aspects: <strong>what it does</strong> and <strong>how it does it</strong>.</p>
<p>When it comes to the former, the answer is pretty simple -- it generates a greeting based on the person's name, or produces a <code>null</code>. If this expression was returned by a function, that would be the extent of information we could derive from its signature:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> <span class="token function">GetGreeting</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> personName<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre>
<p>As for how it does it, however, the answer is a bit more detailed. This expression consists of a ternary conditional operator, whose condition is evaluated by negating the result of a call to method <code>string.IsNullOrWhiteSpace</code> with parameter <code>personName</code>, whose positive clause is made up of a "plus" binary operator that works with a constant string expression <code>"Greetings, "</code> and the parameter expression, and whose negative clause consist of a sole <code>null</code> expression.</p>
<p>The description above may seem like a mouthful, but it outlines the exact syntactic structure of the expression. It is by this higher-order representation that we're able to tell how exactly it's evaluated.</p>
<p>To make things more clear, we can also illustrate this representation with the following diagram:</p>
<pre class="language-csharp"><code class="language-csharp"> <span class="token punctuation">{</span> Ternary conditional <span class="token punctuation">}</span>
      <span class="token operator">|</span>      <span class="token operator">|</span>     <span class="token operator">|</span>
    <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">+</span>      <span class="token operator">|</span>     <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
    <span class="token operator">|</span>        <span class="token operator">|</span>           <span class="token operator">|</span>
 <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>   <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
    <span class="token operator">|</span>        <span class="token operator">|</span>           <span class="token operator">|</span>
    <span class="token operator">|</span>        <span class="token operator">|</span>           <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token operator">|</span>        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>             <span class="token operator">|</span>
 <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>            <span class="token operator">|</span>             <span class="token operator">|</span>
   <span class="token operator">|</span> <span class="token operator">|</span>           <span class="token punctuation">{</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>   <span class="token punctuation">{</span> Method call <span class="token punctuation">}</span>
   <span class="token operator">|</span> <span class="token operator">|</span>                         <span class="token operator">|</span>      <span class="token operator">|</span>
   <span class="token operator">|</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>               <span class="token operator">|</span>      <span class="token operator">|</span>
   <span class="token operator">|</span>           <span class="token operator">|</span>               <span class="token operator">|</span>      <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">{</span> <span class="token keyword">string</span><span class="token punctuation">.</span>IsNullOrWhiteSpace <span class="token punctuation">}</span>
   <span class="token operator">|</span>           <span class="token operator">|</span>               <span class="token operator">|</span>
   <span class="token operator">|</span>     <span class="token punctuation">{</span> personName <span class="token punctuation">}</span>        <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">{</span> personName <span class="token punctuation">}</span>
   <span class="token operator">|</span>
   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token punctuation">{</span> <span class="token string">"Greetings, "</span> <span class="token punctuation">}</span>
</code></pre>
<p>As you can see, at the highest level we have the ternary conditional operator which is itself made up of other expressions, which are made up of other expressions, and so on. The relationship between individual components is hierarchical, resembling an upside-down tree.</p>
<p>Although it's inherently obvious to us as humans, in order to interpret this representation programmatically, we need a special data structure. This data structure is what we call an <em>expression tree</em>.</p>
<h2>Constructing expression trees manually</h2>
<p>In C#, expression trees can be used in either of two directions: we can create them directly via an API and then compile them into runtime instructions, or we can disassemble them from supplied lambda expressions. In this part of the article we will focus on the first one.</p>
<p>The framework offers us with an API to construct expression trees through the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression"><code>Expression</code></a> class located in the <code>System.Linq.Expressions</code> namespace. It exposes various factory methods that can be used to produce expressions of different types.</p>
<p>Some of these methods are:</p>
<ul>
<li><code>Expression.Constant(...)</code> -- creates an expression that represents a value.</li>
<li><code>Expression.Variable(...)</code> -- creates an expression that represents a variable.</li>
<li><code>Expression.New(...)</code> -- creates an expression that represents an initialization of a new instance.</li>
<li><code>Expression.Assign(...)</code> -- creates an expression that represents an assignment operation.</li>
<li><code>Expression.Equal(...)</code> -- creates an expression that represents an equality comparison.</li>
<li><code>Expression.Call(...)</code> -- creates an expression that represents a specific method call.</li>
<li><code>Expression.Condition(...)</code> -- creates an expression that represents branching logic.</li>
<li><code>Expression.Loop(...)</code> -- creates an expression that represents repeating logic.</li>
</ul>
<p>As a simple exercise, let's recreate the expression we've looked into in the previous part of the article:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Expression</span> <span class="token function">ConstructGreetingExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> personNameParameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"personName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Condition</span>
    <span class="token class-name"><span class="token keyword">var</span></span> isNullOrWhiteSpaceMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>IsNullOrWhiteSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> condition <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>isNullOrWhiteSpaceMethod<span class="token punctuation">,</span> personNameParameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// True clause</span>
    <span class="token class-name"><span class="token keyword">var</span></span> trueClause <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>
        Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Greetings, "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        personNameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// False clause</span>
    <span class="token class-name"><span class="token keyword">var</span></span> falseClause <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Ternary conditional</span>
    <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> trueClause<span class="token punctuation">,</span> falseClause<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Let's digest what just happened here.</p>
<p>First of all, we're calling <code>Expression.Parameter</code> in order to construct a parameter expression. We will be able to use it to resolve the value of a particular parameter.</p>
<p>Following that, we are relying on reflection to resolve a reference to the <code>string.IsNullOrWhiteSpace</code> method. We use <code>Expression.Call</code> to create a method invocation expression that represents a call to <code>string.IsNullOrWhiteSpace</code> with the parameter resolved by the expression we created earlier. To perform a logical "not" operation on the result, we're calling <code>Expression.Not</code> to wrap the method call. Incidentally, this expression constitutes the condition part of the ternary expression we're building.</p>
<p>To compose the positive clause, we're constructing an "add" operation with the help of <code>Expression.Add</code>. As the operands, we're providing a constant expression for string <code>"Greetings, "</code> and the parameter expression from earlier.</p>
<p>Then, for the negative clause, we're using <code>Expression.Constant</code> to create a <code>null</code> constant expression. To ensure that the <code>null</code> value is typed correctly, we explicitly specify the type as the second parameter.</p>
<p>Finally, we're combining all of the above parts together to create our ternary conditional operator. If you take a moment to trace what goes into <code>Expression.Condition</code>, you will realize that we have essentially replicated the tree diagram we've seen earlier.</p>
<p>However, this expression isn't particularly useful on its own. Since we've created it ourselves, we're not really interested in its structure -- we want to be able to evaluate it instead.</p>
<p>In order to do that, we have to create an entry point by wrapping everything in a lambda expression. To turn it into an actual lambda, we can call <code>Compile</code> which will produce a delegate that we can invoke.</p>
<p>Let's update the method accordingly:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">?</span><span class="token punctuation">></span></span> <span class="token function">ConstructGreetingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> personNameParameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"personName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Condition</span>
    <span class="token class-name"><span class="token keyword">var</span></span> isNullOrWhiteSpaceMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>IsNullOrWhiteSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> condition <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>isNullOrWhiteSpaceMethod<span class="token punctuation">,</span> personNameParameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// True clause</span>
    <span class="token class-name"><span class="token keyword">var</span></span> trueClause <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>
        Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Greetings, "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        personNameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// False clause</span>
    <span class="token class-name"><span class="token keyword">var</span></span> falseClause <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> conditional <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> trueClause<span class="token punctuation">,</span> falseClause<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>conditional<span class="token punctuation">,</span> personNameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, we were able to construct a lambda expression by specifying its body (which is our conditional expression) and the parameter that we defined earlier. We also indicated the exact type of the function this expression represents by supplying a generic argument.</p>
<p>By compiling the expression tree, we can convert the code it represents into runtime instructions. The delegate returned by this method can be used to evaluate the expression:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> getGreeting <span class="token operator">=</span> <span class="token function">ConstructGreetingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> greetingForJohn <span class="token operator">=</span> <span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>However, if we try to run this, we will get an error:</p>
<pre class="language-ini"><code class="language-ini">The binary operator Add is not defined for the types 'System.String' and 'System.String'.
</code></pre>
<p>Hmm, that's weird. I'm pretty sure the <code>+</code> operator is defined for strings, otherwise how else would I be able to write <code>"foo" + "bar"</code>?</p>
<p>Well, actually the error message is correct, this operator is indeed not defined for <code>System.String</code>. Instead what happens is that the C# compiler automatically converts expressions like <code>"foo" + "bar"</code> into <code>string.Concat("foo", "bar")</code>. In cases with more than two strings this provides better performance because it avoids unnecessary allocations.</p>
<p>When dealing with expression trees, we're essentially writing the "final" version of the code. So instead of <code>Expression.Add</code> we need to call <code>string.Concat</code> directly.</p>
<p>Let's change our code to accommodate for that:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">?</span><span class="token punctuation">></span></span> <span class="token function">ConstructGreetingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> personNameParameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"personName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Condition</span>
    <span class="token class-name"><span class="token keyword">var</span></span> isNullOrWhiteSpaceMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>IsNullOrWhiteSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> condition <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>isNullOrWhiteSpaceMethod<span class="token punctuation">,</span> personNameParameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// True clause</span>
    <span class="token class-name"><span class="token keyword">var</span></span> concatMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Concat<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> trueClause <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>
        concatMethod<span class="token punctuation">,</span>
        Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Greetings, "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        personNameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// False clause</span>
    <span class="token class-name"><span class="token keyword">var</span></span> falseClause <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> conditional <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> trueClause<span class="token punctuation">,</span> falseClause<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>conditional<span class="token punctuation">,</span> personNameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, if we try to compile and run our function, it behaves as expected:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> getGreetings <span class="token operator">=</span> <span class="token function">ConstructGreetingFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> greetingsForJohn <span class="token operator">=</span> <span class="token function">getGreetings</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Greetings, John"</span>
<span class="token class-name"><span class="token keyword">var</span></span> greetingsForNobody <span class="token operator">=</span> <span class="token function">getGreetings</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#x3C;null></span>
</code></pre>
<p>I think this is pretty awesome. We built an expression tree, compiled it in-memory, and now we can evaluate it using a delegate.</p>
<h2>Constructing statements</h2>
<p>So far we've only talked about expressions, but what about statements? Can we dynamically compile code that contains multiple statements or are we limited to expressions?</p>
<p>The main difference between expressions and statements is that statements don't produce results. That means we can't really string them into a single expression.</p>
<p>For example, consider the following two statements:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Two statements:</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>There's no way for us to compose these into one expression, like we could have with <code>StringBuilder</code>, for instance:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Single expression:</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Fortunately, the expression tree model allows us to represent statements as well. To do that, we need to put them inside a <code>Block</code> expression.</p>
<p>Here is how it works:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Expression</span> <span class="token function">CreateStatementBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> consoleWriteMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> consoleWriteLineMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>consoleWriteMethod<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>consoleWriteLineMethod<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>We can then similarly compile a delegate and invoke it:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> block <span class="token operator">=</span> <span class="token function">CreateStatementBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Action<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Hello world!</span>
</code></pre>
<p>Now, if we inspect the <code>block.Type</code> property, which denotes the result type of the expression, we will see that it's <code>System.Void</code>. Essentially the lambda expression we've built is just this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>For more complex use cases, we may declare and reference variables from inside the block expression:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">Expression</span> <span class="token function">CreateStatementBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> consoleWriteMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> consoleWriteLineMethod <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> variableA <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Variable</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> variableB <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Variable</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span>
        <span class="token comment">// Declare variables in scope</span>
        <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>variableA<span class="token punctuation">,</span> variableB<span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token comment">// Assign values to variables</span>
        Expression<span class="token punctuation">.</span><span class="token function">Assign</span><span class="token punctuation">(</span>variableA<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"Foo "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Expression<span class="token punctuation">.</span><span class="token function">Assign</span><span class="token punctuation">(</span>variableB<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        <span class="token comment">// Call methods</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>consoleWriteMethod<span class="token punctuation">,</span> variableA<span class="token punctuation">)</span><span class="token punctuation">,</span>
        Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>consoleWriteLineMethod<span class="token punctuation">,</span> variableB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>If we compile and evaluate this expression, we will see the following output in the console:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> block <span class="token operator">=</span> <span class="token function">CreateStatementBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Action<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Foo bar</span>
</code></pre>
<p>So despite the fact that we are building <em>expression</em> trees, we are not actually limited only to expressions. We can just as easily model blocks of statements too.</p>
<h2>Converting expressions to readable code</h2>
<p>We know how to compile our expressions into runtime instructions, but what about readable C# code? It could be useful if we wanted to display it or just to have some visual aid while testing.</p>
<p>The good news is that all types that derive from <code>Expression</code> override the <code>ToString</code> method with a more specific implementation. That means we can do the following:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> s1 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>

<span class="token class-name"><span class="token keyword">var</span></span> s2 <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>
    Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// (5 * 11)</span>
</code></pre>
<p>The bad news, however, is that it only works nicely with simple expressions like the ones above. For example, if we try to call <code>ToString</code> on the ternary expression we compiled earlier, we will get:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// personName => IIF(Not(IsNullOrWhiteSpace(personName)), Concat("Greetings, ", personName), null)</span>
</code></pre>
<p>While fairly descriptive, this is probably not the text representation one would hope to see.</p>
<p>Luckily, we can use the <a href="https://github.com/agileobjects/ReadableExpressions">ReadableExpressions</a> NuGet package to get us what we want. By installing it, we should be able to call <code>ToReadableString</code> to get the actual C# code that represents the expression:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> code <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">ToReadableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// personName => !string.IsNullOrWhiteSpace(personName) ? "Greetings, " + personName : null</span>
</code></pre>
<p>As you can see, it even replaced the <code>string.Concat</code> call with the plus operator to make it closer to code that a developer would typically write.</p>
<p>Additionally, if you are using Visual Studio and want to inspect expressions by visualizing them as code, you can install <a href="https://marketplace.visualstudio.com/items?itemName=vs-publisher-1232914.ReadableExpressionsVisualizers">this extension</a>. It's very helpful when debugging large or really complex expressions.</p>
<h2>Optimizing reflection calls</h2>
<p>When it comes to compiled expressions, one of the most common usage scenarios is reflection-heavy code. As we all know, reflection can be quite slow because of late binding, however by compiling the code at runtime we can achieve better performance.</p>
<p>Let's imagine we have a class which has a private method that we want to invoke from the outside:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Command</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>With the help of reflection, this is quite simple:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Command</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Execute"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Of course, invoking the method like that can cause significant performance issues if we put it in a tight loop. Let's see if we can optimize it a bit.</p>
<p>Before we jump into expressions, we can first optimize the above code by separating the part that resolves <code>MethodInfo</code> from the part that invokes it. If we're going to call this method more than once, we don't have to use <code>GetMethod</code> every time:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionCached</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">MethodInfo</span> ExecuteMethod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Command</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Execute"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ExecuteMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That should make things better, but we can push it even further by using <code>Delegate.CreateDelegate</code>. This way we can create a re-usable delegate and avoid the overhead that comes with <code>MethodInfo.Invoke</code>. Let's do that as well:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionDelegate</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">MethodInfo</span> ExecuteMethod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Command</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Execute"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span>Command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> Impl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span>
        <span class="token punctuation">(</span>Func<span class="token operator">&#x3C;</span>Command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">)</span> Delegate<span class="token punctuation">.</span><span class="token function">CreateDelegate</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Func<span class="token punctuation">&#x3C;</span>Command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> ExecuteMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Impl</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Alright, that's probably as good as it can get with reflection. Now let's try to do the same using compiled expressions:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionTrees</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">MethodInfo</span> ExecuteMethod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Command</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Execute"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span>Command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> Impl <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">ExpressionTrees</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> instance <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Command</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> call <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> ExecuteMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Impl <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span>Command<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Impl</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In all of these approaches we're relying on static constructors to initialize the properties in a lazy and thread-safe manner. This ensures that all of the heavy-lifting happens only once, the first time the members of these classes are accessed.</p>
<p>Now let's pit all of these techniques against each other and compare their performance using <a href="https://github.com/dotnet/BenchmarkDotNet">Benchmark.NET</a>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Benchmarks</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Reflection"</span><span class="token punctuation">,</span> Baseline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Reflection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Command</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Execute"</span><span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Reflection (cached)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Cached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ReflectionCached<span class="token punctuation">.</span><span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Reflection (delegate)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Delegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ReflectionDelegate<span class="token punctuation">.</span><span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Expressions"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Expressions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ExpressionTrees<span class="token punctuation">.</span><span class="token function">CallExecute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BenchmarkRunner<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Benchmarks<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-r"><code class="language-r"><span class="token operator">|</span>                Method <span class="token operator">|</span>       Mean <span class="token operator">|</span>     Error <span class="token operator">|</span>    StdDev <span class="token operator">|</span> Ratio <span class="token operator">|</span>
<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span>
<span class="token operator">|</span>            Reflection <span class="token operator">|</span> <span class="token number">192.975</span> ns <span class="token operator">|</span> <span class="token number">1.6802</span> ns <span class="token operator">|</span> <span class="token number">1.4895</span> ns <span class="token operator">|</span>  <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">|</span>   Reflection <span class="token punctuation">(</span>cached<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">123.762</span> ns <span class="token operator">|</span> <span class="token number">1.1063</span> ns <span class="token operator">|</span> <span class="token number">1.0349</span> ns <span class="token operator">|</span>  <span class="token number">0.64</span> <span class="token operator">|</span>
<span class="token operator">|</span> Reflection <span class="token punctuation">(</span>delegate<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token number">6.419</span> ns <span class="token operator">|</span> <span class="token number">0.0646</span> ns <span class="token operator">|</span> <span class="token number">0.0605</span> ns <span class="token operator">|</span>  <span class="token number">0.03</span> <span class="token operator">|</span>
<span class="token operator">|</span>           Expressions <span class="token operator">|</span>   <span class="token number">5.383</span> ns <span class="token operator">|</span> <span class="token number">0.0433</span> ns <span class="token operator">|</span> <span class="token number">0.0383</span> ns <span class="token operator">|</span>  <span class="token number">0.03</span> <span class="token operator">|</span>
</code></pre>
<p>As you can see, compiled expressions outperform reflection across the board, even though the approach with <code>CreateDelegate</code> comes really close. Note however that while the execution times are similar, <code>CreateDelegate</code> is more limited than compiled expressions -- for example, it cannot be used to call constructor methods.</p>
<p>This approach of using expression trees for dynamic method invocation is commonplace in various frameworks and libraries. For example:</p>
<ul>
<li><a href="https://github.com/AutoMapper/AutoMapper">AutoMapper</a> uses them to speed up object conversion</li>
<li><a href="https://github.com/Particular/NServiceBus">NServiceBus</a> uses them to speed up its behavior pipeline</li>
<li><a href="https://github.com/JasperFx/marten">Marten</a> uses them to speed up entity mapping</li>
</ul>
<h2>Implementing generic operators</h2>
<p>Something else we can do with compiled expressions is implement generic operators. These can be pretty useful if you're writing a lot of mathematical code and want to avoid duplication.</p>
<p>As you know, operators in C# are not generic. This means that every numeric type defines its own version of the multiply and divide operators, among other things. As a result, code that uses these operators also can't be generic either.</p>
<p>Imagine that you had a function that calculates three-fourths of a number:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">// ThreeFourths(18) -> 13</span>
</code></pre>
<p>Defined as it is, it only works when used with numbers of type <code>int</code>. If we wanted to extend it to support other types, we'd have to add some overloads:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">float</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">decimal</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre>
<p>This is suboptimal. We are introducing a lot of code duplication which only gets worse as this method is referenced from other places.</p>
<p>It would've been better if we could just do something like this instead:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">ThreeFourths</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre>
<p>But unfortunately that doesn't compile, seeing as the <code>*</code> and <code>/</code> operators are not available on every type that can be specified in place of <code>T</code>. Sadly, there's also no constraint we could use to limit the generic argument to numeric types.</p>
<p>However, by generating code dynamically with expression trees we can work around this problem:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">ThreeFourths</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> param <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Cast the numbers '3' and '4' to our type</span>
    <span class="token class-name"><span class="token keyword">var</span></span> three <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> four <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Perform the calculation</span>
    <span class="token class-name"><span class="token keyword">var</span></span> operation <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Divide</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> three<span class="token punctuation">)</span><span class="token punctuation">,</span> four<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>operation<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> func <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ThreeFourths(18) -> 13</span>
<span class="token comment">// ThreeFourths(6.66) -> 4.995</span>
<span class="token comment">// ThreeFourths(100M) -> 75</span>
</code></pre>
<p>That works well and we can reuse this method for numbers of any type. Although, seeing as our generic operation doesn't have type safety, you may be wondering how is this approach any different from just using <code>dynamic</code>?</p>
<p>Surely, we could just write our code like this and avoid all the trouble:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">dynamic</span></span> <span class="token function">ThreeFourths</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">dynamic</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre>
<p>Indeed, functionally these two approaches are the same. However, the main difference and the advantage of expression trees is the fact they are compiled, while <code>dynamic</code> isn't. Compiled code has the potential to perform much faster.</p>
<p>That said, in the example above we're not benefitting from this advantage at all because we're recompiling our function every time anyway. Let's try to change our code so that it happens only once.</p>
<p>In order to achieve that, we can apply the same pattern as the last time. Let's put the delegate inside a generic static class and have it initialized from the static constructor. Here's how that would look:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreeFourths</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Impl<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">></span></span> Of <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">static</span> <span class="token function">Impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> param <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> three <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> four <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> operation <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Divide</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> three<span class="token punctuation">)</span><span class="token punctuation">,</span> four<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>operation<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>

            Of <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Of</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">)</span> <span class="token operator">=></span> Impl<span class="token operator">&#x3C;</span>T<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">Of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ThreeFourths.Of(18) -> 13</span>
</code></pre>
<p>Due to the fact that the compiler generates a version of the <code>Impl</code> class for each argument of <code>T</code>, we end up with an implementation of three-fourths for each type encapsulated in a separate class. This approach gives us a thread-safe lazy-evaluated generic dynamic function.</p>
<p>Now, with the optimizations out of the way, let's again use Benchmark.NET to compare the different ways we can calculate three-fourths of a value:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Benchmarks</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Static"</span><span class="token punctuation">,</span> Baseline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Arguments</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">13.37</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Static</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Expressions"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Arguments</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">13.37</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Expressions</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> ThreeFourths<span class="token punctuation">.</span><span class="token function">Of</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Dynamic"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Arguments</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">13.37</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">dynamic</span></span> <span class="token function">Dynamic</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">dynamic</span></span> x<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BenchmarkRunner<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Benchmarks<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-r"><code class="language-r"><span class="token operator">|</span>      Method <span class="token operator">|</span>     x <span class="token operator">|</span>       Mean <span class="token operator">|</span>     Error <span class="token operator">|</span>    StdDev <span class="token operator">|</span> Ratio <span class="token operator">|</span> RatioSD <span class="token operator">|</span>
<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span>
<span class="token operator">|</span>      Static <span class="token operator">|</span> <span class="token number">13.37</span> <span class="token operator">|</span>  <span class="token number">0.6077</span> ns <span class="token operator">|</span> <span class="token number">0.0176</span> ns <span class="token operator">|</span> <span class="token number">0.0147</span> ns <span class="token operator">|</span>  <span class="token number">1.00</span> <span class="token operator">|</span>    <span class="token number">0.00</span> <span class="token operator">|</span>
<span class="token operator">|</span>     Dynamic <span class="token operator">|</span> <span class="token number">13.37</span> <span class="token operator">|</span> <span class="token number">19.3267</span> ns <span class="token operator">|</span> <span class="token number">0.1512</span> ns <span class="token operator">|</span> <span class="token number">0.1340</span> ns <span class="token operator">|</span> <span class="token number">31.82</span> <span class="token operator">|</span>    <span class="token number">0.78</span> <span class="token operator">|</span>
<span class="token operator">|</span> Expressions <span class="token operator">|</span> <span class="token number">13.37</span> <span class="token operator">|</span>  <span class="token number">1.9510</span> ns <span class="token operator">|</span> <span class="token number">0.0163</span> ns <span class="token operator">|</span> <span class="token number">0.0145</span> ns <span class="token operator">|</span>  <span class="token number">3.21</span> <span class="token operator">|</span>    <span class="token number">0.08</span> <span class="token operator">|</span>
</code></pre>
<p>As you can see, the expression-based approach performs about nine times faster than when using <code>dynamic</code>. Considering that these are the only two options we can use to implement generic operators, this is a pretty good case for compiled expression trees.</p>
<h2>Compiling dictionary into a switch expression</h2>
<p>Another fun way we can use expression trees is to create a dictionary with a compiled lookup. Even though the standard .NET <code>System.Collections.Generic.Dictionary</code> is insanely fast on its own, it's possible to make its read operations even faster.</p>
<p>While a typical dictionary implementation may be pretty complicated, a lookup can be represented in a form of a simple switch expression:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Pseudo-code</span>
<span class="token keyword">public</span> <span class="token return-type class-name">TValue</span> <span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token class-name">TKey</span> key<span class="token punctuation">)</span> <span class="token operator">=></span> key<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">switch</span>
<span class="token punctuation">{</span>
    <span class="token comment">// No collisions</span>
    <span class="token number">9254</span> <span class="token operator">=></span> value1<span class="token punctuation">,</span>
    <span class="token operator">-</span><span class="token number">101</span> <span class="token operator">=></span> value2<span class="token punctuation">,</span>

    <span class="token comment">// Collision</span>
    <span class="token number">777</span> <span class="token operator">=></span> key <span class="token keyword">switch</span>
    <span class="token punctuation">{</span>
        key3 <span class="token operator">=></span> value3<span class="token punctuation">,</span>
        key4 <span class="token operator">=></span> value4
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// ...</span>

    <span class="token comment">// Not found</span>
    _ <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyNotFoundException</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>The function above attempts to match the hash code of the specified key with the hash code of one of the keys contained within the dictionary. If it's successful, then the corresponding value is returned.</p>
<p>Even though hash codes are designed to be unique, inevitably there will be collisions. In such cases, when the same hash code matches with multiple different values, there is an inner switch expression that compares the actual key and determines which value to return.</p>
<p>Finally, if none of the cases matched, it throws an exception signifying that the dictionary doesn't contain the specified key.</p>
<p>The idea is that, since a switch is faster than a hash table, dynamically compiling all key-value pairs into a switch expression like the one above should result in a faster dictionary lookup.</p>
<p>Let's try it out. Here's how the code for that would look:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompiledDictionary<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDictionary<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDictionary<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span> _inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Func<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span></span> _lookup<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CompiledDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">UpdateLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Parameter for lookup key</span>
        <span class="token class-name"><span class="token keyword">var</span></span> keyParameter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TKey</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Expression that gets the key's hash code</span>
        <span class="token class-name"><span class="token keyword">var</span></span> keyGetHashCodeCall <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>
            keyParameter<span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>GetHashCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Expression that converts the key to string</span>
        <span class="token class-name"><span class="token keyword">var</span></span> keyToStringCall <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>
            keyParameter<span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ToString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Expression that throws 'not found' exception in case of failure</span>
        <span class="token class-name"><span class="token keyword">var</span></span> exceptionCtor <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">KeyNotFoundException</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> throwException <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Throw</span><span class="token punctuation">(</span>
            Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>exceptionCtor<span class="token punctuation">,</span> keyToStringCall<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Switch expression with cases for every hash code</span>
        <span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Switch</span><span class="token punctuation">(</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TValue</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// expression type</span>
            keyGetHashCodeCall<span class="token punctuation">,</span> <span class="token comment">// switch condition</span>
            throwException<span class="token punctuation">,</span> <span class="token comment">// default case</span>
            <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// use default comparer</span>
            _inner <span class="token comment">// switch cases</span>
                <span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>p <span class="token operator">=></span> p<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>g <span class="token operator">=></span>
                <span class="token punctuation">{</span>
                    <span class="token comment">// No collision, construct constant expression</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">SwitchCase</span><span class="token punctuation">(</span>
                            Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// body</span>
                            Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test values</span>

                    <span class="token comment">// Collision, construct inner switch for the key's value</span>
                    <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">SwitchCase</span><span class="token punctuation">(</span>
                        Expression<span class="token punctuation">.</span><span class="token function">Switch</span><span class="token punctuation">(</span>
                            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TValue</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            keyParameter<span class="token punctuation">,</span> <span class="token comment">// switch on actual key</span>
                            throwException<span class="token punctuation">,</span>
                            <span class="token keyword">null</span><span class="token punctuation">,</span>
                            g<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>p <span class="token operator">=></span> Expression<span class="token punctuation">.</span><span class="token function">SwitchCase</span><span class="token punctuation">(</span>
                                Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Key<span class="token punctuation">)</span>
                            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> keyParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        _lookup <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">TValue</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name">TKey</span> key<span class="token punctuation">]</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token function">_lookup</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> _inner<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// The rest of the interface implementation is omitted for brevity</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The method <code>UpdateLookup</code> takes all of the key-value pairs contained within the inner dictionary and groups them by the hash codes of their keys, which are then transformed into switch cases. If there is no collision for a particular hash code, then the switch case is made up of a single constant expression that produces the corresponding value. Otherwise, it contains an inner switch expression that further evaluates the key to determine which value to return.</p>
<p>Let's see how well this dictionary performs when benchmarked against the standard implementation:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Benchmarks</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Dictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> _normalDictionary <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">CompiledDictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> _compiledDictionary <span class="token operator">=</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CompiledDictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Params</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TargetKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">GlobalSetup</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Seed the dictionaries with values</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token keyword">in</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Count<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"key_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>

            _normalDictionary<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            _compiledDictionary<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Recompile lookup</span>
        _compiledDictionary<span class="token punctuation">.</span><span class="token function">UpdateLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Try to get the middle element</span>
        TargetKey <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"key_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Count <span class="token operator">/</span> <span class="token number">2</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Standard dictionary"</span><span class="token punctuation">,</span> Baseline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _normalDictionary<span class="token punctuation">[</span>TargetKey<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Compiled dictionary"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Compiled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _compiledDictionary<span class="token punctuation">[</span>TargetKey<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BenchmarkRunner<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Benchmarks<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-r"><code class="language-r"><span class="token operator">|</span>              Method <span class="token operator">|</span> Count <span class="token operator">|</span>      Mean <span class="token operator">|</span>     Error <span class="token operator">|</span>    StdDev <span class="token operator">|</span> Ratio <span class="token operator">|</span>
<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span>
<span class="token operator">|</span> Standard dictionary <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span> <span class="token number">24.995</span> ns <span class="token operator">|</span> <span class="token number">0.1821</span> ns <span class="token operator">|</span> <span class="token number">0.1704</span> ns <span class="token operator">|</span>  <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> Compiled dictionary <span class="token operator">|</span>    <span class="token number">10</span> <span class="token operator">|</span>  <span class="token number">9.366</span> ns <span class="token operator">|</span> <span class="token number">0.0511</span> ns <span class="token operator">|</span> <span class="token number">0.0478</span> ns <span class="token operator">|</span>  <span class="token number">0.37</span> <span class="token operator">|</span>
<span class="token operator">|</span>                     <span class="token operator">|</span>       <span class="token operator">|</span>           <span class="token operator">|</span>           <span class="token operator">|</span>           <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> Standard dictionary <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span> <span class="token number">25.105</span> ns <span class="token operator">|</span> <span class="token number">0.0665</span> ns <span class="token operator">|</span> <span class="token number">0.0622</span> ns <span class="token operator">|</span>  <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> Compiled dictionary <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span> <span class="token number">14.819</span> ns <span class="token operator">|</span> <span class="token number">0.1138</span> ns <span class="token operator">|</span> <span class="token number">0.1065</span> ns <span class="token operator">|</span>  <span class="token number">0.59</span> <span class="token operator">|</span>
<span class="token operator">|</span>                     <span class="token operator">|</span>       <span class="token operator">|</span>           <span class="token operator">|</span>           <span class="token operator">|</span>           <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> Standard dictionary <span class="token operator">|</span> <span class="token number">10000</span> <span class="token operator">|</span> <span class="token number">29.047</span> ns <span class="token operator">|</span> <span class="token number">0.1201</span> ns <span class="token operator">|</span> <span class="token number">0.1123</span> ns <span class="token operator">|</span>  <span class="token number">1.00</span> <span class="token operator">|</span>
<span class="token operator">|</span> Compiled dictionary <span class="token operator">|</span> <span class="token number">10000</span> <span class="token operator">|</span> <span class="token number">17.903</span> ns <span class="token operator">|</span> <span class="token number">0.0635</span> ns <span class="token operator">|</span> <span class="token number">0.0530</span> ns <span class="token operator">|</span>  <span class="token number">0.62</span> <span class="token operator">|</span>
</code></pre>
<p>We can see that the compiled dictionary performs lookups about 1.6-2.8 times faster. While the performance of the hash table is consistent regardless of how many elements are in the dictionary, the expression tree implementation becomes slower as the dictionary gets bigger. This can potentially be remedied by adding another switch layer for indexing.</p>
<h2>Parsing DSLs into expressions</h2>
<p>One other interesting usage scenario, that I'm personally really fond of, is parsing. The main challenge of writing an interpreter for a custom domain-specific language is turning the syntax tree into runtime instructions. By parsing the grammar constructs directly into expression trees, this becomes a solved problem.</p>
<p>As an example, let's write a simple program that takes a string representation of a mathematical expression and evaluates its result. To implement the parser, we will use the <a href="https://github.com/sprache/Sprache">Sprache</a> library.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCalculator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>Expression<span class="token punctuation">></span></span> Constant <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span>DecimalInvariant
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>n <span class="token operator">=></span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>n <span class="token operator">=></span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">double</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>ExpressionType<span class="token punctuation">></span></span> Operator <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'+'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Add<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Subtract<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Multiply<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Divide<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>Expression<span class="token punctuation">></span></span> Operation <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">ChainOperator</span><span class="token punctuation">(</span>Operator<span class="token punctuation">,</span> Constant<span class="token punctuation">,</span> Expression<span class="token punctuation">.</span>MakeBinary<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>Expression<span class="token punctuation">></span></span> FullExpression <span class="token operator">=</span>
        Operation<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>Constant<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> expression<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> operation <span class="token operator">=</span> FullExpression<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> func <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">double</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, the parsers defined above (<code>Constant</code>, <code>Operator</code>, <code>Operation</code>, <code>FullExpression</code>) all yield objects of type <code>Expression</code> and <code>ExpressionType</code>, which are both defined in <code>System.Linq.Expressions</code>. The expression tree is essentially our syntax tree, so once we parse the input we have all the required information to compile the runtime instructions represented by it.</p>
<p>You can try it out by calling <code>Run</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> SimpleCalculator<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"2 + 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4</span>
<span class="token class-name"><span class="token keyword">var</span></span> b <span class="token operator">=</span> SimpleCalculator<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"3.15 * 5 + 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 17.75</span>
<span class="token class-name"><span class="token keyword">var</span></span> c <span class="token operator">=</span> SimpleCalculator<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"1 / 2 * 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1.5</span>
</code></pre>
<p>Note that this simple calculator is just an example of what you can do, it doesn't respect operator precedence and doesn't understand nested expressions. Implementing a parser for that would be out of scope of covering expression trees, but if you want to see how a proper calculator like that would look, check out <a href="https://github.com/yallie/Sprache.Calc/blob/master/Sprache.Calc/SimpleCalculator.cs">Sprache.Calc</a>. Also, if you want to learn more about parsing, check out my blog posts about <a href="http://localhost:3000/blog/monadic-parser-combinators">parsing in C#</a> and <a href="http://localhost:3000/blog/parsing-with-fparsec">parsing in F#</a>.</p>
<h2>Making things even faster</h2>
<p>While compiled expressions execute really fast, compiling them can be relatively expensive.</p>
<p>In most cases that's completely fine, but you may want to take the performance even further by using <a href="https://github.com/dadhi/FastExpressionCompiler">FastExpressionCompiler</a>. This library provides a drop-in replacement for the <code>Compile</code> method called <code>CompileFast</code>, which executes much faster.</p>
<p>For example, here's a simple benchmark that shows the difference:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Benchmarks</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">Expression</span> Body <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span>
        Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Compile"</span><span class="token punctuation">,</span> Baseline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Normal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Benchmark</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Description <span class="token operator">=</span> <span class="token string">"Compile (fast)"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Fast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CompileFast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> BenchmarkRunner<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Run</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Benchmarks<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-r"><code class="language-r"><span class="token operator">|</span>         Method <span class="token operator">|</span>      Mean <span class="token operator">|</span>     Error <span class="token operator">|</span>    StdDev <span class="token operator">|</span> Ratio <span class="token operator">|</span> Allocated <span class="token operator">|</span>
<span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">:</span><span class="token operator">|</span>
<span class="token operator">|</span>        Compile <span class="token operator">|</span> <span class="token number">38.435</span> us <span class="token operator">|</span> <span class="token number">0.2131</span> us <span class="token operator">|</span> <span class="token number">0.1889</span> us <span class="token operator">|</span>  <span class="token number">1.00</span> <span class="token operator">|</span>   <span class="token number">3.53</span> KB <span class="token operator">|</span>
<span class="token operator">|</span> Compile <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token operator">|</span>  <span class="token number">4.497</span> us <span class="token operator">|</span> <span class="token number">0.0662</span> us <span class="token operator">|</span> <span class="token number">0.0619</span> us <span class="token operator">|</span>  <span class="token number">0.12</span> <span class="token operator">|</span>   <span class="token number">1.21</span> KB <span class="token operator">|</span>
</code></pre>
<p>As you can see, the performance improvement is pretty noticeable. The reason it runs so fast is because the <code>CompileFast</code> version skips all the verifications that normal <code>Compile</code> does to ensure that the expression tree is valid.</p>
<p>This library (as part of <code>FastExpressionCompiler.LightExpression</code>) also offers a drop-in replacement for <code>Expression</code> and all of its static factory methods. These alternative implementations construct expressions which may in some cases perform much faster than their default counterparts. However, I still recommend to benchmark it on your particular use cases to ensure that it actually provides an improvement.</p>
<h2>Inferring expression trees from code</h2>
<p>So far we've explored how to construct expression trees manually. The cool thing about expression trees in .NET though is that they can also be created automatically as well.</p>
<p>The way this works is that you can infer an expression tree by simply specifying a lambda expression like you would if you were to define a delegate. C# compiler will take care of the rest.</p>
<p>Consider this snippet of code:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> div <span class="token operator">=</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>

<span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> divExpr <span class="token operator">=</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
</code></pre>
<p>Both of these assignments look exactly the same, but the actual assigned value is different. While in the first case we will get a delegate which can be executed directly, the second will provide us with an expression tree that represents the structure of the supplied lambda expression. This is essentially the same <code>LambdaExpression</code> that we were creating when compiling code ourselves, only now it represents code written statically as opposed to dynamically.</p>
<p>For example, we can inspect the expression tree produced by the compiler:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> divExpr <span class="token operator">=</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> param <span class="token keyword">in</span> divExpr<span class="token punctuation">.</span>Parameters<span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Param: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">param<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">param<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Param: a (Int32)</span>
<span class="token comment">// Param: b (Int32)</span>
</code></pre>
<p>And, just like with expression trees created manually, we can compile it into a delegate:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> divExpr <span class="token operator">=</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> div <span class="token operator">=</span> divExpr<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> c <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre>
<p>Essentially, in this context, you can think of <code>divExpr</code> as a recipe that contains the ingredients needed to create <code>div</code>, the final product.</p>
<p>Note, however, that while direct assignment shown previously works, you can't do something like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span> div <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>

<span class="token comment">// Compilation error</span>
<span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> divExpr <span class="token operator">=</span> div<span class="token punctuation">;</span>
</code></pre>
<p>The expression must be defined in-place in order to work. Because the disassembly happens during compile time, not runtime, the compiler needs to know exactly what it's dealing with.</p>
<p>Although this approach is incredibly useful, it has certain limitations. Specifically, the supplied lambda expression must not contain any of the following:</p>
<ul>
<li>Null-coalescing operator (<code>obj?.Prop</code>)</li>
<li>Dynamic variables (<code>dynamic</code>)</li>
<li>Asynchronous code (<code>async</code>/<code>await</code>)</li>
<li>Default or named parameters (<code>func(a, b: 5)</code>, <code>func(a)</code>)</li>
<li>Parameters passed by reference (<code>int.TryParse("123", out var i)</code>)</li>
<li>Multi-dimensional array initializers (<code>new int[2, 2] { { 1, 2 }, { 3, 4 } }</code>)</li>
<li>Assignment operations (<code>a = 5</code>)</li>
<li>Increment and decrement (<code>a++</code>, <code>a--</code>, <code>--a</code>, <code>++a</code>)</li>
<li>Base type access (<code>base.Prop</code>)</li>
<li>Dictionary initialization (<code>new Dictionary&#x3C;string, int> { ["foo"] = 100 }</code>)</li>
<li>Unsafe code (via <code>unsafe</code>)</li>
<li>Throw expressions (<code>throw new Exception()</code>)</li>
<li>Tuple literals (<code>(5, x)</code>)</li>
</ul>
<p>On top of all that, you cannot use this method to construct expression trees from multi-line lambdas. That means this won't compile:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Compilation error</span>
<span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> divExpr <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>And, more importantly, this won't work either:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Compilation error</span>
<span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Action<span class="token punctuation">></span></span> writeToConsole <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Most of these limitations come from the fact that this feature was designed with <code>IQueryable</code> in mind and many of the language constructs listed above don't really make sense when it comes to querying data. That said, there are a lot of other scenarios where they can be useful.</p>
<p>There is a suggestion to extend compile-time expression trees and it's tracked <a href="https://github.com/dotnet/csharplang/issues/158">by this issue on GitHub</a>. We'll see where it goes.</p>
<p>For now, let's move these limitations aside and explore some of the ways we can use expression trees constructed with this approach.</p>
<h2>Identifying type members</h2>
<p>The most common use case for expression trees obtained in such manner is to identify type members. This approach allows us to extract information on fields, properties, or methods from a supplied lambda expression.</p>
<p>For example, assume we have the following class:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dto</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>If we wanted to get the <code>PropertyInfo</code> that represents its <code>Id</code> property, we could use reflection to do it like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> idProperty <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Dto</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Dto<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Type: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">idProperty<span class="token punctuation">.</span>DeclaringType<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Property: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">idProperty<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">idProperty<span class="token punctuation">.</span>PropertyType<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Type: Dto</span>
<span class="token comment">// Property: Id (Guid)</span>
</code></pre>
<p>That works completely fine. For example, if we were designing an API for a validation library, it could look like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Validator<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Add validation predicate to the list</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">AddValidation</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TProp<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> propertyName<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&#x3C;</span>TProp<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> propertyInfo <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyInfo <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"Please provide a valid property name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Evalute all predicates</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which we would be able to use like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Validator<span class="token punctuation">&#x3C;</span>Dto<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
validator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddValidation</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Guid<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Dto<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span> id <span class="token operator">=></span> id <span class="token operator">!=</span> Guid<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
validator<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddValidation</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Dto<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">,</span> name <span class="token operator">=></span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> isValid <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dto</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre>
<p>However, the problem here is that all of our validators are effectively untyped. We have to specify the generic argument in <code>AddValidation</code> so that our predicates are aware of what they're working with, but this setup is very volatile.</p>
<p>If we were to, for example, change the type of <code>Dto.Id</code> from <code>Guid</code> to <code>int</code>, everything will still compile but the code will no longer work correctly because our predicate expects the type to be <code>Guid</code>. Also, we'd be lucky if our users were to provide the property names using <code>nameof</code>, in reality there will probably be magic strings instead. All in all, this code is not refactor-safe.</p>
<p>With expressions we can completely remedy this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Validator<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">AddValidation</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>TProp<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>
        <span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">,</span> TProp<span class="token punctuation">></span><span class="token punctuation">></span></span> propertyExpression<span class="token punctuation">,</span>
        <span class="token class-name">Func<span class="token punctuation">&#x3C;</span>TProp<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">></span></span> predicate<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> propertyInfo <span class="token operator">=</span> <span class="token punctuation">(</span>propertyExpression<span class="token punctuation">.</span>Body <span class="token keyword">as</span> <span class="token class-name">MemberExpression</span><span class="token punctuation">)</span><span class="token punctuation">?.</span>Member <span class="token keyword">as</span> <span class="token class-name">PropertyInfo</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>propertyInfo <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token string">"Please provide a valid property expression."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>With the new interface we can write our code like this instead:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Validator<span class="token punctuation">&#x3C;</span>Dto<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
validator<span class="token punctuation">.</span><span class="token function">AddValidation</span><span class="token punctuation">(</span>dto <span class="token operator">=></span> dto<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> id <span class="token operator">=></span> id <span class="token operator">!=</span> Guid<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
validator<span class="token punctuation">.</span><span class="token function">AddValidation</span><span class="token punctuation">(</span>dto <span class="token operator">=></span> dto<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> name <span class="token operator">=></span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> isValid <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dto</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre>
<p>This works exactly the same, except that now we don't need to specify generic arguments manually, there are no magic strings, and the code is completely safe to refactor. If we change the type of <code>Dto.Id</code> from <code>Guid</code> to <code>int</code>, our code will rightfully no longer compile.</p>
<p>Many existing libraries are using expression trees for this purpose, including:</p>
<ul>
<li><a href="https://github.com/JeremySkinner/FluentValidation">FluentValidation</a> uses it to setup validation rules</li>
<li><a href="https://github.com/dotnet/efcore">EntityFramework</a> uses it for entity configuration</li>
<li><a href="https://github.com/moq/moq4">Moq</a> uses it to build mocks</li>
</ul>
<h2>Providing context to assertions</h2>
<p>Often when I'm writing test suites for my projects, I find myself spending time decorating assertions with informational error messages. For example:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IntTryParse_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> Is<span class="token punctuation">.</span>True<span class="token punctuation">,</span> <span class="token string">"Parsing was unsuccessful"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">124</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Parsed value is incorrect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>By doing that, the errors produced by failed assertions become more descriptive. This makes it easier to understand what went wrong without having to look inside the test implementation:</p>
<pre class="language-ini"><code class="language-ini">X IntTryParse_Test [60ms]
  Error Message:
    Parsed value is incorrect
  Expected: 124
  But was:  123
</code></pre>
<p>In a perfect world, however, it would be nice if the error message simply contained the code of the assertion. That way I would know which exact check failed and why.</p>
<p>Luckily, this is something we can do with the help of expressions. To facilitate that, we can create a helper method that will wrap the assertion in an expression:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AssertEx</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Express</span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Action<span class="token punctuation">></span></span> expression<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> act <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AssertionException</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssertionException</span><span class="token punctuation">(</span>
                expression<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToReadableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                Environment<span class="token punctuation">.</span>NewLine <span class="token operator">+</span>
                ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This method is really simple. All it does is try to run the delegate represented by the expression and, if the underlying assertion fails, it prints the expression along with the error.</p>
<p>Let's update our test code to make use of this method:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Test</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IntTryParse_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Arrange</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>

    <span class="token comment">// Act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Assert</span>
    AssertEx<span class="token punctuation">.</span><span class="token function">Express</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> Is<span class="token punctuation">.</span>True<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    AssertEx<span class="token punctuation">.</span><span class="token function">Express</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Assert<span class="token punctuation">.</span><span class="token function">That</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> Is<span class="token punctuation">.</span><span class="token function">EqualTo</span><span class="token punctuation">(</span><span class="token number">124</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, when this test fails we will instead get the following error message:</p>
<pre class="language-ini"><code class="language-ini">X IntTryParse_Test [99ms]
  Error Message:
    Assert.That(value, Is.EqualTo(124))
  Expected: 124
  But was:  123
</code></pre>
<p>As you can see, the error message now specifies the exact assertion that failed. This gives us more context which helps determine what actually went wrong.</p>
<hr>
<p>With the advent of .NET Core 3.0, the .NET team has also added a new attribute, <code>CallerArgumentExpression</code>. This attribute was meant to be supported by a <a href="https://github.com/dotnet/csharplang/issues/287">language feature</a> that was planned for C# 8 but unfortunately it didn't make it. Currently, the attribute doesn't do anything, but we should see this change in one of the future versions of the language.</p>
<p>The goal of this attribute is to provide the ability to "sniff" the expression passed to the specified parameter. For example, we should be able to define a method like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Assert</span><span class="token punctuation">(</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> condition<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerArgumentExpression</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"condition"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> expression <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssertionFailedException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Condition `</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">expression</span><span class="token punctuation">}</span></span><span class="token string">` is not true"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which will then produce a detailed exception message if the assertion fails:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token function">Assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Exception:</span>
<span class="token comment">// Condition `2 + 2 == 5` is not true</span>
</code></pre>
<p>Note that with this approach we will only be able to obtain the expression as a string, which will be the same expression specified in the source code. This can be used to provide a somewhat similar experience as shown with <code>AssertEx.Express</code> above.</p>
<h2>Traversing and rewriting expression trees</h2>
<p>In order to analyze expression trees, we need to be able to traverse them in a recursive descent manner, starting from the body of the lambda expression and going down to every expression it's made out of. This could be done manually with a large switch expression that calls into itself.</p>
<p>Fortunately, we don't have to reinvent the wheel because the framework already provides a special class for this purpose called <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions.expressionvisitor"><code>ExpressionVisitor</code></a>. It's an abstract class that has a visitor method for every expression type so you can simply inherit from it and override the methods you're interested in.</p>
<p>For example, we can implement a visitor that prints out all the binary and method call expressions it encounters:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ExpressionVisitor</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Expression</span> <span class="token function">VisitMethodCall</span><span class="token punctuation">(</span><span class="token class-name">MethodCallExpression</span> node<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Visited method call: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">node</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitMethodCall</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Expression</span> <span class="token function">VisitBinary</span><span class="token punctuation">(</span><span class="token class-name">BinaryExpression</span> node<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Visited binary expression: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">node</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitBinary</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> expr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Visited binary expression: (Sin(Convert(NewGuid().GetHashCode(), Double)) / 10)</span>
<span class="token comment">// Visited method call: Sin(Convert(NewGuid().GetHashCode(), Double))</span>
<span class="token comment">// Visited method call: NewGuid().GetHashCode()</span>
<span class="token comment">// Visited method call: NewGuid()</span>
</code></pre>
<p>As you can see by the order of the logs, the visitor first encounters the binary expression that makes up the lambda body, then digs inside, revealing a call to <code>Math.Sin</code> whose parameter is also expressed as a call to <code>GetHashCode</code> on the result of <code>NewGuid</code>.</p>
<p>You may have noticed that the visitor methods on <code>ExpressionVisitor</code> all return <code>Expression</code>s. That means that besides merely inspecting them, the visitor can choose to rewrite or completely replace expressions with different ones.</p>
<p>Let's change our visitor so that it catches all calls to method <code>Math.Sin</code> and rewrites them into <code>Math.Cos</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ExpressionVisitor</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Expression</span> <span class="token function">VisitMethodCall</span><span class="token punctuation">(</span><span class="token class-name">MethodCallExpression</span> node<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newMethodCall <span class="token operator">=</span> node<span class="token punctuation">.</span>Method <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Math</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Sin<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">?</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Math</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>Cos<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">:</span> node<span class="token punctuation">.</span>Method<span class="token punctuation">;</span>

        <span class="token keyword">return</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>newMethodCall<span class="token punctuation">,</span> node<span class="token punctuation">.</span>Arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Func<span class="token punctuation">&#x3C;</span><span class="token keyword">double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> expr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Old expression: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">expr<span class="token punctuation">.</span><span class="token function">ToReadableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Old result: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> newExpr <span class="token operator">=</span> <span class="token punctuation">(</span>Expression<span class="token operator">&#x3C;</span>Func<span class="token operator">&#x3C;</span><span class="token keyword">double</span><span class="token operator">>></span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Visitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> newResult <span class="token operator">=</span> newExpr<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"New expression: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newExpr<span class="token punctuation">.</span><span class="token function">ToReadableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"New result value: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">newResult</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Old expression: () => Math.Sin((double)Guid.NewGuid().GetHashCode()) / 10d</span>
<span class="token comment">// Old result: 0.09489518488876232</span>
<span class="token comment">// New expression: () => Math.Cos((double)Guid.NewGuid().GetHashCode()) / 10d</span>
<span class="token comment">// New result value: 0.07306426748550407</span>
</code></pre>
<p>As you can see, the new expression is structurally identical but with <code>Math.Sin</code> replaced by <code>Math.Cos</code>. Both expressions are completely independent and can be compiled to produce their respective delegates.</p>
<p>Using this approach we can arbitrarily rewrite supplied expressions, generating derivatives that behave differently. It can be very helpful when creating dynamic proxies. For example, a popular mocking library <a href="https://github.com/moq/moq4">Moq</a> uses this technique to build stubs at runtime.</p>
<h2>Transpiling code into a different language</h2>
<p>Now that we know that we can use <code>ExpressionVisitor</code> to analyze and rewrite expression trees, it's not too hard to guess that we can also use it to transpile expressions into another language. The goal of such a tool would be to convert code from one language to another, while retaining its functional behavior.</p>
<p>Let's imagine we're building a library that allows users to convert C# expressions to their equivalent F# representations. For example, we want to be able to do this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>Action<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> expr <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a + b = {0}"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> fsharpCode <span class="token operator">=</span> FSharpTranspiler<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>To facilitate that, we can create a class called <code>FSharpTranspiler</code> which will internally use a special <code>ExpressionVisitor</code> to traverse the expression tree and write valid F# code. It could look something like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FSharpTranspiler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ExpressionVisitor</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">StringBuilder</span> _buffer<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">Visitor</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> buffer<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">Convert</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> expression<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Visitor</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>With this setup, we can inject a <code>StringBuilder</code> into our visitor and use that as the output buffer. While the visitor takes care of navigating the tree, we need to make sure we're emitting valid code on each expression type.</p>
<p>Writing a full C# to F# transpiler would be too complicated and way outside of the scope of this article. For the sake of simplicity let's limit our job to support expressions similar to the one we've seen in the initial example. To handle these, we will need to translate <code>Console.WriteLine</code> into correct usage of <code>printfn</code>.</p>
<p>Here's how we can do it:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FSharpTranspiler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ExpressionVisitor</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">StringBuilder</span> _buffer<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">Visitor</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> buffer<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Expression</span> <span class="token generic-method"><span class="token function">VisitLambda</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> node<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _buffer<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"fun ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _buffer<span class="token punctuation">.</span><span class="token function">AppendJoin</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>p <span class="token operator">=></span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _buffer<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">") ->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitLambda</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Expression</span> <span class="token function">VisitMethodCall</span><span class="token punctuation">(</span><span class="token class-name">MethodCallExpression</span> node<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>DeclaringType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>
                node<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>WriteLine<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _buffer<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"printfn "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>Arguments<span class="token punctuation">.</span>Count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token comment">// For simplicity, assume the first argument is a string (don't do this)</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> format <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ConstantExpression<span class="token punctuation">)</span> node<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> formatValues <span class="token operator">=</span> node<span class="token punctuation">.</span>Arguments<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    _buffer<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _buffer<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token string">@"\{\d+\}"</span><span class="token punctuation">,</span> <span class="token string">"%O"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    _buffer<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"\" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    _buffer<span class="token punctuation">.</span><span class="token function">AppendJoin</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> formatValues<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>v <span class="token operator">=></span> <span class="token interpolation-string"><span class="token string">$"(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v<span class="token punctuation">.</span><span class="token function">ToReadableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">)"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">VisitMethodCall</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token generic-method"><span class="token function">Convert</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">Expression<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> expression<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Visitor</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>So now we can try to convert our expression from earlier and see what it returns:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> fsharpCode <span class="token operator">=</span> FSharpTranspiler<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Convert</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>Action<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a + b = {0}"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// fun (a, b) -> printfn "a + b = %O" (a + b)</span>
</code></pre>
<p>This produces a string that contains valid F# code which should compile into an equivalent anonymous function. Let's run it in F# interactive to make sure it works correctly:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token operator">></span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">fun</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> printfn <span class="token string">"a + b = %O"</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token keyword">val</span> foo <span class="token punctuation">:</span> a<span class="token punctuation">:</span><span class="token class-name">int</span> <span class="token operator">*</span> b<span class="token punctuation">:</span><span class="token class-name">int <span class="token operator">-></span> unit</span>

<span class="token operator">></span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
a <span class="token operator">+</span> b <span class="token operator">=</span> <span class="token number">8</span>
<span class="token keyword">val</span> it <span class="token punctuation">:</span> <span class="token class-name">unit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>Translating code from one language to another is definitely not a simple task, but it can be incredibly useful in certain scenarios. One example could be sharing validation rules between backend and frontend by converting C# predicate expressions into JavaScript code.</p>
<h2>Summary</h2>
<p>Expression trees provide us with a formal structure of code that lets us analyze existing expressions or compile entirely new ones directly at runtime. This feature makes it possible to do a bunch of cool things, including writing transpilers, interpreters, code generators, optimize reflection calls, provide contextual assertions, and more. I think it's a really powerful tool that deserves a lot more attention.</p>
<p>Some other interesting articles on the topic:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/expression-trees">Introduction to expression trees (Microsoft Docs)</a></li>
<li><a href="https://particular.net/blog/10x-faster-execution-with-compiled-expression-trees">10X faster execution with compiled expression trees (Particular Software)</a></li>
<li><a href="https://lostechies.com/jimmybogard/2016/06/24/automapper-5-0-speed-increases">AutoMapper 5.0 speed increases (Jimmy Bogard)</a></li>
<li><a href="https://jeremydmiller.com/2017/08/01/how-we-did-and-did-not-improve-performance-and-efficiency-in-marten-2-0">How we did (and did not) improve performance and efficiency in Marten 2.0 (Jeremy D. Miller)</a></li>
<li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees">Optimizing Just in Time with Expression Trees (Craig Gidney)</a></li>
</ul>
<p>I also recommend reading about <a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/code-quotations">code quotations in F#</a> which is a similar feature to expression trees but with more powerful language support.</p>]]></description><link>http://localhost:3000/blog/expression-trees</link><guid isPermaLink="false">http://localhost:3000/blog/expression-trees</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Mon, 17 Feb 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Refactoring C# Code Using Partial Classes]]></title><description><![CDATA[<p>As our code grows, we regularly find ourselves seeking new ways to keep it well structured and organized. Systematic refactoring is a necessity but often doesn't come very easily.</p>
<p>One of the challenges we often face is deciding how to group different parts of a bigger class together. Even with a good degree of separation, sometimes we end up with classes that might be a bit too much to reason about.</p>
<p>From the earliest versions of the language, C# provided a construct called <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/preprocessor-region">regions</a>. Although it can be helpful when trying to organize code, most seem to agree that using regions is <a href="https://softwareengineering.stackexchange.com/questions/53086/are-regions-an-antipattern-or-code-smell">generally an anti-pattern</a>. Even if their usage can be justified, their benefits often come at a rather steep cost in terms of readability.</p>
<p>I do believe that being able to group code to form logical blocks is useful, however I agree that regions cause more problems than they solve. For that reason, I've been actively using <em>partial classes</em> instead, which in many ways can be used for a similar purpose without suffering from the same drawbacks.</p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/partial-classes-and-methods">Partial classes</a> is a C# feature that lets you split the definition of a type into multiple parts, each potentially in its own file. During the build, compiler collects all of the parts and combines them together to produce a single class, as if it was defined in one place. It's enabled by adding the <code>partial</code> keyword in the definition.</p>
<p>In this article I will show you how I typically utilize partial classes when refactoring my own code.</p>
<h2>Extracting static members</h2>
<p>One thing that I like to do nearly all the time is separate static properties and methods from the rest of the class. That might seem like an arbitrary criteria, but I find it makes sense because we do reason about static and non-static members in different ways.</p>
<p>Let's have a look at an example. Imagine we're working on an abstraction called <code>PartitionedTextWriter</code> that implements the <em>rolling file</em> concept -- it acts as a streaming text writer that automatically switches to a new file after reaching a certain character threshold in the previous one.</p>
<p>The class is initialized with a base path and it needs to use that to generate file names for each partition. Because that's pure business logic without side effects, it makes perfect sense to put it into a static helper method.</p>
<p>Usually, mixing static and non-static members can be quite confusing. Let's see how that looks when we use partial classes instead:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">PartitionedTextWriter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">TextWriter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _baseFilePath<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">long</span></span> _partitionLimit<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _partitionIndex<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TextWriter</span> _innerWriter<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">long</span></span> _partitionCharCount<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Encoding</span> Encoding <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">PartitionedTextWriter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> baseFilePath<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> partitionLimit<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _baseFilePath <span class="token operator">=</span> baseFilePath<span class="token punctuation">;</span>
        _partitionLimit <span class="token operator">=</span> partitionLimit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitializeInnerWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Get current file path by injecting partition identifier in the file name</span>
        <span class="token comment">// E.g. MyFile.txt, MyFile [part 2].txt, etc</span>
        <span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> <span class="token function">GetPartitionFilePath</span><span class="token punctuation">(</span>_baseFilePath<span class="token punctuation">,</span> _partitionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

        _innerWriter <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">char</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Make sure the underlying writer is initialized</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_innerWriter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token function">InitializeInnerWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Write content</span>
        _innerWriter<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _partitionCharCount<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token comment">// When the char count exceeds the limit,</span>
        <span class="token comment">// start writing to a new file</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_partitionCharCount <span class="token operator">>=</span> _partitionLimit<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _partitionIndex<span class="token operator">++</span><span class="token punctuation">;</span>
            _partitionCharCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            _innerWriter<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _innerWriter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
            _innerWriter<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">PartitionedTextWriter</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Pure helper function</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetPartitionFilePath</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> baseFilePath<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> partitionIndex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>partitionIndex <span class="token operator">&#x3C;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> baseFilePath<span class="token punctuation">;</span>

        <span class="token comment">// Inject "[part x]" in the file name</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileNameWithoutExt <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetFileNameWithoutExtension</span><span class="token punctuation">(</span>baseFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileExt <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span>baseFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fileNameWithoutExt</span><span class="token punctuation">}</span></span><span class="token string"> [part </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">partitionIndex <span class="token operator">+</span> <span class="token number">1</span></span><span class="token punctuation">}</span></span><span class="token string">]</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fileExt</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> dirPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>baseFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> fileName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As a developer reading this code for the first time, you will most likely appreciate this separation. When we're dealing with the notions of creating new files, we don't really care as much about how <code>GetPartitionFilePath</code> is implemented. Similarly, if we wanted to know how <code>GetPartitionFilePath</code> works, the rest of the code would likely act as unrelated noise.</p>
<p>One could argue that we could've instead moved our helper method to a different static class. That could work in some cases, especially if that method is going to be reused in other places as well. However, that would also make the method less discoverable and I generally prefer to keep dependencies as close to the source as possible, in order to reduce cognitive overhead.</p>
<p>Note that in this example both partial definitions of the class are placed in the same file. Since our primary goal is to group code rather than shred it to pieces, keeping things close makes more sense. I would consider moving the partitions to separate files only if they get too big to keep in one place.</p>
<hr>
<p>This idea works especially well when combining with the <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">"Resource acquisition is initialization"</a> pattern. Using partial classes we can group methods responsible for initialization and separate them from the rest of the class.</p>
<p>In the following example we have a class called <code>NativeDeviceContext</code> which is a wrapper for a device context resource in the Windows operating system. The class can be constructed by providing a handle to the native resource, but the consumers will not be doing this manually. Instead they will be calling one of the available static methods such as <code>FromDeviceName(...)</code> that will take care of the initialization for them.</p>
<p>Again, let's see how it looks when we split out the static methods:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Resource management concerns</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">NativeDeviceContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IntPtr</span> Handle <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">NativeDeviceContext</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> handle<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Handle <span class="token operator">=</span> handle<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">NativeDeviceContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetGammaRamp</span><span class="token punctuation">(</span><span class="token class-name">GammaRamp</span> ramp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Call a WinAPI method via p/invoke</span>
        NativeMethods<span class="token punctuation">.</span><span class="token function">SetDeviceGammaRamp</span><span class="token punctuation">(</span>Handle<span class="token punctuation">,</span> <span class="token keyword">ref</span> ramp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NativeMethods<span class="token punctuation">.</span><span class="token function">DeleteDC</span><span class="token punctuation">(</span>Handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GC<span class="token punctuation">.</span><span class="token function">SuppressFinalize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Resource acquisition concerns</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">NativeDeviceContext</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NativeDeviceContext<span class="token punctuation">?</span></span> <span class="token function">FromDeviceName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> deviceName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> handle <span class="token operator">=</span> NativeMethods<span class="token punctuation">.</span><span class="token function">CreateDC</span><span class="token punctuation">(</span>deviceName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> handle <span class="token operator">!=</span> IntPtr<span class="token punctuation">.</span>Zero
            <span class="token punctuation">?</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NativeDeviceContext</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
            <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">NativeDeviceContext<span class="token punctuation">?</span></span> <span class="token function">FromPrimaryMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>NativeDeviceContext<span class="token punctuation">></span></span> <span class="token function">FromAllMonitors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Similarly to the previous example, this makes the code a lot more readable by visually separating two unrelated (albeit coupled) concerns -- resource initialization and resource management.</p>
<h2>Separating interface implementations</h2>
<p>Another interesting thing we can do with partial classes is separate interface implementations. More often than not, members responsible for implementing interfaces don't really contribute to the core behavior of the class, so it makes sense to push them out.</p>
<p>For example, let's take a look at <code>HtmlElement</code>, a class that represents an element in the HTML DOM. It implements <code>IEnumerable&#x3C;T></code> for iterating over its children and <code>ICloneable</code> to facilitate deep copying.</p>
<p>Using partial classes we can arrange our code like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Core concerns</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">HtmlElement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">HtmlNode</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> TagName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>HtmlAttribute<span class="token punctuation">></span></span> Attributes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>HtmlNode<span class="token punctuation">></span></span> Children <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">HtmlElement</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> tagName<span class="token punctuation">,</span>
        <span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>HtmlAttribute<span class="token punctuation">></span></span> attributes<span class="token punctuation">,</span>
        <span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>HtmlNode<span class="token punctuation">></span></span> children<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">HtmlElement</span><span class="token punctuation">(</span><span class="token class-name">HtmlElement</span> other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> <span class="token function">GetAttributeValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> attributeName<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&#x3C;</span>HtmlNode<span class="token punctuation">></span></span> <span class="token function">GetDescendants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Implementation of IEnumerable&#x3C;T></span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">HtmlElement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEnumerable<span class="token punctuation">&#x3C;</span>HtmlNode<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerator<span class="token punctuation">&#x3C;</span>HtmlNode<span class="token punctuation">></span></span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Children<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">IEnumerator</span> IEnumerable<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Implementation of ICloneable</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">HtmlElement</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICloneable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HtmlElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Putting interface implementations in partial classes can help us reduce the "routing noise" caused by methods that forward calls upstream. Additionally, since C# allows us to specify the class signature on each partition separately, we can conveniently group members that belong to the same interface.</p>
<hr>
<p>This approach is also very useful when combined with conditional compilation. Occasionally, we may want to introduce API that depends on features available in a specific version of the framework. To do that, we have to use the <code>#if</code> directive which acts similarly to regions, making our code less readable.</p>
<p>Partial classes can help us make things tidier. Let's take a look at an example where we override <code>DisposeAsync</code> but only if we're building the assembly against .NET Standard 2.1:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">SegmentedHttpStream</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Stream</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> _httpClient<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">long</span></span> _segmentSize<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Stream<span class="token punctuation">?</span></span> _currentStream<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SegmentedHttpStream</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient<span class="token punctuation">,</span>
        <span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> length<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">long</span></span> segmentSize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Skipped overrides for Stream methods */</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> disposing<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>disposing<span class="token punctuation">)</span>
            _currentStream<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span>disposing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token preprocessor property">#<span class="token directive keyword">if</span> NETSTANDARD2_1</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">SegmentedHttpStream</span>
<span class="token punctuation">{</span>
    <span class="token comment">// This method is not available in earlier versions of the standard</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_currentStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">await</span> _currentStream<span class="token punctuation">.</span><span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">DisposeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>
</code></pre>
<p>The clear benefit of using partial classes in such cases is that we are able to completely mitigate the noise caused by the conditional blocks. It looks much better when they are pushed outwards instead of being in between code.</p>
<h2>Organizing private classes</h2>
<p>It's not all that uncommon to have private classes. These are convenient when we want to avoid namespace pollution while defining a type that's only used within one place. Typical case for this is when we need to implement a custom interface to override certain behavior in a third party library or a framework.</p>
<p>As an example, imagine we're exporting a sales report as an HTML document and we're using the <a href="https://github.com/lunet-io/scriban">Scriban</a> engine to do it. In this particular scenario, we need to configure it so that templates can be resolved from the resources embedded in the assembly rather than from the file system. In order to do that, the framework expects us to provide a custom implementation of <code>ITemplateLoader</code>.</p>
<p>Seeing as our custom loader is going to be used only within this class, it makes perfect sense to define it as private class. However, with C# being as verbose as it is, private classes may introduce unwanted noise into our code.</p>
<p>Using partial classes, though, we can clean it up like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">HtmlReportRenderer</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IReportRenderer</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">RenderReportAsync</span><span class="token punctuation">(</span><span class="token class-name">SalesReport</span> report<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> templateCode<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> template <span class="token operator">=</span> Template<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>templateCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> templateContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TemplateContext</span>
        <span class="token punctuation">{</span>
            TemplateLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomTemplateLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// reference the private class</span>
            StrictVariables <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ScriptObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span><span class="token string">"report"</span><span class="token punctuation">,</span> report<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        templateContext<span class="token punctuation">.</span><span class="token function">PushGlobal</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">await</span> template<span class="token punctuation">.</span><span class="token function">RenderAsync</span><span class="token punctuation">(</span>templateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">HtmlReportRenderer</span>
<span class="token punctuation">{</span>
    <span class="token comment">// This type is only used within HtmlReportRenderer</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CustomTemplateLoader</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITemplateLoader</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> ResourceRootNamespace <span class="token operator">=</span>
            <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HtmlReportRenderer</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Namespace</span><span class="token punctuation">}</span></span><span class="token string">.Templates"</span></span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">StreamReader</span> <span class="token function">GetTemplateReader</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> templatePath<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> resourceName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ResourceRootNamespace</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">templatePath</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetManifestResourceStream</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stream <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MissingManifestResourceException</span><span class="token punctuation">(</span><span class="token string">"Template not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetPath</span><span class="token punctuation">(</span>
            <span class="token class-name">TemplateContext</span> context<span class="token punctuation">,</span>
            <span class="token class-name">SourceSpan</span> callerSpan<span class="token punctuation">,</span>
            <span class="token class-name"><span class="token keyword">string</span></span> templateName<span class="token punctuation">)</span> <span class="token operator">=></span> templateName<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Load</span><span class="token punctuation">(</span>
            <span class="token class-name">TemplateContext</span> context<span class="token punctuation">,</span>
            <span class="token class-name">SourceSpan</span> callerSpan<span class="token punctuation">,</span>
            <span class="token class-name"><span class="token keyword">string</span></span> templatePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">GetTemplateReader</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span> <span class="token function">LoadAsync</span><span class="token punctuation">(</span>
            <span class="token class-name">TemplateContext</span> context<span class="token punctuation">,</span>
            <span class="token class-name">SourceSpan</span> callerSpan<span class="token punctuation">,</span>
            <span class="token class-name"><span class="token keyword">string</span></span> templatePath<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">GetTemplateReader</span><span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Grouping arbitrary code</h2>
<p>We don't always need a special case to decide to use partial classes. In fact, sometimes it just feels right to split parts of our code into some logical blocks.</p>
<p>In this example we have a command line application that formats files. Both the options and the command behavior are defined as part of a single class, which may be a little confusing.</p>
<p>By using partial classes, we can split and group different parts of the class like so:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Core options</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">FormatCommand</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CommandOption</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> <span class="token string character">'f'</span><span class="token punctuation">,</span> IsRequired <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"List of files to process."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>FileInfo<span class="token punctuation">></span></span> Files <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CommandOption</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> <span class="token string character">'c'</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"Configuration file."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">FileInfo<span class="token punctuation">?</span></span> ConfigFile <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Options related to formatting</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">FormatCommand</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CommandOption</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"indent-size"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"Override: indent size."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> IndentSize <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CommandOption</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"line-length"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"Override: line length."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> LineLength <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CommandOption</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"insert-eof-newline"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"Override: insert new line at EOF."</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span><span class="token punctuation">?</span></span> InsertEofNewLine <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Command implementation</span>
<span class="token punctuation">[</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span> Description <span class="token operator">=</span> <span class="token string">"Format files."</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">FormatCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICommand</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IFormattingService</span> _formattingService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">FormatCommand</span><span class="token punctuation">(</span><span class="token class-name">IFormattingService</span> formattingService<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _formattingService <span class="token operator">=</span> formattingService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name">Config</span> <span class="token function">LoadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">IConsole</span> console<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token function">LoadConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> file <span class="token keyword">in</span> Files<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> _formattingService<span class="token punctuation">.</span><span class="token function">FormatAsync</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> file<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span>Output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Formatted: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">file<span class="token punctuation">.</span>FullName</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Summary</h2>
<p>Partial classes can be used for more than just auto-generated code. It's a powerful language feature that enables creative ways to arrange code into smaller logically independent units. This can be very helpful when we want to reduce cognitive load or to simply keep things a bit more organized.</p>
<p>Since we're on the topic of refactoring, consider also checking out <a href="http://localhost:3000/blog/creative-use-of-extension-methods">a few interesting ways we can use extension methods</a> to write cleaner code. Similarly to partial classes, they might have more uses than you thought.</p>]]></description><link>http://localhost:3000/blog/refactoring-using-partial-classes</link><guid isPermaLink="false">http://localhost:3000/blog/refactoring-using-partial-classes</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Mon, 03 Feb 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Formatting XAML Files on Build with XAMLStyler]]></title><description><![CDATA[<p>Recently, I've decided to switch from Visual Studio to Rider as my default .NET development environment. The main problem with Visual Studio was that it was too slow when paired with ReSharper and, unfortunately, too useless when not. Rider offered me the best of both worlds.</p>
<p>However, one of the things that made the jump really difficult was the absence of <a href="https://marketplace.visualstudio.com/items?itemName=TeamXavalon.XAMLStyler">XAMLStyler extension</a> in Rider. It's an incredibly useful plugin that automatically formats your XAML files on save, letting you completely forget about sorting attributes, maintaining indentation, and other mundane things like that. After using it for three years, the idea of writing XAML without it was unbearable.</p>
<p>The problem is that .NET, historically, has been a rather closed ecosystem. If you wanted to extend the development experience, that typically meant installing a custom Visual Studio extension or writing your own. Everything revolved around the same IDE, same workflow, same stack, same set of tools, and there wasn't much of a choice.</p>
<p>With the advent of .NET Core the situation started changing. We are now seeing a mentality shift where everything is evolving towards more modular and portable components, with even .NET SDK itself being shipped as a command line tool. Overall, .NET development experience is starting to resemble that of Node.js, which I personally think is a great thing.</p>
<p>Among other things, .NET Core also introduced the concept of <a href="https://aka.ms/global-tools">.NET Core Global Tools</a>. This feature enables any .NET developer to quickly download, install and run custom command line tools without leaving the terminal.</p>
<p><a href="https://github.com/Xavalon/XamlStyler/issues/218">Since recently</a>, XAMLStyler is also available as a .NET custom tool, which means you can run it as a CLI instead of relying on the Visual Studio extension. In this article I will show you how I integrated it into my build process, ensuring all XAML files are always properly formatted, regardless of which IDE I'm using.</p>
<p>Although I will be talking about XAMLStyler in particular, the approach described here can easily be extrapolated to any other tool.</p>
<h2>What is XAMLStyler?</h2>
<p>Given that I've praised it so much, it makes sense to say a few words about what is it that XAMLStyler actually does.</p>
<p>If you've worked with either WPF, UWP or Xamarin, chances are you already know how annoying it is to maintain good formatting in your XAML files. As developers, we like when everything is symmetrical, tidy and consistent. As developers, we also like when everything is automated.</p>
<p>Let's say we have the following piece of XAML that renders some UI:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Grid</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Grid.ColumnDefinitions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ColumnDefinition</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ColumnDefinition</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Auto<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Grid.ColumnDefinitions</span><span class="token punctuation">></span></span>

  <span class="token comment">&#x3C;!-- Update notice --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TextBlock</span> <span class="token attr-name">Grid.Column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">Foreground</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{DynamicResource SecondaryTextBrush}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Run</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Update is available to version:<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Run</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Run</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding NewVersion}<span class="token punctuation">"</span></span> <span class="token attr-name">FontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SemiBold<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>TextBlock</span><span class="token punctuation">></span></span>

  <span class="token comment">&#x3C;!-- Confirmation button --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Button</span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">Grid.Column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding UpdateCommand}<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UPDATE NOW<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Grid</span><span class="token punctuation">></span></span>
</code></pre>
<p>At first glance it might look sufficiently clean as it is, but it's not. The attributes are not sorted, element declarations are far too long, the closing tag on the button is redundant. What's worse -- there is no consistency whatsoever.</p>
<p>Luckily, I can just run XAMLStyler on the code above and get something that looks like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Grid</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Grid.ColumnDefinitions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ColumnDefinition</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ColumnDefinition</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Auto<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Grid.ColumnDefinitions</span><span class="token punctuation">></span></span>

  <span class="token comment">&#x3C;!--  Update notice  --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TextBlock</span>
    <span class="token attr-name">Grid.Column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>
    <span class="token attr-name">VerticalAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span>
    <span class="token attr-name">Foreground</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{DynamicResource SecondaryTextBrush}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Run</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Update is available to version:<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Run</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>v<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Run</span> <span class="token attr-name">FontWeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SemiBold<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding NewVersion}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>TextBlock</span><span class="token punctuation">></span></span>

  <span class="token comment">&#x3C;!--  Confirmation button  --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Button</span>
    <span class="token attr-name">Grid.Column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>
    <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span>
    <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding UpdateCommand}<span class="token punctuation">"</span></span>
    <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UPDATE NOW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Grid</span><span class="token punctuation">></span></span>
</code></pre>
<p>This is way better. Individual elements are now arranged vertically, long attribute declarations broken into separate lines, redundant code gone, even the comments are formatted as well.</p>
<p>Note how it didn't touch the two consecutive <code>Run</code> elements in my code. That's because splitting them into multiple lines would result in a different layout being rendered. XAMLStyler is aware of these nuances and doesn't make changes that could introduce unwanted side-effects.</p>
<p>Another thing I really like about it, is how it sorts attributes. They are not merely sorted alphabetically, but also in accordance with the categories to which they belong. For example, properties like <code>Margin</code> and <code>VerticalAlignment</code> are placed above most other attributes, which makes them easier to find.</p>
<p>This and all other aspects of the formatting behavior are <a href="https://github.com/Xavalon/XamlStyler/wiki/External-Configurations">fully configurable</a> in settings or via an external configuration file.</p>
<h2>Using it as a .NET Core global tool</h2>
<p>The release of .NET Core 2.1 introduced us with a feature that lets us use the so-called global tools. These are essentially console applications published as NuGet packages, that you can easily download and run.</p>
<p>To use XAMLStyler as a global tool, we just need to install it with the following command:</p>
<pre class="language-c"><code class="language-c"><span class="token operator">></span> dotnet tool install XamlStyler<span class="token punctuation">.</span>Console <span class="token operator">--</span>global
</code></pre>
<p>This downloads the <a href="https://www.nuget.org/packages/XamlStyler.Console">corresponding NuGet package</a>, extracts its contents to a shared directory, then puts the executable on the system PATH.</p>
<p>Following that, we can now run <code>xstyler</code> from the command line. To process all XAML files in a directory, we can use:</p>
<pre class="language-c"><code class="language-c"><span class="token operator">></span> xstyler <span class="token operator">--</span>directory f<span class="token operator">:</span>\Projects\Softdev\LightBulb\ <span class="token operator">--</span>recursive

Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\App<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\RootView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Components\AdvancedSettingsTabView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Components\WhitelistSettingsTabView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Components\GeneralSettingsTabView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Components\HotKeySettingsTabView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Components\LocationSettingsTabView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Dialogs\MessageBoxView<span class="token punctuation">.</span>xaml
Processing<span class="token operator">:</span> f<span class="token operator">:</span>\Projects\Softdev\LightBulb\LightBulb\Views\Dialogs\SettingsView<span class="token punctuation">.</span>xaml
Processed <span class="token number">9</span> of <span class="token number">9</span> files<span class="token punctuation">.</span>
</code></pre>
<p>This is nice, but not ideal. As evident by the name, global tools are installed system-wide, which is convenient for some one-off utilities but doesn't work so well with tools that your project relies on. That's because the project repository is no longer self-contained -- other developers (or future you) will now have to also manually install this tool on their machines, which adds an an extra unnecessary step.</p>
<p>Having to take any additional steps after <code>git clone</code> makes the developer experience worse and introduces indeterminism, so we want to avoid that. After all, it's always nice to keep the repository as a single source of truth.</p>
<h2>Installing as a local tool</h2>
<p><a href="https://aka.ms/local-tools">.NET Core local tools</a> weren't really a thing until .NET Core 3.0 came around. Previously, there was a way to install a global tool inside a directory to make it "local" but that was a hack more than anything. In earlier versions of .NET Core we also had <code>DotNetCliToolReference</code>, but it's <a href="https://github.com/dotnet/announcements/issues/107">deprecated now</a> and can't be used in new projects.</p>
<p>With the latest SDK, however, we can now install local tools simply by dropping the <code>--global</code> option:</p>
<pre class="language-c"><code class="language-c"><span class="token operator">></span> dotnet tool install XamlStyler<span class="token punctuation">.</span>Console
</code></pre>
<p>Note that if we try to run this in our project's repository we will get the following error:</p>
<pre class="language-c"><code class="language-c">Cannot find a manifest file<span class="token punctuation">.</span>
For a list of locations searched<span class="token punctuation">,</span> specify the <span class="token string">"-d"</span> option before the tool name<span class="token punctuation">.</span>
If you intended to install a global tool<span class="token punctuation">,</span> add `<span class="token operator">--</span>global` to the command<span class="token punctuation">.</span>
If you would like to create a manifest<span class="token punctuation">,</span> use `dotnet new tool<span class="token operator">-</span>manifest`<span class="token punctuation">,</span>
  usually in the repo root directory<span class="token punctuation">.</span>
</code></pre>
<p>As the message states, in order to install local tools we will first need to create a manifest file in the root of the project repository. We can do this using the suggested command:</p>
<pre class="language-c"><code class="language-c"><span class="token operator">></span> dotnet new tool<span class="token operator">-</span>manifest
</code></pre>
<p>That creates an empty manifest at <code>/.config/dotnet-tools.json</code>. We can now run the original command again, which will add a tool entry to this manifest file:</p>
<pre class="language-c"><code class="language-c"><span class="token operator">></span> dotnet tool install XamlStyler<span class="token punctuation">.</span>Console

You can invoke the tool from this directory using the following commands<span class="token operator">:</span>
  <span class="token string">'dotnet tool run xstyler'</span> or <span class="token string">'dotnet xstyler'</span><span class="token punctuation">.</span>

Tool <span class="token string">'xamlstyler.console'</span> <span class="token punctuation">(</span>version <span class="token string">'3.2001.0'</span><span class="token punctuation">)</span> was successfully installed<span class="token punctuation">.</span>
Entry is added to the manifest file f<span class="token operator">:</span>\Projects\Softdev\LightBulb\<span class="token punctuation">.</span>config\dotnet<span class="token operator">-</span>tools<span class="token punctuation">.</span>json<span class="token punctuation">.</span>
</code></pre>
<p>As long as the manifest file is tracked by git, any developer who clones the repository can run a simple command to download and install all tools listed in the manifest file:</p>
<pre class="language-c"><code class="language-c"><span class="token operator">></span> dotnet tool restore
</code></pre>
<p>Note that by installing XAMLStyler as a local tool, it is no longer added on the PATH, so we have to run it as <code>dotnet xstyler</code> instead of just <code>xstyler</code>. The name will be resolved anywhere in the repository or in any of its descendant directories.</p>
<p>In most cases, when working with .NET custom CLI tools, you will want to have them installed locally for your project. This provides a higher degree of portability as opposed to global tools.</p>
<h2>Integrating in the build process</h2>
<p>Things are much better now that XAMLStyler is installed locally in our project, but we still have to perform manual actions. This is unacceptable.</p>
<p>We can go a step further and execute the tool during build by extending the default workflow. With MSBuild-based projects this is possible by adding a custom <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-targets">target</a>.</p>
<p>A target is a set of tasks that can be either invoked manually or configured to run automatically after some other, usually built-in, target. As a trigger we can use the default <code>BeforeBuild</code> target which is executed right before the build starts.</p>
<p>Let's update our project file accordingly:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk.WindowsDesktop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>PropertyGroup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>OutputType</span><span class="token punctuation">></span></span>WinExe<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>OutputType</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>UseWPF</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>UseWPF</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>PropertyGroup</span><span class="token punctuation">></span></span>

  <span class="token comment">&#x3C;!-- ... --></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Target</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Format XAML<span class="token punctuation">"</span></span> <span class="token attr-name">AfterTargets</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BeforeBuild<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Exec</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dotnet tool restore<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Exec</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dotnet xstyler -r -d <span class="token entity named-entity" title="&#x22;">&#x26;quot;</span>$(MSBuildProjectDirectory)<span class="token entity named-entity" title="&#x22;">&#x26;quot;</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Target</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Project</span><span class="token punctuation">></span></span>
</code></pre>
<p>As you can see, this target will trigger automatically on each build, execute <code>dotnet tool restore</code> and then run XAMLStyler recursively on the project's directory.</p>
<p>By executing the restore first, we ensure that the tool is always available. Once it's downloaded and installed, running the restore again will just complete instantly so we don't have to worry about any performance issues. I've found this to be the most reliable approach after experimenting with a few different ones.</p>
<p>Now, when we run <code>dotnet build</code> on the project, it will also execute XAMLStyler to format all XAML files inside of it. The same will happen if we build the project in Visual Studio, Rider, VS Code, or anywhere else. Also, since the tool is installed locally and restored as part of the build, any developer who clones the repository won't have to take any additional steps to get up and running.</p>
<h2>Summary</h2>
<p>XAMLStyler is an awesome tool that will make you forget about formatting in your XAML files once and for all. By integrating it into the build process, we ensure that all XAML files will adhere to a consistent and clean format, no matter who's working on it and where.</p>
<p>With .NET Core 3.0 we can now install locally scoped command line tools. This is better than the previously available global tool concept because it's more portable. By using local tools we can also easily integrate custom workflows into our project.</p>
<p>If you're interested to learn more about .NET Core global and local tools, check out <a href="https://andrewlock.net/new-in-net-core-3-local-tools">this article by Andrew Lock</a> and <a href="https://stu.dev/dotnet-core-3-local-tools">another one by Stuart Lang</a>. There's also a <a href="https://github.com/natemcmaster/dotnet-tools">curated list of .NET custom tools</a> maintained by Nate McMaster.</p>]]></description><link>http://localhost:3000/blog/formatting-xaml-on-build</link><guid isPermaLink="false">http://localhost:3000/blog/formatting-xaml-on-build</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[msbuild]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Thu, 09 Jan 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Parsing in F# with FParsec]]></title><description><![CDATA[<p>Two months ago I wrote an article about <a href="http://localhost:3000/blog/monadic-parser-combinators">monadic parser combinators in C#</a> and how you can use this approach to express complex recursive grammar. To extend this topic a bit, I also wanted to show how the same approach can be applied in a functional-first language such as F#.</p>
<p>FParsec may not be the only, but is definitely the most popular F# framework for building parsers. Designed as a clone to Haskell's <a href="https://github.com/haskell/parsec">Parsec</a>, with which it shares a very similar API, this library is focused on high throughput and human-readable error messages.</p>
<p>As a personal learning exercise, I've decided to port <a href="https://github.com/Tyrrrz/LtGt">LtGt</a> from <a href="https://github.com/sprache/Sprache">Sprache</a> to <a href="https://github.com/stephan-tolksdorf/fparsec">FParsec</a>. Just by simply rewriting the same rules in a new framework, I saw a <a href="https://twitter.com/Tyrrrz/status/1205966639352684544">7.35x performance improvement</a>, which is pretty impressive!</p>
<p>In this article I'll guide you through the basics of this library and show how you can write parsers with it.</p>
<h2>Parser primitives</h2>
<p>Every parser in FParsec is an instance of <code>Parser&#x3C;'Result, 'State></code> which is a type of function that takes a <code>CharStream&#x3C;'State></code> and returns <code>Reply&#x3C;'Result></code>. Yes, parsers in FParsec can have state which means you can express context-sensitive grammar, but I'm not going to talk about it here. All we need to know is that a parser is a function that takes an input and produces a result or a failure.</p>
<p>Similarly to Sprache and other parser combinator libraries, FParsec builds upon a set of powerful primitives. These are accessible as top-level functions and provide starting points for even the most complicated parsers.</p>
<p>Among these are:</p>
<ul>
<li><code>anyChar</code> -- parses any single character.</li>
<li><code>pchar</code> -- parses a specific character.</li>
<li><code>anyOf</code> -- parses any of the specified characters.</li>
<li><code>satisfy</code> -- parses any character that satisfies a predicate.</li>
<li><code>letter</code>, <code>digit</code>, <code>upper</code>, <code>lower</code> -- parses a character that belongs to a specific category.</li>
<li><code>pstring</code> -- parses a specified string.</li>
</ul>
<p>These can be used to parse basic inputs but, being primitives, they are obviously not very useful on their own. In order to compose these simple parsers into more sophisticated ones, we need to use combinators.</p>
<p>In essence, combinators are just functions that take existing parsers as parameters and construct new, enhanced versions of them. I personally like to divide them into three logical groups:</p>
<ul>
<li>Chaining combinators</li>
<li>Grouping combinators</li>
<li>Mapping combinators</li>
</ul>
<p>Let's take a look at some of them.</p>
<h2>Chaining multiple parsers</h2>
<p>At the base of all chaining combinators in FParsec stands the <em>bind</em> operator (<code>>>=</code>). It constructs a new parser based on the result of the previous one.</p>
<p>We can use the bind operator to chain multiple sequential parsers and combine them into a higher-order parser. As a simple example, here's how we can express two consecutive characters that appear in opposite case:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">open</span> FParsec

<span class="token keyword">let</span> isOppositeCase a b <span class="token operator">=</span> isUpper a <span class="token operator">&#x3C;></span> isUpper b

<span class="token keyword">let</span> sawtooth <span class="token operator">=</span> anyChar <span class="token operator">>></span><span class="token operator">=</span> <span class="token keyword">fun</span> a <span class="token operator">-></span> satisfy <span class="token operator">&#x3C;|</span> isOppositeCase a <span class="token operator">>></span><span class="token operator">=</span> <span class="token keyword">fun</span> b <span class="token operator">-></span> <span class="token function">preturn</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token comment">//             ~~~~~~~              ~~~~~~~    ~~~~~~~~~~~~~~~~              ~~~~~~~~~~~~~~</span>
<span class="token comment">// parse any char --^                  ^         ^                              ^</span>
<span class="token comment">//                                     |         |                              |</span>
<span class="token comment">// then any char satisfying predicate --         -- partially applied function  |</span>
<span class="token comment">//                                                                              |</span>
<span class="token comment">//             then combine the results in a tuple ------------------------------</span>
</code></pre>
<p>The parser <code>sawtooth</code> will succeed on inputs such as <code>"aB"</code>, <code>"Aa"</code>, <code>"dP"</code> and similar, but will fail on <code>"ab"</code>, <code>"AA"</code>, <code>"dp"</code>.</p>
<p>Although it is quite flexible, the bind operator isn't very convenient to use. It's too verbose and, unlike this particular case, we rarely need the result of the previous parser to construct the next one.</p>
<p>This is why FParsec also offers a few high level chaining operators:</p>
<ul>
<li><code>.>></code> -- chains two sequential parsers and retains the result of the one on the left.</li>
<li><code>>>.</code> -- chains two sequential parsers and retains the result of the one on the right.</li>
<li><code>.>>.</code> -- chains two sequential parsers and combines both of their results in a tuple.</li>
</ul>
<p>For example, here's how we can compose a parser that will consume <code>"5,9"</code> and turn it into an F# tuple consisting of characters <code>'5'</code> and <code>'9'</code>, discarding the comma in the middle:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> commaSeparatedDigits <span class="token operator">=</span> digit <span class="token punctuation">.</span><span class="token operator">>></span> pchar <span class="token string">','</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> digit
</code></pre>
<p>Individual parsers in the expression are chained pairwise left to right. Here's the same code but with parentheses highlighting how it works:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> commaSeparatedDigits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>digit <span class="token punctuation">.</span><span class="token operator">>></span> pchar <span class="token string">','</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> digit<span class="token punctuation">)</span>
<span class="token comment">//                           ~~~~~ ^              ^  ^ ~~~~~</span>
<span class="token comment">//                                 |              |  |</span>
<span class="token comment">//   take result of the left side --              ---- take both</span>
</code></pre>
<p>We can further improve this by using <code>skipChar</code> instead of <code>pchar</code> to avoid unnecessary allocations for the result we're not interested in:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> commaSeparatedDigits <span class="token operator">=</span> digit <span class="token punctuation">.</span><span class="token operator">>></span> skipChar <span class="token string">','</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> digit
</code></pre>
<p>This kind of parser chaining can be useful to express grammar rules with a fixed structure. Sometimes, however, we also need to express repetition, which is when a certain symbol may appear more than once. To do that, we can use one of the sequence combinators that FParsec offers:</p>
<ul>
<li><code>many</code> -- chains the same parser until it fails.</li>
<li><code>sepBy</code> -- chains the same parser separated by another parser.</li>
<li><code>manyTill</code> -- chains the same parser until another parser succeeds.</li>
<li><code>manyChars</code>, <code>manyCharsTill</code> -- same as <code>many</code> and <code>manyTill</code> but optimized for strings.</li>
</ul>
<p>For example, we can use <code>manyChars</code> to enhance the original <code>commaSeparatedDigits</code> parser so that it can handle multiple consecutive digits around the comma:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> commaSeparatedDigits <span class="token operator">=</span> manyChars digit <span class="token punctuation">.</span><span class="token operator">>></span> skipChar <span class="token string">','</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> manyChars digit
<span class="token comment">//                         ~~~~~~~~~~~~~~~                       ~~~~~~~~~~~~~~~</span>
<span class="token comment">//                              ^--  take many digits instead of one  --^</span>
<span class="token comment">//                                    (manyChars produces a string)</span>
</code></pre>
<p>This will now work on inputs such as <code>"1337,69"</code>, producing a tuple of strings instead of characters. We can also change it a bit and use <code>sepBy</code> so that it can handle an arbitrary number of digits separated by commas:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> manyCommaSeparatedDigits <span class="token operator">=</span> manyChars digit <span class="token operator">|></span> sepBy <span class="token operator">&#x3C;|</span> skipChar <span class="token string">','</span>
<span class="token comment">//                                                ~~~~~~~~~~~~~~~~~~~~~</span>
<span class="token comment">//        apply the parser many times separated by commas --^</span>
</code></pre>
<p>If we run the last parser on <code>"5,96,10"</code> we will get a matching list of strings <code>["5"; "96"; "10"]</code>, which we can operate on.</p>
<p>I like to apply F#'s forward and backward pipes in compositions like this because it makes the parsers more readable -- the expression above is equivalent to <code>sepBy (manyChars digit) (skipChar ',')</code>.</p>
<p>Note that the parsers created with these sequence combinators will always succeed -- if the parser <code>x</code> fails, <code>many x</code> will simply produce an empty list. If you need the underlying parser to succeed at least once, you can use the non-empty variants of these combinators instead: <code>many1</code>, <code>sepBy1</code>, <code>many1Chars</code>, etc.</p>
<h2>Grouping alternatives</h2>
<p>Another way we can combine parsers is by grouping them. This lets us defer complex grammar rules to multiple separate parsers.</p>
<p>We can do this with the <em>choice</em> operator (<code>&#x3C;|></code>). For example, to combine <code>letter</code> and <code>digit</code> into one parser, we may write:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> letterOrDigit <span class="token operator">=</span> letter <span class="token operator">&#x3C;|></span> digit
</code></pre>
<p>The above parser will succeed on <code>"a"</code>, <code>"B"</code> as well as <code>"0"</code>, <code>"4"</code>. Similarly, we can write a parser for a string that contains only letters or digits:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> alphanumericString <span class="token operator">=</span> <span class="token function">manyChars</span> <span class="token punctuation">(</span>letter <span class="token operator">&#x3C;|></span> digit<span class="token punctuation">)</span>
</code></pre>
<p>Of course, we can also chain the choice operator multiple times to provide more than two alternatives:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> letterOrDigitOrSpecial <span class="token operator">=</span> letter <span class="token operator">&#x3C;|></span> digit <span class="token operator">&#x3C;|></span> pchar <span class="token string">'*'</span> <span class="token operator">&#x3C;|></span> pchar <span class="token string">'#'</span> <span class="token operator">&#x3C;|></span> pchar <span class="token string">'%'</span>
</code></pre>
<p>When we're dealing with many alternatives, however, it's better to use the <code>choice</code> function instead. It's an optimized version of the <code>&#x3C;|></code> operator that takes multiple parsers as a sequence:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> letterOrDigitOrSpecial <span class="token operator">=</span>
    choice <span class="token punctuation">[</span>
        letter
        digit
        pchar <span class="token string">'*'</span>
        pchar <span class="token string">'#'</span>
        pchar <span class="token string">'%'</span>
    <span class="token punctuation">]</span>
</code></pre>
<p>Not only is the parser above going to work on a bunch of different inputs, it will also produce informative error messages if the parser fails. For example, if we try to use it to parse <code>"!"</code>, it will say:</p>
<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Failure</span><span class="token operator">:</span>
<span class="token known-class-name class-name">Error</span> <span class="token keyword">in</span> <span class="token maybe-class-name">Ln</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token maybe-class-name">Col</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token operator">!</span>
<span class="token operator">^</span>
<span class="token maybe-class-name">Expecting</span><span class="token operator">:</span> decimal digit<span class="token punctuation">,</span> letter<span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> or <span class="token string">'*'</span>
</code></pre>
<p>An important thing to note about choice combinators in FParsec is that all of them are non-backtracking by default. This ensures the path of least resistance for writing high performance code but may lead to slightly unexpected results.</p>
<p>For example, in the following snippet one of the alternative parsers (<code>fooXyz</code>) will never be evaluated:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> fooBar <span class="token operator">=</span> pstring <span class="token string">"foo"</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> pstring <span class="token string">"bar"</span>
<span class="token keyword">let</span> fooXyz <span class="token operator">=</span> pstring <span class="token string">"foo"</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> pstring <span class="token string">"xyz"</span>

<span class="token keyword">let</span> fooBarOrFooXyz <span class="token operator">=</span>
    choice <span class="token punctuation">[</span>
        fooBar
        fooXyz
    <span class="token punctuation">]</span>

<span class="token comment">// Input:         fooxyz</span>
<span class="token comment">//                ~~~===</span>
<span class="token comment">//                  ^  ^</span>
<span class="token comment">// fooBar:          |  |</span>
<span class="token comment">// 1. take "foo" ----  |   success, change state</span>
<span class="token comment">// 2. take "bar" -------   error: expected "bar", found "xyz"</span>
<span class="token comment">//</span>
<span class="token comment">// fooXyz will not be tried because fooBar changed state</span>
</code></pre>
<p>Trying to run <code>fooBarOrFooXyz</code> on <code>"fooxyz"</code> will fail, but will work well with <code>"foobar"</code>. This is because the underlying parser <code>fooBar</code> <em>partially</em> succeeds on <code>"fooxyz"</code> and changes the parser state.</p>
<p>To instruct FParsec to backtrack in such cases, we can wrap the individual parsers in <code>attempt</code> which will reset the state after the underlying parser fails:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> fooBar <span class="token operator">=</span> pstring <span class="token string">"foo"</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> pstring <span class="token string">"bar"</span>
<span class="token keyword">let</span> fooXyz <span class="token operator">=</span> pstring <span class="token string">"foo"</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> pstring <span class="token string">"xyz"</span>

<span class="token keyword">let</span> fooBarOrFooXyz <span class="token operator">=</span>
    choice <span class="token punctuation">[</span>
        attempt fooBar
        attempt fooXyz
    <span class="token punctuation">]</span>

<span class="token comment">// Input:         fooxyz</span>
<span class="token comment">//                ~~~===</span>
<span class="token comment">//                  ^  ^</span>
<span class="token comment">// fooBar:          |  |</span>
<span class="token comment">// 1. take "foo" ----  |   success, change state</span>
<span class="token comment">// 2. take "bar" -------   error: expected "bar", found "xyz"</span>
<span class="token comment">// 3. reset state</span>
<span class="token comment">//</span>
<span class="token comment">//                fooxyz</span>
<span class="token comment">//                ~~~~~~</span>
<span class="token comment">//                  ^  ^</span>
<span class="token comment">// fooXyz:          |  |</span>
<span class="token comment">// 1. take "foo" ----  |   success, change state</span>
<span class="token comment">// 2. take "xyz" -------   success, change state</span>
<span class="token comment">// 3. produce result: ("foo", "xyz")</span>
</code></pre>
<p>This will work as expected. Of course, you should use <code>attempt</code> sparingly to avoid unnecessary backtracking. Alternatively, it's also possible to selectively avoid changing parser state by using a variant of chaining combinators:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> fooBar <span class="token operator">=</span> pstring <span class="token string">"foo"</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span><span class="token operator">?</span> pstring <span class="token string">"bar"</span>
<span class="token keyword">let</span> fooXyz <span class="token operator">=</span> pstring <span class="token string">"foo"</span> <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span><span class="token operator">?</span> pstring <span class="token string">"xyz"</span>
<span class="token comment">//   state won't change here --^</span>

<span class="token comment">// ...so backtracking is not necessary</span>
<span class="token keyword">let</span> fooBarOrFooXyz <span class="token operator">=</span>
    choice <span class="token punctuation">[</span>
        fooBar
        fooXyz
    <span class="token punctuation">]</span>
</code></pre>
<p>These variants of chaining combinators are just like the regular ones, except that the constructed parser is treated as a single whole instead of two separate parsers:</p>
<ul>
<li><code>>>=?</code> -- same as <code>>>=</code> but doesn't change state.</li>
<li><code>>>?</code> -- same as <code>>>.</code> but doesn't change state.</li>
<li><code>.>>?</code> -- same as <code>.>></code> but doesn't change state.</li>
<li><code>.>>.?</code> -- same as <code>.>>.</code> but doesn't change state.</li>
</ul>
<h2>Mapping results</h2>
<p>Let's not forget that the main purpose of a parser is to extract semantics from text. In programming terms, that means converting raw character strings to some domain types.</p>
<p>There are two main operators associated with that:</p>
<ul>
<li>Return operator (<code>>>%</code>) -- sets the result of a parser to the specified value.</li>
<li>Map operator (<code>|>></code>) -- applies a function to the result of a parser.</li>
</ul>
<p>We can use the return operator to construct a parser that will simply produce a constant if it succeeds:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">type</span> <span class="token class-name">ShapeType</span> <span class="token operator">=</span> Circle <span class="token operator">|</span> Rectangle

<span class="token comment">// This parser produces ShapeType</span>
<span class="token keyword">let</span> shapeType <span class="token operator">=</span>
    choice <span class="token punctuation">[</span>
        skipString <span class="token string">"circle"</span> <span class="token operator">>></span><span class="token operator">%</span> Circle
        skipString <span class="token string">"rectangle"</span> <span class="token operator">>></span><span class="token operator">%</span> Rectangle
    <span class="token punctuation">]</span>
</code></pre>
<p>Combination of <code>skipString</code> and <code>>>%</code> is so common that it also has its own optimized shorthand <code>stringReturn</code>:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> shapeType <span class="token operator">=</span>
    choice <span class="token punctuation">[</span>
        stringReturn <span class="token string">"circle"</span> Circle
        stringReturn <span class="token string">"rectangle"</span> Rectangle
    <span class="token punctuation">]</span>
</code></pre>
<p>The example parser above will turn <code>"circle"</code> into <code>ShapeType.Circle</code> and <code>"rectangle"</code> into <code>ShapeType.Rectangle</code>.</p>
<p>To perform more complex conversions, we can use the map operator which lets us transform the result using a function. For example, here we map a tuple into our own domain type:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token comment">// Single-case union</span>
<span class="token keyword">type</span> <span class="token class-name">NameValuePair</span> <span class="token operator">=</span> NameValuePair <span class="token keyword">of</span> <span class="token class-name">string <span class="token operator">*</span> string</span>

<span class="token comment">// Parses: name=value;</span>
<span class="token keyword">let</span> nameValuePair <span class="token operator">=</span>
    <span class="token punctuation">(</span>anyChar <span class="token operator">|></span> manyCharsTill <span class="token operator">&#x3C;|</span> skipChar <span class="token string">'='</span><span class="token punctuation">)</span>  <span class="token comment">// take a string of any chars until equals sign</span>
    <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span>
    <span class="token punctuation">(</span>anyChar <span class="token operator">|></span> manyCharsTill <span class="token operator">&#x3C;|</span> skipChar <span class="token string">';'</span><span class="token punctuation">)</span>  <span class="token comment">// take a string of any chars until semicolon</span>
    <span class="token operator">|></span><span class="token operator">></span> NameValuePair                           <span class="token comment">// map the tuple to a domain type</span>
</code></pre>
<p>The reason we were able to simply write <code>|>> NameValuePair</code> is because the type's constructor expects a tuple of two strings, which is exactly what we're supplying it with. In a general form we can use any function:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> nameValuePair <span class="token operator">=</span>
    <span class="token punctuation">(</span>anyChar <span class="token operator">|></span> manyCharsTill <span class="token operator">&#x3C;|</span> skipChar <span class="token string">'='</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span>
    <span class="token punctuation">(</span>anyChar <span class="token operator">|></span> manyCharsTill <span class="token operator">&#x3C;|</span> skipChar <span class="token string">';'</span><span class="token punctuation">)</span>
    <span class="token operator">|></span><span class="token operator">></span> <span class="token keyword">fun</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">NameValuePair</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token comment">//           ~~~~  ~~~~~</span>
<span class="token comment">//            ^      ^</span>
<span class="token comment">//            |      |</span>
<span class="token comment">//      deconstructed tuple</span>
</code></pre>
<h2>JSON processor using FParsec</h2>
<p>There are still a lot of other primitives and combinators in FParsec. In fact, with around <a href="https://quanttec.com/fparsec/reference/parser-overview.html">200 of them in total</a>, covering them all here would be both ambitious and unnecessary.</p>
<p>Instead, let's take a look at how it all fits together by writing our own JSON parser.</p>
<p>I know that the official documentation has a tutorial on exactly this topic and on top of that I've already shown how to write a JSON processor in C# using Sprache in my previous article. That being said, I think JSON grammar has a perfect mixture of small and non-trivial rules that makes it a pretty good "hello world" of parser frameworks.</p>
<p>Before we can begin, however, we have to establish what is it that we want our parsers to produce. Since we're dealing with JSON, being a typical context-free language, its structure can be expressed using a syntax tree.</p>
<p>Thanks to F#'s recursive discriminated unions, defining ASTs is really trivial:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token keyword">type</span> <span class="token class-name">JsonNode</span> <span class="token operator">=</span>
    <span class="token comment">// Literals</span>
    <span class="token operator">|</span> JsonNull                            <span class="token comment">// null</span>
    <span class="token operator">|</span> JsonBool <span class="token keyword">of</span> <span class="token class-name">bool</span>                    <span class="token comment">// true | false</span>
    <span class="token operator">|</span> JsonNumber <span class="token keyword">of</span> <span class="token class-name">float</span>                 <span class="token comment">// 10 | 5.63</span>
    <span class="token operator">|</span> JsonString <span class="token keyword">of</span> <span class="token class-name">string</span>                <span class="token comment">// "foobar"</span>
    <span class="token comment">// Complex types</span>
    <span class="token operator">|</span> JsonArray <span class="token keyword">of</span> <span class="token class-name">List</span><span class="token operator">&#x3C;</span>JsonNode<span class="token operator">></span>         <span class="token comment">// [ "hello", 10, true ]</span>
    <span class="token operator">|</span> JsonObject <span class="token keyword">of</span> <span class="token class-name">Map</span><span class="token operator">&#x3C;</span>string<span class="token punctuation">,</span> JsonNode<span class="token operator">></span> <span class="token comment">// { "count": 4, "items": [5, 1, -8, 3.14] }</span>
</code></pre>
<p>These will represent the individual nodes in the tree and later we're going to add some logic to navigate through the hierarchy.</p>
<p>Let's create a new module called <code>JsonGrammar</code> in the same file. The functions in this module will represent individual grammar rules so their names will match those of the actual data types but with camel case instead.</p>
<p>The first parser that we'll write is going to be <code>jsonNull</code>, which is really easy:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token keyword">open</span> FParsec

    <span class="token keyword">let</span> jsonNull <span class="token operator">=</span> stringReturn <span class="token string">"null"</span> JsonNull <span class="token punctuation">.</span><span class="token operator">>></span> spaces
    <span class="token comment">//                           ~~~~  ~~~~~~~~     ~~~~~~</span>
    <span class="token comment">//                            ^        ^           ^-- skip trailing whitespace</span>
    <span class="token comment">//                            |        |</span>
    <span class="token comment">//                match this --        -- produce this</span>
</code></pre>
<p>We are using <code>stringReturn</code> to consume a string <code>"null"</code> and return the corresponding value -- union case <code>JsonNull</code>.</p>
<p>Since whitespace is ignored in JSON, we have to also account for it in our parsers or else they will fail when they encounter any whitespace character. We can do that by chaining our parser with <code>spaces</code> which will consume and discard any trailing spaces. As long as we do that at the end of every parser, we will be fine.</p>
<p>The traditional way of dealing with insignificant whitespace involves writing a separate <em>lexer</em> component, which parses raw characters into so-called <em>tokens</em>. It can be done with FParsec as well and it provides many benefits, but for the sake of simplicity we'll be writing a scanner-less parser this time.</p>
<p>If you're following along and your IDE is complaining that the type of a parser can't be inferred -- help it by explicitly specifying it as <code>let jsonNull : Parser&#x3C;_, unit> = ...</code>. We're not going to be using state so we can set it to <code>unit</code>. By the end of this exercise we will have an entry point function that will help the F#'s compiler correctly determine the generic types, but for now we can write them out manually.</p>
<p>With <code>JsonNull</code> out of the way, let's proceed on to our next data type, <code>JsonBool</code>:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">let</span> jsonBoolTrue <span class="token operator">=</span> stringReturn <span class="token string">"true"</span> <span class="token operator">&#x3C;|</span> JsonBool <span class="token keyword">true</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces
    <span class="token keyword">let</span> jsonBoolFalse <span class="token operator">=</span> stringReturn <span class="token string">"false"</span> <span class="token operator">&#x3C;|</span> JsonBool <span class="token keyword">false</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces

    <span class="token keyword">let</span> jsonBool <span class="token operator">=</span> jsonBoolTrue <span class="token operator">&#x3C;|></span> jsonBoolFalse
</code></pre>
<p>Since a boolean can be in either of two states, we can handle them separately and combine them using the choice operator. This is an advantage of combinatory parsing -- we can split a complex grammar rule into many simpler ones.</p>
<p>When it comes to <code>jsonNumber</code>, FParsec already does most of the work by providing us with <code>pfloat</code>, a parser that matches text that represents a floating point number and converts it to <code>float</code> (which is an alias for <code>System.Double</code> in F#). That means we can just write our parser like this:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">let</span> jsonNumber <span class="token operator">=</span> pfloat <span class="token punctuation">.</span><span class="token operator">>></span> spaces <span class="token operator">|></span><span class="token operator">></span> JsonNumber
</code></pre>
<p>Note how we used the map operator (<code>|>></code>) in the parser above. This takes the result of <code>pfloat</code> and pipes it into <code>JsonNumber</code>'s constructor, which conveniently expects a <code>float</code>.</p>
<p>Moving on to <code>JsonString</code>, where we need to handle text of any length between two double quotes. To make our life easier we can introduce a few helper functions:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token comment">// Applies popen, then pchar repeatedly until pclose succeeds,</span>
    <span class="token comment">// returns the string in the middle</span>
    <span class="token keyword">let</span> manyCharsBetween popen pclose pchar <span class="token operator">=</span> popen <span class="token operator">>></span><span class="token operator">?</span> manyCharsTill pchar pclose

    <span class="token comment">// Parses any string between popen and pclose</span>
    <span class="token keyword">let</span> anyStringBetween popen pclose <span class="token operator">=</span> manyCharsBetween popen pclose anyChar

    <span class="token comment">// Parses any string between double quotes</span>
    <span class="token keyword">let</span> quotedString <span class="token operator">=</span> skipChar <span class="token string">'"'</span> <span class="token operator">|></span> anyStringBetween <span class="token operator">&#x3C;|</span> skipChar <span class="token string">'"'</span>
    <span class="token comment">// is equivalent to: anyStringBetween (skipChar '"') (skipChar '"')</span>
</code></pre>
<p>The combinator <code>manyCharsBetween</code> applies <code>popen</code>, then repeatedly applies <code>pchar</code> until it encounters <code>pclose</code>. We build upon it and define a higher-level combinator <code>anyStringBetween</code> which will parse a string between two parsers consisting of any characters. It's effectively the same as the <code>.*?</code> regular expression.</p>
<p>Finally, we also define <code>quotedString</code> which is <code>anyStringBetween</code> with double quotes already applied. Note how the use of forward and backward pipes makes the code fluent -- the order of tokens in this expression actually matches the order in which the parser consumes them!</p>
<p>Now, defining <code>jsonString</code> becomes really trivial:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">let</span> jsonString <span class="token operator">=</span> quotedString <span class="token punctuation">.</span><span class="token operator">>></span> spaces <span class="token operator">|></span><span class="token operator">></span> JsonString
</code></pre>
<p>Ok, to be fair this doesn't handle escape sequences like <code>\t</code>, <code>\n</code>, etc. which are allowed in JSON strings. Handling those is not very interesting so I will cheat here by claiming that this is left as an exercise for the reader. 🙂</p>
<p>With all of the literals out of the way, we can group them into a single parser. This is not necessary but it makes it slightly easier to reason about the grammar.</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">let</span> jsonLiteral <span class="token operator">=</span>
        choice <span class="token punctuation">[</span>
            jsonNull
            jsonBool
            jsonNumber
            jsonString
        <span class="token punctuation">]</span>
</code></pre>
<p>Our two remaining cases, <code>JsonArray</code> and <code>JsonObject</code>, are slightly more complicated. That's because the corresponding grammar rules are recursive -- arrays and objects can both be nested within each other.</p>
<p>What makes it harder is that the order of declarations in a file matters in F# as opposed to C#. This means we can't reference a parser if it hasn't been defined above, so it's not possible to introduce a cyclic recursion that easily.</p>
<p>FParsec provides its own way to work around this problem with the <code>createParserForwardedToRef</code> function. We can use it to construct a dummy <code>jsonNode</code> parser, which we can later update using its reference:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">let</span> jsonNode<span class="token punctuation">,</span> jsonNodeRef <span class="token operator">=</span> <span class="token function">createParserForwardedToRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>At this point we can temporarily pretend that <code>jsonNode</code> is already defined and will evaluate any valid JSON node, including arrays and objects.</p>
<p>Now let's parse an array which is an enumeration of comma-separated items contained within square brackets. Each item in an array can be any literal, an object, or another array as well -- or in other words, any node.</p>
<p>We can define a helper function called <code>manyContained</code> which will take care of the list inside the brackets. With that, the implementation of <code>jsonArray</code> looks like this:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token comment">// Parses: popen p psep p psep p psep ... p pclose</span>
    <span class="token keyword">let</span> manyContained popen pclose psep p <span class="token operator">=</span> between popen pclose <span class="token operator">&#x3C;|</span> sepBy p psep

    <span class="token keyword">let</span> jsonArray <span class="token operator">=</span>
        jsonNode                       <span class="token comment">// parse JSON nodes...</span>
        <span class="token operator">|></span> manyContained               <span class="token comment">// contained within...</span>
            <span class="token punctuation">(</span>skipChar <span class="token string">'['</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>  <span class="token comment">// openning square bracket...</span>
            <span class="token punctuation">(</span>skipChar <span class="token string">']'</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>  <span class="token comment">// and closing square bracket...</span>
            <span class="token punctuation">(</span>skipChar <span class="token string">','</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>  <span class="token comment">// separated by commas</span>
        <span class="token operator">|></span><span class="token operator">></span> JsonArray
</code></pre>
<p>The combinator <code>between popen pclose p</code> is an optimized version of <code>popen >>. p .>> pclose</code>. We pipe <code>sepBy</code> into it, which will apply a parser repeatedly using a separator. By combining these two combinators, we get a yet another combinator which will apply an opening parser, then the main parser delimited by the separator parser, and finally the closing parser.</p>
<p>Ultimately, the implementation of <code>jsonArray</code> comes down to just passing the correct arguments to our helper function.</p>
<p>Dealing with <code>JsonObject</code> is pretty similar except that we have to parse an enumeration of properties instead of just nodes. A property in JSON is a quoted string followed by a colon and a value. Conveniently, we've already defined a useful combinator called <code>quotedString</code> when we were writing <code>jsonString</code> earlier, which we can now use like so:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token comment">// Produces a tuple: (string, JsonNode)</span>
    <span class="token keyword">let</span> jsonProperty <span class="token operator">=</span>
        quotedString <span class="token punctuation">.</span><span class="token operator">>></span> spaces <span class="token punctuation">.</span><span class="token operator">>></span> skipChar <span class="token string">':'</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces <span class="token punctuation">.</span><span class="token operator">>></span><span class="token punctuation">.</span> jsonNode <span class="token punctuation">.</span><span class="token operator">>></span> spaces

    <span class="token keyword">let</span> jsonObject <span class="token operator">=</span>
        jsonProperty
        <span class="token operator">|></span> <span class="token function">manyContained</span>
            <span class="token punctuation">(</span>skipChar <span class="token string">'{'</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>
            <span class="token punctuation">(</span>skipChar <span class="token string">'}'</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>
            <span class="token punctuation">(</span>skipChar <span class="token string">','</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>
        <span class="token operator">|></span><span class="token operator">></span> Map<span class="token punctuation">.</span>ofList
        <span class="token operator">|></span><span class="token operator">></span> JsonObject
</code></pre>
<p>Finally, now that we have parsers for all types of nodes defined, we can actually implement <code>jsonNode</code> using its reference we've obtained earlier:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> JsonGrammar <span class="token operator">=</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">do</span> jsonNodeRef <span class="token operator">:=</span>
        choice <span class="token punctuation">[</span>
            jsonObject
            jsonArray
            jsonLiteral
        <span class="token punctuation">]</span>
</code></pre>
<p>Tada! Our parser is technically complete. To test it out, we can use the <code>run</code> function to evaluate a parser on a string:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token annotation"><span class="token punctuation">[&#x3C;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>
<span class="token keyword">let</span> main _ <span class="token operator">=</span>
    run jsonNode <span class="token string">"{ \"arr\": [1, 3.14, false, null] }"</span> <span class="token operator">|></span> printfn <span class="token string">"%O"</span>
    <span class="token number">0</span>

<span class="token comment">// Prints:</span>
Success<span class="token punctuation">:</span> <span class="token class-name">JsonObject</span>
  <span class="token punctuation">(</span>map
     <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"arr"</span><span class="token punctuation">,</span>
       JsonArray <span class="token punctuation">[</span>JsonNumber <span class="token number">1.0</span><span class="token punctuation">;</span> JsonNumber <span class="token number">3.14</span><span class="token punctuation">;</span> JsonBool <span class="token keyword">false</span><span class="token punctuation">;</span> JsonNull<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>Of course, a JSON processor isn't very useful if it doesn't have any means for querying data. To that end, let's create another module and add some business logic:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">namespace</span> MyJsonProcessor

<span class="token comment">// ...</span>

<span class="token keyword">module</span> Json <span class="token operator">=</span>

    <span class="token keyword">open</span> FParsec

    <span class="token doc-comment comment">/// Tries to parse a string as a JSON node.</span>
    <span class="token keyword">let</span> tryParse source <span class="token operator">=</span>
        <span class="token comment">// Discard leading whitespace and ensure the parser reaches end of stream</span>
        <span class="token keyword">let</span> jsonNodeFull <span class="token operator">=</span> spaces <span class="token operator">>></span><span class="token punctuation">.</span> JsonGrammar<span class="token punctuation">.</span>jsonNode <span class="token punctuation">.</span><span class="token operator">>></span> eof

        <span class="token comment">// Run parser and convert FParsec's result to F#'s standard result</span>
        <span class="token keyword">match</span> run jsonNodeFull source <span class="token keyword">with</span>
        <span class="token operator">|</span> <span class="token function">Success</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">-></span> Result<span class="token punctuation">.</span>Ok res
        <span class="token operator">|</span> <span class="token function">Failure</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">-></span> Result<span class="token punctuation">.</span>Error err

    <span class="token doc-comment comment">/// Tries to extract a boolean value from a node.</span>
    <span class="token keyword">let</span> <span class="token function">tryBool</span> <span class="token punctuation">(</span>node <span class="token punctuation">:</span> <span class="token class-name">JsonNode</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token keyword">match</span> node <span class="token keyword">with</span>
        <span class="token operator">|</span> JsonBool b <span class="token operator">-></span> Some b
        <span class="token operator">|</span> _ <span class="token operator">-></span> None

    <span class="token doc-comment comment">/// Tries to extract a string value from a node.</span>
    <span class="token keyword">let</span> <span class="token function">tryString</span> <span class="token punctuation">(</span>node <span class="token punctuation">:</span> <span class="token class-name">JsonNode</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token keyword">match</span> node <span class="token keyword">with</span>
        <span class="token operator">|</span> JsonString s <span class="token operator">-></span> Some s
        <span class="token operator">|</span> _ <span class="token operator">-></span> None

    <span class="token doc-comment comment">/// Tries to extract a float value from a node.</span>
    <span class="token keyword">let</span> <span class="token function">tryFloat</span> <span class="token punctuation">(</span>node <span class="token punctuation">:</span> <span class="token class-name">JsonNode</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token keyword">match</span> node <span class="token keyword">with</span>
        <span class="token operator">|</span> JsonNumber n <span class="token operator">-></span> Some n
        <span class="token operator">|</span> _ <span class="token operator">-></span> None

    <span class="token doc-comment comment">/// Tries to extract an int value from a node.</span>
    <span class="token keyword">let</span> <span class="token function">tryInt</span> <span class="token punctuation">(</span>node <span class="token punctuation">:</span> <span class="token class-name">JsonNode</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        node <span class="token operator">|></span> tryFloat <span class="token operator">|></span> Option<span class="token punctuation">.</span>map int

    <span class="token doc-comment comment">/// Tries to get an item by its index.</span>
    <span class="token keyword">let</span> <span class="token function">tryItem</span> <span class="token punctuation">(</span>i <span class="token punctuation">:</span> <span class="token class-name">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>node <span class="token punctuation">:</span> <span class="token class-name">JsonNode</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token keyword">match</span> node <span class="token keyword">with</span>
        <span class="token operator">|</span> JsonArray a <span class="token operator">-></span> a <span class="token operator">|></span> List<span class="token punctuation">.</span>tryItem i
        <span class="token operator">|</span> _ <span class="token operator">-></span> None

    <span class="token doc-comment comment">/// Tries to get a child node by its name.</span>
    <span class="token keyword">let</span> <span class="token function">tryChild</span> <span class="token punctuation">(</span>name <span class="token punctuation">:</span> <span class="token class-name">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>node <span class="token punctuation">:</span> <span class="token class-name">JsonNode</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        <span class="token keyword">match</span> node <span class="token keyword">with</span>
        <span class="token operator">|</span> JsonObject o <span class="token operator">-></span> o <span class="token operator">|></span> Map<span class="token punctuation">.</span>tryFind name
        <span class="token operator">|</span> _ <span class="token operator">-></span> None
</code></pre>
<p>By defining our own <code>tryParse</code> function, we hide FParsec's API behind a layer of abstraction so that our library is slightly easier to use. We also wrap the original <code>jsonNode</code> in a parser that will discard leading whitespace and ensure that the end of the stream has been reached -- the latter is important because we don't want to only partially parse the input.</p>
<p>Functions <code>tryBool</code>, <code>tryString</code>, <code>tryFloat</code>, <code>tryInt</code> make it easier to extract values without having to do pattern matching yourself. To make it simpler to work with objects and arrays, there's also <code>tryChild</code> which will get an object child by its name and <code>tryItem</code> which will get an array item by its index.</p>
<p>Let's put it all together and test it on some real input:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token annotation"><span class="token punctuation">[&#x3C;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>
<span class="token keyword">let</span> main _ <span class="token operator">=</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"""
    {
        "quiz": {
            "sport": {
                "q1": {
                    "question": "Which one is correct team name in NBA?",
                    "options": [
                        "New York Bulls",
                        "Los Angeles Kings",
                        "Golden State Warriors",
                        "Huston Rocket"
                    ],
                    "answer": "Huston Rocket"
                }
            },
            "math": {
                "q1": {
                    "question": "5 + 7 = ?",
                    "options": [
                        "10",
                        "11",
                        "12",
                        "13"
                    ],
                    "answer": "12"
                },
                "q2": {
                    "question": "12 - 8 = ?",
                    "options": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "answer": 4
                }
            }
        }
    }
    """</span>

    <span class="token comment">// Get the value of quiz.sport.q1.options[2]</span>
    <span class="token keyword">match</span> Json<span class="token punctuation">.</span>tryParse str <span class="token keyword">with</span>
        <span class="token operator">|</span> Ok result <span class="token operator">-></span>
            result
            <span class="token operator">|></span> Json<span class="token punctuation">.</span>tryChild <span class="token string">"quiz"</span>
            <span class="token operator">|></span> Option<span class="token punctuation">.</span><span class="token function">bind</span> <span class="token punctuation">(</span>Json<span class="token punctuation">.</span>tryChild <span class="token string">"sport"</span><span class="token punctuation">)</span>
            <span class="token operator">|></span> Option<span class="token punctuation">.</span><span class="token function">bind</span> <span class="token punctuation">(</span>Json<span class="token punctuation">.</span>tryChild <span class="token string">"q1"</span><span class="token punctuation">)</span>
            <span class="token operator">|></span> Option<span class="token punctuation">.</span><span class="token function">bind</span> <span class="token punctuation">(</span>Json<span class="token punctuation">.</span>tryChild <span class="token string">"options"</span><span class="token punctuation">)</span>
            <span class="token operator">|></span> Option<span class="token punctuation">.</span><span class="token function">bind</span> <span class="token punctuation">(</span>Json<span class="token punctuation">.</span>tryItem <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token operator">|></span> Option<span class="token punctuation">.</span><span class="token function">bind</span> <span class="token punctuation">(</span>Json<span class="token punctuation">.</span>tryString<span class="token punctuation">)</span>
            <span class="token operator">|></span> Option<span class="token punctuation">.</span><span class="token function">iter</span> <span class="token punctuation">(</span>printfn <span class="token string">"Value: %s"</span><span class="token punctuation">)</span>
            <span class="token number">0</span>
        <span class="token operator">|</span> Error err <span class="token operator">-></span>
            printfn <span class="token string">"Parsing failed: %s"</span> err
            <span class="token number">1</span>
</code></pre>
<p>Once we run this piece of code, we should see <code>Value: Golden State Warriors</code>. Awesome, we've verified that our parser works and made a pretty simple but useful API around it.</p>
<p><em>The finished project is also available as a gist <a href="https://gist.github.com/Tyrrrz/eb68660903c9c6e4dd231eeee20113a4">here</a>.</em></p>
<h2>Wait, but where are the monads?</h2>
<p>If you've come here after my previous article or were otherwise expecting to see monads here, you might be a bit surprised that there were none so far. This is because the combinators FParsec provides out of the box are so powerful you very rarely need to resort to it.</p>
<p>We could have, for example, defined our JSON array parser from earlier like this instead:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> jsonArray <span class="token operator">=</span> <span class="token computation-expression keyword">parse</span> <span class="token punctuation">{</span>
    <span class="token comment">// [</span>
    <span class="token keyword">do</span><span class="token operator">!</span> skipChar <span class="token string">'['</span>
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token comment">// ...</span>
    <span class="token keyword">let!</span> items <span class="token operator">=</span> sepBy jsonNode <span class="token operator">&#x3C;|</span> <span class="token punctuation">(</span>skipChar <span class="token string">','</span> <span class="token punctuation">.</span><span class="token operator">>></span> spaces<span class="token punctuation">)</span>

    <span class="token comment">// ]</span>
    <span class="token keyword">do</span><span class="token operator">!</span> skipChar <span class="token string">']'</span>
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token keyword">return</span> JsonArray items
<span class="token punctuation">}</span>
</code></pre>
<p>The <code>parse</code> computation expression allows us to chain sequential parsers in a more imperative way. Under the hood it also uses the bind operator (<code>>>=</code>) but provides a slightly cleaner syntax when dealing with a lot of parsers. If you've used monads in C#, this is similar to LINQ comprehension syntax but way more powerful.</p>
<p>Stephan Tolksdorf, author of FParsec, discourages the use of this syntax <a href="https://quanttec.com/fparsec/users-guide/where-is-the-monad.html">in the documentation</a> because it's rarely called for and may negatively impact performance.</p>
<p>That said, some grammar rules are easier to express using this syntax. For example, let's say we were parsing an HTML element and needed to match a closing tag that has the same name as the opening tag:</p>
<pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> htmlElement <span class="token operator">=</span> <span class="token computation-expression keyword">parse</span> <span class="token punctuation">{</span>
    <span class="token comment">// &#x3C;div ...></span>
    <span class="token keyword">do</span><span class="token operator">!</span> skipChar <span class="token string">'&#x3C;'</span>
    <span class="token keyword">let!</span> tagName <span class="token operator">=</span> <span class="token function">manyChars</span> <span class="token punctuation">(</span>letter <span class="token operator">&#x3C;|></span> digit<span class="token punctuation">)</span>
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token keyword">let!</span> attributes <span class="token operator">=</span> many attribute
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token keyword">do</span><span class="token operator">!</span> skipChar <span class="token string">'>'</span>
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token comment">// ...</span>
    <span class="token keyword">let!</span> children <span class="token operator">=</span> many elementChild

    <span class="token comment">// &#x3C;/div></span>
    <span class="token keyword">do</span><span class="token operator">!</span> skipString <span class="token string">"&#x3C;/"</span>
    <span class="token keyword">do</span><span class="token operator">!</span> skipString tagName <span class="token comment">// use the result of the earlier parser</span>
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token keyword">do</span><span class="token operator">!</span> skipChar <span class="token string">'>'</span>
    <span class="token keyword">do</span><span class="token operator">!</span> spaces

    <span class="token keyword">return</span> <span class="token function">HtmlElement</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> children<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Writing the same thing using binds may not be as pleasant.</p>
<h2>Summary</h2>
<p>FParsec is an incredibly robust framework for building parsers with the combinatorial approach. With some careful fine-tuning, parsers written with this library may even outperform traditional hand-rolled parsers. If you're using .NET and want to build a text processor, compiler, or a DSL interpreter -- FParsec is likely a no-brainer.</p>
<p>Should you ever get stuck, I recommend reading the <a href="https://quanttec.com/fparsec/reference/parser-overview.html">API reference</a> and the <a href="https://quanttec.com/fparsec/users-guide">user guide</a>.</p>
<p>In case you're curious to see some other examples of FParsec in action, check out <a href="https://github.com/stephan-tolksdorf/fparsec/tree/master/Samples">the official samples</a>. There are also some open source projects that depend on this library, like <a href="https://github.com/chkimes/graphql-net">GraphQL.NET</a>, <a href="https://github.com/microsoft/qsharp-compiler">QSharp Compiler</a>, and <a href="https://github.com/Tyrrrz/LtGt">LtGt</a>.</p>
<p>Other articles about FParsec: <a href="https://codefornerds.com/better-parsing-with-fsharp-and-fparsec-getting-started">by Jake Witcher</a>, <a href="https://trelford.com/blog/post/FParsec.aspx">by Phillip Trelford</a>, <a href="https://blog.tamizhvendan.in/blog/2015/01/18/step-5-advanced-search-dsl-using-fparsec">by Tamizh Vendan</a>.</p>]]></description><link>http://localhost:3000/blog/parsing-with-fparsec</link><guid isPermaLink="false">http://localhost:3000/blog/parsing-with-fparsec</guid><category><![CDATA[dotnet]]></category><category><![CDATA[fsharp]]></category><category><![CDATA[parsing]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sat, 04 Jan 2020 00:00:00 GMT</pubDate></item><item><title><![CDATA[Monadic Parser Combinators in C#]]></title><description><![CDATA[<p>The concept of parsing has always seemed very complicated to me. I thought that to work in this area you had to have access to some secret knowledge brought by an alien race or something along those lines.</p>
<p>A while ago I had to implement proper markdown parsing in <a href="https://github.com/Tyrrrz/DiscordChatExporter">DiscordChatExporter</a> so that I could replace the ineffective regular expressions I had been using. I had no idea how to approach this problem, so I spent days researching into this, eventually learning about parser combinators. This concept introduced me to a whole new paradigm of writing parsers that actually makes it a fun and enjoyable experience.</p>
<p>In this article I will try to give a brief high-level overview of what is a parser and what constitutes a formal language, then scope into parser combinators to show how easy it is to build parsers with it. We will also write a working JSON processor as an exercise.</p>
<h2>What is a parser</h2>
<p>I'm sure for most people the word "parser" isn't new. We are "parsing" things all the time after all, either directly through the likes of <code>int.Parse</code> and <code>XElement.Parse</code>, or indirectly when deserializing HTTP responses, reading application settings, etc.</p>
<p>But what is a parser in a general sense of the word?</p>
<p>As humans, we are gifted with a lot of innate abilities, one of which is the ability to subconsciously deconstruct text into logical components. This is quite an important skill because it lets us detect patterns, analyze semantics, and compare different snippets of text with each other.</p>
<p>For instance, do you see some sort of logical structure when you look at <code>123 456.97</code>? You can easily tell that it's a number made out of several components:</p>
<ul>
<li>Digits (<code>123</code>)</li>
<li>Thousands separator (space)</li>
<li>Digits (<code>456</code>)</li>
<li>Decimal separator (<code>.</code>)</li>
<li>Digits (<code>97</code>)</li>
</ul>
<p>For obvious reasons, a computer can't inherently detect patterns like that. After all, it only sees a seemingly random sequence of bytes: <code>31 32 33 20 34 35 36 2E 39 37</code>.</p>
<p>As we're dealing with text, we need some way to analyze it. To do that, we essentially need to programmatically produce the same set of syntactic components that we are able to see naturally:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SyntacticComponents<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumericLiteralComponent</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThousandsSeparatorComponent</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumericLiteralComponent</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DecimalSeparatorComponent</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumericLiteralComponent</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This is what parsers do. They take an input, usually in the form of text, and formalize it using domain objects. In case of an invalid input, a parser rejects it with an informative error message.</p>
<pre class="language-ini"><code class="language-ini"><span class="token selector">[Input]</span> ------ (Parser)
               /      \
            ✓ /        \ X
             /          \
<span class="token selector">    [Domain objects]</span><span class="token selector">  [Error message]</span>
</code></pre>
<p>Of course, it's a fairly basic example, there are much more complicated languages and inputs out there. But generally speaking, we can say that a parser is a piece of code that can help build syntactic structure of input text, effectively helping the computer "understand" it.</p>
<p>Whether an input is considered valid or not is decided by a set of grammar rules that effectively define the structure of the language.</p>
<h2>Formal grammar</h2>
<p>Parsing numbers isn't rocket science and you wouldn't be reading this article if that was what you were after. Everyone can write a quick regular expression to split text like that into syntactic components.</p>
<p>Speaking of regular expressions, do you know why is it that they are called <em>regular</em>?</p>
<p>There's an area in computer science called <em>the formal language theory</em> that specifically deals with languages. Essentially, it's a set of abstractions that help us understand languages from a more formal standpoint.</p>
<p>A formal language itself builds mainly upon the concept of grammar, which is a set of rules that dictate how to produce valid symbols in a given language. When we talk about valid and invalid inputs, we refer to grammar.</p>
<p>Based on the complexity of these rules, grammars are separated into different types according to the <a href="https://en.wikipedia.org/wiki/Chomsky_hierarchy">Chomsky hierarchy</a>. At the lowest level you will find the two most common grammar types, the <em>regular</em> and <em>context-free</em> grammars.</p>
<pre class="language-r"><code class="language-r"><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span>                                 <span class="token operator">|</span>
<span class="token operator">|</span>      CONTEXT<span class="token operator">-</span>FREE GRAMMARS      <span class="token operator">|</span>
<span class="token operator">|</span>                                 <span class="token operator">|</span>
<span class="token operator">|</span>                                 <span class="token operator">|</span>
<span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>
<span class="token operator">|</span>          <span class="token operator">|</span>                    <span class="token operator">|</span> <span class="token operator">|</span>
<span class="token operator">|</span>          <span class="token operator">|</span>  REGULAR GRAMMARS  <span class="token operator">|</span> <span class="token operator">|</span>
<span class="token operator">|</span>          <span class="token operator">|</span>                    <span class="token operator">|</span> <span class="token operator">|</span>
<span class="token operator">|</span>          <span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
</code></pre>
<p>The main difference between the two is that rules in regular grammar, unlike context-free, can't be recursive. A recursive grammar rule is one that produces a symbol that can be further evaluated by the same rule.</p>
<p>HTML is a good example of a context-free language, because an element in HTML can contain other elements, which in turn can contain other elements, and so on. This is also why it inherently <a href="https://stackoverflow.com/a/1732454/2205454">can't be parsed using regular expressions</a>.</p>
<p>As a result, while an input that adheres to a regular grammar can be represented using a sequence of syntactic components, context-free grammar is represented using a higher-level structure -- a syntax tree:</p>
<pre class="language-html"><code class="language-html">       [ HTML document ]
          |        \
          |         \
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>
        /     \        \
     <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>footer</span><span class="token punctuation">></span></span>   \
      /         |        \
   <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>
</code></pre>
<p>So if we can't use regular expressions to build these syntax trees, what should we do?</p>
<h2>Parser combinators</h2>
<p>There are many approaches for writing parsers for context-free languages. Most language tools you know are built with either manual loop-stack parsers, parser generator frameworks, or parser combinators.</p>
<p>Parser combinators, as a concept, revolves around representing each parser as a modular function that takes on some input and produces either a successful result or an error:</p>
<pre class="language-js"><code class="language-js"><span class="token function">f</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> inputRemainder<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>
</code></pre>
<p>These parsers can be transformed or combined to form more complex parsers by wrapping the function in another function. Generally speaking, combinators are just another class of functions that take other parser functions and produce more intricate ones.</p>
<pre class="language-js"><code class="language-js"><span class="token constant">F</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">g</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
</code></pre>
<p>The idea is to start by writing parsers for the simplest grammar rules in your language and then gradually move up the hierarchy using different combinators. By going up level by level, you should eventually reach the top-most node that represents the so-called start symbol.</p>
<p>That might be too abstract to understand so how about we look at a practical example?</p>
<h2>JSON processor using parser combinators</h2>
<p>To better understand this approach, let's write a functional JSON parser using C# and a library called <a href="https://github.com/sprache/Sprache">Sprache</a>. This library provides a set of base low-level parsers and methods to combine them, which are essentially building blocks that we can use to make our own complex parsers.</p>
<p>To start off, I created a project and defined classes that represent different entities in JSON grammar, 6 of them in total:</p>
<ul>
<li><code>JsonObject</code></li>
<li><code>JsonArray</code></li>
<li><code>JsonString</code></li>
<li><code>JsonNumber</code></li>
<li><code>JsonBoolean</code></li>
<li><code>JsonNull</code></li>
</ul>
<p>Here is the corresponding code for them, condensed into one snippet for brevity:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Abstract entity that acts as a base class for all data types in JSON</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JsonEntity</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">JsonEntity</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">]</span> <span class="token operator">=></span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> doesn't support this operation."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">JsonEntity</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span> <span class="token operator">=></span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> doesn't support this operation."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> doesn't support this operation."</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">JsonEntity</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> json<span class="token punctuation">)</span> <span class="token operator">=></span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token string">"Not implemented yet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// { "property": "value" }</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonObject</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyDictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> JsonEntity<span class="token punctuation">></span></span> Properties <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">JsonObject</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyDictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> JsonEntity<span class="token punctuation">></span></span> properties<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonEntity</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">]</span> <span class="token operator">=></span>
        Properties<span class="token punctuation">.</span>TryGetValue<span class="token class-name"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> result<span class="token punctuation">)</span> <span class="token punctuation">?</span></span> result <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// [ 1, 2, 3 ]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonArray</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>JsonEntity<span class="token punctuation">></span></span> Children <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">JsonArray</span><span class="token punctuation">(</span><span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>JsonEntity<span class="token punctuation">></span></span> children<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Children <span class="token operator">=</span> children<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonEntity</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name"><span class="token keyword">int</span></span> index<span class="token punctuation">]</span> <span class="token operator">=></span> Children<span class="token punctuation">.</span><span class="token function">ElementAtOrDefault</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Abstract literal</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JsonLiteral<span class="token punctuation">&#x3C;</span>TValue<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonEntity</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TValue</span> Value <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token function">JsonLiteral</span><span class="token punctuation">(</span><span class="token class-name">TValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Convert<span class="token punctuation">.</span><span class="token function">ChangeType</span><span class="token punctuation">(</span>Value<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// "foo bar"</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonString</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonLiteral<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">JsonString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 12345</span>
<span class="token comment">// 123.45</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonNumber</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonLiteral<span class="token punctuation">&#x3C;</span><span class="token keyword">double</span><span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">JsonNumber</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// true</span>
<span class="token comment">// false</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonBoolean</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonLiteral<span class="token punctuation">&#x3C;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">JsonBoolean</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// null</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonNull</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">JsonLiteral<span class="token punctuation">&#x3C;</span><span class="token keyword">object</span><span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">JsonNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>You can see that all of our JSON types inherit from <code>JsonEntity</code> class which defines a few virtual methods. These methods throw an exception by default, but they are overridden with proper implementation on types that support them.</p>
<p>Using <code>JsonEntity.Parse</code> you are able to convert a piece of JSON text into our domain objects and traverse the whole hierarchy using indexers:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> price <span class="token operator">=</span> JsonEntity<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"order"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span><span class="token keyword">double</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Now, of course that won't work just yet because our <code>Parse</code> method isn't implemented. Let's fix that.</p>
<p>Start by downloading the Sprache library from NuGet, then create a new internal static class named <code>JsonGrammar</code>. This is where we will define the grammar for our language:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As I've explained above, this approach is all about building simple independent parsers first and slowly working your way up the hierarchy. For that reason it makes sense to start with the simplest entity there is, <code>JsonNull</code>, which can only have one value:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonNull<span class="token punctuation">></span></span> JsonNull <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Let's quickly look into what we've just wrote here.</p>
<p>On the right hand side of the equals sign, we are calling <code>Parse.String</code> to create a basic parser that will look for a sequence of characters that make up the string "null". This method produces a delegate of type <code>Parser&#x3C;IEnumerable&#x3C;char>></code>, but since we're not particularly interested in the sequence of characters itself, we chain it with <code>Return</code> extension method that lets us specify a concrete object to return instead. Doing this also changes the delegate type to <code>Parser&#x3C;JsonNull></code>.</p>
<p>It's worth noting that as we write this, no parsing actually happens just yet. We are only building a delegate that can be later invoked to parse a particular input.</p>
<p>If we call <code>JsonNull.Parse("null")</code> it will return an object of type <code>JsonNull</code>. If we try to call it on any other input, it will throw an exception with a detailed error.</p>
<p>That's pretty cool, although not particularly useful yet.</p>
<p>Let's move on to <code>JsonBoolean</code>. This type, unlike <code>JsonNull</code> actually has two potential states, <code>true</code> and <code>false</code>. We can handle them with two separate parsers:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonBoolean<span class="token punctuation">></span></span> TrueJsonBoolean <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonBoolean<span class="token punctuation">></span></span> FalseJsonBoolean <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This works very similarly to the previous parser we wrote, except now we have two different parsers for one entity.</p>
<p>As you've probably guessed, that's where combinators come into play. We can merge these two parsers into one using an <code>Or</code> combinator like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonBoolean<span class="token punctuation">></span></span> TrueJsonBoolean <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonBoolean<span class="token punctuation">></span></span> FalseJsonBoolean <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonBoolean<span class="token punctuation">></span></span> JsonBoolean <span class="token operator">=</span>
        TrueJsonBoolean<span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>FalseJsonBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The <code>Or</code> combinator is an extension method that takes two parsers of the same type and produces a new parser that succeeds if either one of them succeeds. That means if we try to call <code>JsonBoolean.Parse("true")</code> we will get <code>JsonBoolean</code> which has <code>Value</code> equal to <code>true</code>. Similarly, if we call <code>JsonBoolean.Parse("false")</code> we will get a <code>JsonBoolean</code> whose <code>Value</code> is <code>false</code>. And, of course, any unexpected input will result in an error.</p>
<p>One of the coolest things about using parser combinators is how expressive your code is. It can be read quite literally, in fact:</p>
<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">JsonBoolean</span> is either <span class="token maybe-class-name">TrueJsonBoolean</span> or <span class="token maybe-class-name">FalseJsonBoolean</span><span class="token punctuation">.</span>
<span class="token property-access"><span class="token maybe-class-name">TrueJsonBoolean</span></span> is a string <span class="token string">"true"</span> which produces a <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JsonBoolean</span><span class="token template-punctuation string">`</span></span> whose value is <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">true</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span>
<span class="token property-access"><span class="token maybe-class-name">FalseJsonBoolean</span></span> is a string <span class="token string">"false"</span> which produces a <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">JsonBoolean</span><span class="token template-punctuation string">`</span></span> whose value is <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span>
</code></pre>
<p>Reading code like this makes it really easy to infer the structure of the text we're trying to parse.</p>
<p>Let's handle our next data type, <code>JsonNumber</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonNumber<span class="token punctuation">></span></span> JsonNumber <span class="token operator">=</span>
        Parse<span class="token punctuation">.</span>DecimalInvariant
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=></span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>v <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonNumber</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, Sprache already provides <code>Parse.DecimalInvariant</code> out of the box, which we can use to match a number. Since that returns <code>Parser&#x3C;string></code> as it parses the text that represents the number, we need to transform it to <code>double</code> first and then to our <code>JsonNumber</code> object.</p>
<p>The <code>Select</code> method here works quite similarly to LINQ's <code>Select</code> -- it lazily transforms the underlying value of the container into a different shape. This lets us map raw character sequences into more complex higher-level domain objects.</p>
<p>By the way, types that have a <code>Select</code> operation (or more colloquially known, "map" operation) are called "functors". As you can see, they are not limited to collections (i.e. <code>IEnumerable&#x3C;T></code>) but can also be containers with a single value, just like our <code>Parser&#x3C;T></code> here.</p>
<p>With that out of the way, let's proceed to <code>JsonString</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonString<span class="token punctuation">></span></span> JsonString <span class="token operator">=</span>
        <span class="token keyword">from</span> open <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'"'</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> <span class="token keyword">value</span> <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">CharExcept</span><span class="token punctuation">(</span><span class="token string character">'"'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Many</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> close <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'"'</span><span class="token punctuation">)</span>
        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonString</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Here you can see how we combined three consecutive parsers into one with the use of LINQ comprehension syntax. You are probably familiar with this syntax from working with collections, but it's a bit different here.</p>
<p>Each line beginning with <code>from</code> represents a separate parser that produces a value. We specify the name for the value on the left and define the actual parser on the right. To reduce the parameters to a single result, we terminate with a <code>select</code> statement that constructs the object we want.</p>
<p>This works because chaining <code>from</code> statements internally calls <code>SelectMany</code> extension method, which the author of this library defined to work with <code>Parser&#x3C;T></code>.</p>
<p>Oh, and the types that let you do that with <code>SelectMany</code> (also known as "flat map") are what we call "monads".</p>
<p>The parser we just wrote will try to match a double quote, followed by a (possibly empty) sequence of characters that doesn't contain a double quote, terminated by another double quote, ultimately returning a <code>JsonString</code> object with the text inside.</p>
<p>Moving on to our first non-primitive type, <code>JsonArray</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonArray<span class="token punctuation">></span></span> JsonArray <span class="token operator">=</span>
        <span class="token keyword">from</span> open <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'['</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> children <span class="token keyword">in</span> JsonEntity<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DelimitedBy</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> close <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">']'</span><span class="token punctuation">)</span>
        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonArray</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Structurally, a JSON array is just a sequence of entities separated by commas, contained within a pair of square brackets. We can define that using the <code>DelimitedBy</code> combinator which tries to match the first parser repeatedly separated by the second one.</p>
<p>Notice how this combinator takes <code>Parse.Char(',')</code> instead of simply <code>','</code>. We could actually have used a more complicated parser in its place, one that doesn't even return a <code>char</code> or <code>string</code>. This is the power of parser combinators -- as we're gradually moving up the structure of our data, we're working with parsers of increasingly higher order.</p>
<p>If you've followed the steps here closely, you probably noticed that the code above doesn't actually compile. That's because we're referencing <code>JsonEntity</code> which is a parser that we haven't defined yet. This is because this grammar rule is recursive -- an array can contain any entity, which can be, among other things, an array as well, which can contain any entity, which can be an array, which... you get the point.</p>
<p>As a temporary solution, we can define a dummy in place of <code>JsonEntity</code>, just to make it compile:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonArray<span class="token punctuation">></span></span> JsonArray <span class="token operator">=</span>
        <span class="token keyword">from</span> open <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'['</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> children <span class="token keyword">in</span> JsonEntity<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DelimitedBy</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> close <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">']'</span><span class="token punctuation">)</span>
        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonArray</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonEntity<span class="token punctuation">></span></span> JsonEntity <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Also, notice the <code>Token()</code> extension method? This wraps our parser in a higher-order parser that consumes all whitespace immediately around our input. As we know, JSON ignores whitespace unless it's within double quotes, so we need to account for that. If we don't do that, our parser will return an error when it encounters whitespace.</p>
<p>Parsing <code>JsonObject</code> is very similar, except it contains properties instead of raw entities. So we'll have to start with a parser for that first:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>KeyValuePair<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> JsonEntity<span class="token punctuation">></span><span class="token punctuation">></span></span> JsonProperty <span class="token operator">=</span>
        <span class="token keyword">from</span> name <span class="token keyword">in</span> JsonString<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
        <span class="token keyword">from</span> colon <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">':'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> <span class="token keyword">value</span> <span class="token keyword">in</span> JsonEntity
        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&#x3C;</span><span class="token keyword">string</span><span class="token punctuation">,</span> JsonEntity<span class="token punctuation">></span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonObject<span class="token punctuation">></span></span> JsonObject <span class="token operator">=</span>
        <span class="token keyword">from</span> open <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'{'</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> properties <span class="token keyword">in</span> JsonProperty<span class="token punctuation">.</span><span class="token function">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DelimitedBy</span><span class="token punctuation">(</span>Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">from</span> close <span class="token keyword">in</span> Parse<span class="token punctuation">.</span><span class="token function">Char</span><span class="token punctuation">(</span><span class="token string character">'}'</span><span class="token punctuation">)</span>
        <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonObject</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">ToDictionary</span><span class="token punctuation">(</span>p <span class="token operator">=></span> p<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> p <span class="token operator">=></span> p<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Since our model implements <code>JsonObject</code> using a dictionary, an individual property is expressed using <code>KeyValuePair&#x3C;string, JsonEntity></code>, that is the name of the property (<code>string</code>) and its value (<code>JsonEntity</code>).</p>
<p>As you can see, we used LINQ comprehension syntax again to combine sequential parsers. A <code>JsonProperty</code> is made out of a <code>JsonString</code> for the name, a colon, and a <code>JsonEntity</code> which denotes its value. We use <code>Select()</code> on <code>JsonString</code> to lazily extract only the raw <code>string</code> value, as we're not interested in the object itself.</p>
<p>For the <code>JsonObject</code> parser, we pretty much wrote the same code as we did for <code>JsonArray</code>, replacing square brackets with curly braces and <code>JsonEntity</code> with <code>JsonProperty</code>.</p>
<p>Finally, having finished with each individual entity type, we can properly define <code>JsonEntity</code> by combining the parsers we wrote earlier:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JsonGrammar</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Parser<span class="token punctuation">&#x3C;</span>JsonEntity<span class="token punctuation">></span></span> JsonEntity <span class="token operator">=</span>
        JsonObject
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Or</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>JsonEntity<span class="token punctuation">></span></span></span><span class="token punctuation">(</span>JsonArray<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>JsonString<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>JsonNumber<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>JsonBoolean<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Or</span><span class="token punctuation">(</span>JsonNull<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And update the static method we have on <code>JsonEntity</code> class itself so that it calls the corresponding parser:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JsonEntity</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">JsonEntity</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> json<span class="token punctuation">)</span> <span class="token operator">=></span> JsonGrammar<span class="token punctuation">.</span>JsonEntity<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>That's it, we have a working JSON processor! We can now call <code>JsonEntity.Parse</code> on any valid JSON text and transform it into our domain, i.e. a tree of <code>JsonEntity</code> objects.</p>
<h2>Wrapping up</h2>
<p>Parsing doesn't have to be a daunting and unapproachable task. Functional programming helps us model complex grammar as a composition of smaller functions which are fairly easy to reason about. And luckily we can do it in C# as well!</p>
<p>If you're still thirsty for knowledge and want to see a slightly more complex example, check out <a href="https://github.com/Tyrrrz/LtGt/tree/csharp-sprache">LtGt</a>, an HTML processor (with CSS selectors!) that I've originally written using Sprache.</p>
<p>Should you wish to learn more about parsing in general, I recommend reading <a href="https://tomassetti.me/parsing-in-csharp">"Parsing in C#"</a>, an article by Gabriele Tomassetti.</p>
<p>There are also other monadic parser combinator libraries in .NET that you can check out, most notably <a href="https://github.com/datalust/superpower">Superpower</a>, <a href="https://github.com/benjamin-hodgson/Pidgin">Pidgin</a>, <a href="https://github.com/plioi/parsley">Parsley</a>, and <a href="https://github.com/stephan-tolksdorf/fparsec">FParsec (F#)</a>.</p>
<p>This article is largely based on my talk from .NET Fest 2019, "Monadic parser combinators in C#". You can find the original presentation and full source code for the JSON parser <a href="https://github.com/Tyrrrz/DotNetFest2019">here</a>.</p>]]></description><link>http://localhost:3000/blog/monadic-parser-combinators</link><guid isPermaLink="false">http://localhost:3000/blog/monadic-parser-combinators</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><category><![CDATA[parsing]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sun, 10 Nov 2019 00:00:00 GMT</pubDate></item><item><title><![CDATA[Creative Use of Extension Methods]]></title><description><![CDATA[<p>I'm sure everyone with at least some background in C# is aware of extension methods -- a nice feature that lets developers extend existing types with new methods.</p>
<p>This is extremely convenient in cases where you want to add functionality to types you don't have control over. In fact, I think everyone at some point authored extensions for the base class library just to make some things more accessible.</p>
<p>But besides the more obvious use cases, there are a few other interesting patterns that directly rely on extension methods, showing how they can used in a slightly less conventional way.</p>
<h2>Adding methods to enums</h2>
<p>An enum is simply a set of constant numeric values with names uniquely assigned to them. Even though all enums in C# inherit from the <code>Enum</code> abstract class, they are not really treated as classes. This limitation, among other things, prevents them from having methods.</p>
<p>There are some cases where having logic on an enum may be helpful. One of those cases is where a value of an enum can have multiple different representations and you want to be able to easily convert to one of them.</p>
<p>For example, imagine the following type in a generic application that can save files in various formats:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">FileFormat</span>
<span class="token punctuation">{</span>
    PlainText<span class="token punctuation">,</span>
    OfficeWord<span class="token punctuation">,</span>
    Markdown
<span class="token punctuation">}</span>
</code></pre>
<p>This enum defines a list of formats the application supports and is probably used in various places in code to invoke branching logic depending on its value.</p>
<p>Since each file format can also be represented by its file extension, it would be nice if <code>FileFormat</code> contained a method to get it. This is where we can use an extension method to do it like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FileFormatExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFileExtension</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">FileFormat</span> self<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self <span class="token operator">==</span> FileFormat<span class="token punctuation">.</span>PlainText<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">"txt"</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>self <span class="token operator">==</span> FileFormat<span class="token punctuation">.</span>OfficeWord<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">"docx"</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>self <span class="token operator">==</span> FileFormat<span class="token punctuation">.</span>Markdown<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">"md"</span><span class="token punctuation">;</span>

        <span class="token comment">// This will be thrown if we add a new file format</span>
        <span class="token comment">// but forget to add corresponding file extension</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentOutOfRangeException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Which in turn allows us to do the following:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> format <span class="token operator">=</span> FileFormat<span class="token punctuation">.</span>Markdown<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> fileExt <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">GetFileExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "md"</span>
<span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"output.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fileExt</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">;</span> <span class="token comment">// "output.md"</span>
</code></pre>
<h2>Refactoring model classes</h2>
<p>There are cases where you may not want to add a method directly to a class, for example when it's an <a href="https://en.wikipedia.org/wiki/Anemic_domain_model">anemic model</a>.</p>
<p>Anemic models are typically represented by a set of public get-only immutable properties, so adding methods to a model class may make it look impure or may give off a suspicion that the methods are accessing some private state. Extension methods don't have that problem because they can't access model's private members and, by nature, aren't part of the model itself.</p>
<p>So consider this example of two models -- one represents a closed caption track for a video and another represents an individual caption:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClosedCaption</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Text that gets displayed</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// When it gets displayed relative to beginning of the track</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimeSpan</span> Offset <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// How long it stays on the screen</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimeSpan</span> Duration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">ClosedCaption</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> offset<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> duration<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Text <span class="token operator">=</span> text<span class="token punctuation">;</span>
        Offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>
        Duration <span class="token operator">=</span> duration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClosedCaptionTrack</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Language of the closed captions inside</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Language <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">// Collection of closed captions</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>ClosedCaption<span class="token punctuation">></span></span> Captions <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">ClosedCaptionTrack</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> language<span class="token punctuation">,</span> <span class="token class-name">IReadOnlyList<span class="token punctuation">&#x3C;</span>ClosedCaption<span class="token punctuation">></span></span> captions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Language <span class="token operator">=</span> language<span class="token punctuation">;</span>
        Captions <span class="token operator">=</span> captions<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In the current state, if someone wanted to get a closed caption displayed at specific point in time, they would have to run a LINQ like this one:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1:07</span>

<span class="token class-name"><span class="token keyword">var</span></span> caption <span class="token operator">=</span> track<span class="token punctuation">.</span>Captions
    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>cc <span class="token operator">=></span> cc<span class="token punctuation">.</span>Offset <span class="token operator">&#x3C;=</span> time <span class="token operator">&#x26;&#x26;</span> cc<span class="token punctuation">.</span>Offset <span class="token operator">+</span> cc<span class="token punctuation">.</span>Duration <span class="token operator">>=</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>This really calls for a helper method of some sorts which can be implemented either as a member method or an extension method. I personally prefer the latter.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClosedCaptionTrackExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">ClosedCaption</span> <span class="token function">GetByTime</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">ClosedCaptionTrack</span> self<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> time<span class="token punctuation">)</span> <span class="token operator">=></span>
        self<span class="token punctuation">.</span>Captions<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>cc <span class="token operator">=></span> cc<span class="token punctuation">.</span>Offset <span class="token operator">&#x3C;=</span> time <span class="token operator">&#x26;&#x26;</span> cc<span class="token punctuation">.</span>Offset <span class="token operator">+</span> cc<span class="token punctuation">.</span>Duration <span class="token operator">>=</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>An extension method here achieves the same thing as a normal method, but it provides a few subtle benefits:</p>
<ol>
<li>It's clear that this method only works with public members of the class and doesn't mutate its private state in some obscure way.</li>
<li>It's obvious that this method simply provides a shortcut and it's there only for convenience.</li>
<li>The method is part of an entirely separate class (or even assembly) which helps us separate data from logic.</li>
</ol>
<p>Overall, using an extension method approach here helps draw a line between what's <em>necessary</em> and what's <em>helpful</em>.</p>
<h2>Making interfaces more versatile</h2>
<p>When designing an interface you always want to keep the contract minimal in order to make it easier to implement. It helps a lot when your interface exposes the most generic type of functionality so that others (or you) can build on top of it and cover more specific cases.</p>
<p>If that didn't make any sense, here's an example of a typical interface that saves some model to a file:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IExportService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">FileInfo</span> <span class="token function">SaveToFile</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>It works just fine, but a few weeks later you come back to it with a new requirement -- classes implementing <code>IExportService</code>, on top of exporting to a file, should now also be able to write to memory.</p>
<p>So in order to satisfy that requirement, you add a new method to the contract:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IExportService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name">FileInfo</span> <span class="token function">SaveToFile</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">SaveToMemory</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This change just broke all existing implementations of <code>IExportService</code> because now all of them have to be updated to support writing to memory as well.</p>
<p>Instead of doing all that, we could have designed the initial version of the interface slightly differently:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IExportService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name">Stream</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>This way, the interface enforces writing to the most generic destination, a <code>Stream</code>. Now we are no longer limited to files and can target a variety of different outputs as well.</p>
<p>The only downside to this approach is that the more basic operations are not as straightforward as they used to be -- now you need to set up a concrete instance of a <code>Stream</code>, wrap it in a <code>using</code> statement, and pass it as a parameter.</p>
<p>Fortunately, this downside can be completely negated with the use of extension methods:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExportServiceExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">FileInfo</span> <span class="token function">SaveToFile</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IExportService</span> self<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> filePath<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> output <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            self<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">SaveToMemory</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IExportService</span> self<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            self<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>By refactoring the initial interface we've made it a lot more versatile and maintainable, and, thanks to extension methods, we didn't have to sacrifice usability in any way.</p>
<p>All in all, I think extension methods are an invaluable tool that can help us make <a href="https://en.wikiquote.org/wiki/Alan_Kay">simple things simple and complex things possible</a>.</p>]]></description><link>http://localhost:3000/blog/creative-use-of-extension-methods</link><guid isPermaLink="false">http://localhost:3000/blog/creative-use-of-extension-methods</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sat, 26 Jan 2019 00:00:00 GMT</pubDate></item><item><title><![CDATA[Planning My Life With Evernote]]></title><description><![CDATA[<p>I have always been trying to be a well-organized person, but for the most part I was doing it wrong. I was lacking in ability to plan and stay focused, which made it seem like I was productive, despite not having any tangible progress towards the goals that <em>really</em> matter.</p>
<p>It can be very difficult to stay on top of things and have a clearly defined path. I've struggled for some time to find an optimal routine that would not only help me get things done, but also get the <em>right</em> things done.</p>
<p>Through trying out many mediums and approaches -- from to-do apps to bullet journals -- I eventually developed a workflow that helps me separate planning from execution, in a way that lets me effectively focus on a smaller subset of tasks at a time. To implement it, I'm using Evernote which is a productivity app I like for the customizability it offers.</p>
<h2>The Evernote routine</h2>
<h3>Noting down</h3>
<p>Evernote is a general-purpose note-taking app which can serve as a more efficient replacement for classic physical notebooks. Every separate piece of information here is stored as a "note", each belonging to a specific notebook.</p>
<p>Since notes can only belong to one notebook, I decided to create a notebook for each "category" of my life. For example, I have "Softdev" for my personal software projects, "Travel" for trip planning, "Healthcare" for doctor appointments, and some other notebooks in the same vein. I also have "General" which is for everything that doesn't have its own category.</p>
<p><img src="http://localhost:3000/Notebooks.png" alt="My notebooks"></p>
<p>Whenever something comes up, I create a note and assign it to the corresponding category-notebook. If the note doesn't seem to match with anything -- I just put it in "General".</p>
<p>The note's title concisely explains what needs to be done or achieved, this way I can quickly remind myself what it is about.</p>
<p>Any extra information, details and context go inside the note itself. This is where Evernote's powerful text editor comes in handy to make a visually pleasing presentation.</p>
<p><img src="http://localhost:3000/Note-example.png" alt="An example of a note"></p>
<p>To make my notes even more informative at a glance, I make use of tags. They can be assigned to notes to organize them similarly to notebooks, except a note can have an unlimited number of tags.</p>
<p>Unlike notebooks, tags are used to categorize notes based on one or multiple traits. Currently, I'm using the following 5 tags I created:</p>
<ul>
<li><strong>Task</strong> -- something that can be done if acted upon. Example: "<em>Buy a new camera</em>".</li>
<li><strong>Event</strong> -- something that can only be acted upon on a specific date and time, not sooner or later. Example: "<em>Dentist appointment at 2pm on Monday</em>".</li>
<li><strong>Idea</strong> -- something that is too vague to be acted upon, but can be a source of new tasks. Example: "<em>List of books I want to read</em>".</li>
<li><strong>Blocked</strong> -- something that cannot be acted upon until the blocker is cleared. Example: "<em>Buy a new camera</em>" cannot be acted upon until <em>salary day</em>.</li>
<li><strong>Important</strong> -- something marginally more important than everything else and should be considered first when planning.</li>
</ul>
<p><img src="http://localhost:3000/Tags.png" alt="Tags"></p>
<p>This setup splits the notes into three logical types -- tasks, events and ideas. Every note should have either one of these assigned to it.</p>
<h3>Planning and execution</h3>
<p>Although creating new notes can be done at any time, they should not be acted upon until they are drafted for a week plan. A week plan is a subset of tasks and events, manually selected for completion during a specific week.</p>
<p>Before the start of a new week, usually on a Sunday, I make a plan for the upcoming seven days by creating a new note in a special notebook titled "/" -- a weird name, but I chose it to make this notebook appear at the very top of the list.</p>
<p><img src="http://localhost:3000/Planning-notebook.png" alt="The planning notebook"></p>
<p>When making a week plan, I begin by creating a note and naming it in accordance with the week number, e.g. "<em>Week plan #50</em>". It doesn't make sense to assign any tags to it, so I just leave it as it is. I also write down the starting and ending dates of the week inside the note for a bit of extra context, e.g. "Dec 10 - Dec 16".</p>
<p>Then, to fill it with items, I start with events because it's the simplest. I look through all events that are planned for that week and insert them into the plan by copy-pasting their links. This can be done by right-clicking on each note and selecting "<em>Copy internal link</em>". It also helps if the events inside the plan are listed in a chronological order, with date/time displayed next to them for convenience.</p>
<p>To make it easier to find events based on their dates, I always configure reminders for this type of notes -- this adds an extra field that I can use to filter and search by. For example, I have a couple of saved search queries that are very useful when planning events:</p>
<ul>
<li>Due within 7 days: <code>remindertime:day -remindertime:day+7</code></li>
<li>Due within 14 days: <code>remindertime:day -remindertime:day+14</code></li>
<li>Overdue: <code>remindertime:day-9999999999 -remindertime:day</code></li>
</ul>
<p>After the events are in, I move on to tasks. For this I use another saved search to filter by actionable tasks -- which is all tasks that are not blocked: <code>tag:Task -tag:Blocked</code>.</p>
<p>Which tasks I choose to draft for the week comes down to their importance and my personal preference, accounting for the time they take so that I don't end up planning more than I can handle.</p>
<p><img src="http://localhost:3000/Week-plan.png" alt="The week plan"></p>
<p>Once the week plan is made, it becomes the only note I look at throughout the week. I don't have to care about anything else because all the information I need is consolidated within this plan. Should I want to know more about a specific task or event I planned -- I can click on the internal link I inserted and it will take me to the corresponding note.</p>
<p>As I routinely come back to the week plan, I cross out the items I have completed and move the corresponding notes to trash so that they don't appear in the next planning phase.</p>
<p>Having only one single place I need to look at frees up my consciousness and lets me properly focus on the important things, without worrying that I may have forgotten or overlooked something. The effort I put during the planning phase makes me confident in what I'm doing during the execution phase.</p>]]></description><link>http://localhost:3000/blog/planning-my-life-with-evernote</link><guid isPermaLink="false">http://localhost:3000/blog/planning-my-life-with-evernote</guid><category><![CDATA[personal]]></category><category><![CDATA[time management]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sun, 23 Dec 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Cognitive Biases in Software Development]]></title><description><![CDATA[<p>Cognitive biases impact our perception of reality, driving us into making incorrect conclusions and irrational decisions. The topic's relevancy to software development has already been covered in many places (<a href="https://medium.com/@Mareks_082/biases-in-software-development-1f79ba840cc1">one</a>, <a href="https://hackernoon.com/cognitive-biases-in-programming-5e937707c27b">two</a>, <a href="http://www.jonathanklein.net/2013/06/cognitive-biases-in-software-engineering.html">three</a>) but I would like to add on by discussing a few cases that haven't been mentioned before.</p>
<h2>Survivorship bias</h2>
<blockquote>
<p>Survivorship bias is the logical error of concentrating on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. (<a href="https://en.wikipedia.org/wiki/Survivorship_bias">wiki</a>)</p>
</blockquote>
<p>When it comes to software development, this cognitive bias mainly applies to the tendency to subconsciously analyze user satisfaction based on naturally skewed feedback. There is an unspoken notion that good software is expected to work, while great software should work so well it's practically unnoticeable. Following this notion, users tend to contact developers only when something, in fact, doesn't work.</p>
<p>If you have no other means of assessing user feedback besides bug reports, it might seem that everyone who has ever used your software has experienced issues with it. This is especially common, for example, in open source development, where using proper telemetry is frowned upon, and the only user interaction is typically done through issue tickets.</p>
<p>Needless to say, the effects of this bias can negatively impact motivation. Similar to <a href="https://en.wikipedia.org/wiki/Survivorship_bias#In_the_military">bombers that make it home</a>, bug reports don't tell the full story. In order to avoid being the victim of lost motivation, it is important to keep in mind that the happiest users are also usually the quietest.</p>
<h2>Post-purchase rationalization</h2>
<blockquote>
<p>Post-purchase rationalization is the tendency to retroactively ascribe positive attributes to an option one has selected. (<a href="https://en.wikipedia.org/wiki/Choice-supportive_bias">wiki</a>)</p>
</blockquote>
<p>I've found this bias reflected well in how developers defend their decisions far more vigorously when their changes were already pushed and merged to master. The regret associated with making revert commits is something we all prefer to avoid, due to the induced shame of having made bad choices and spending efforts on what ultimately didn't bring the desired value.</p>
<p>I can often find myself standing by something I've done, not noticing that I'm simply trying to justify my decision making, instead of focusing on what's best for the project in the long run. At the time the action was taken, it may have made perfect sense, but some months later the circumstances could be different -- yet your brain is conditioned to remember it only for being the best option, instead of the thought process that brought you to that conclusion.</p>
<p>In situations like this, it helps to think of each incremental change as an improvement over the previous, without overindulging in how a particular issue was introduced in the first place.</p>
<h2>Not-invented-here syndrome</h2>
<blockquote>
<p>Not-invented-here syndrome is the tendency towards reinventing the wheel based on the belief that in-house developments are inherently better suited, more secure, more controlled, quicker to develop, and incur lower overall cost than using existing implementations. (<a href="https://en.wikipedia.org/wiki/Not_invented_here">wiki</a>)</p>
</blockquote>
<p>It can often be hard to judge whether adding an external dependency or rolling your own solution is a better option for a particular situation. On one hand, having full control of the code makes it possible to customize it for whatever needs you may have, on the other, you are effectively re-inventing the wheel by doing that.</p>
<p>Statistically, it appears that companies and individual developers prefer to avoid using 3rd party tools and libraries more often than it is worth it. Things like test coverage and maintenance get overlooked and not accounted for, resulting in an unexpected waste of developer resources.</p>
<p>I've once heard a person advise against referencing an external library because "it would take an average developer 4 days to recreate", without being able to explain why that's a problem. Sure, a lot of times existing solutions might be lacking or inadequate for some task, in which case using them is not an option, but discarding something only because it wasn't invented here is a bias you should be on a lookout for.</p>
<h2>Negativity bias</h2>
<blockquote>
<p>The negativity bias refers to the notion that, even when of equal intensity, things of a more negative nature have a greater effect on one's psychological state and processes than do neutral or positive things. (<a href="https://en.wikipedia.org/wiki/Negativity_bias">wiki</a>)</p>
</blockquote>
<p>Negativity bias is ubiquitous enough that it can be attributed to almost everything in life. In software development, among other things, it's rather prominent in the tendency to overemphasize bad parts of the code.</p>
<p>Sometimes a few hacks here and there, broken dependency isolation or implementation-aware tests can save a release from missing a deadline, but will definitely leave a bad aftertaste in your mouth. Working with such code triggers negative emotions, easily overshadowing the bigger picture and the goals your project is meant to meet. What makes it worse is that you're usually not at liberty to allocate time for refactoring, which, objectively speaking, might not even be worth doing at all.</p>
<p>I'm definitely not advocating that such issues should be completely ignored -- technical debt can be very detrimental to the development process, once it piles up. That said, more often than not we're subconsciously making a bigger deal out of it than it really is. A lot of times you can eliminate such thoughts by switching from "why is something bad" to "how can I make it better" -- maybe there's no real solution that is worth the effort.</p>
<h2>Bottom line</h2>
<p>Some people claim that being resilient to cognitive biases when performing a job is what makes the difference between an amateur and a professional. While I don't think being insusceptible to biases is possible, it definitely helps if you can identify them and properly adjust your perception.</p>]]></description><link>http://localhost:3000/blog/cognitive-biases-in-software-development</link><guid isPermaLink="false">http://localhost:3000/blog/cognitive-biases-in-software-development</guid><category><![CDATA[programming]]></category><category><![CDATA[general]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sun, 18 Feb 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Reverse-Engineering YouTube]]></title><description><![CDATA[<p>Almost a year ago, I started developing <a href="https://github.com/Tyrrrz/YoutubeExplode">YoutubeExplode</a>, a library that scraps information on YouTube videos and lets you download them. Originally, my main motivation for developing it was simply to gain experience, as the task involved a lot of research and reverse-engineering. Nowadays, YoutubeExplode is arguably the most consistent and robust .NET library for dealing with YouTube.</p>
<p>Since this is a relatively popular discussion topic among many beginner developers, I thought that I could help out by sharing the knowledge I found by spending dozens of hours staring at Chrome Developer Tools.</p>
<p><em>Note: even though the base principles explained here are unlikely to change, some information in this post may become outdated. This post is relevant to YoutubeExplode v4.1 (16-Feb-2018).</em></p>
<h2>Getting video metadata</h2>
<p>In order to find and resolve media streams, you need to first get video metadata. There are a few ways to do it, but the most reliable one is by querying an AJAX endpoint used internally by YouTube's iframe embed API. The format is as follows: <a href="https://www.youtube.com/get_video_info?video_id=%7BvideoId%7D">https://www.youtube.com/get_video_info?video_id={videoId}</a>.</p>
<p>The request can take a lot of different parameters, but at a minimum it needs a video ID -- the value in the URL that comes after <code>/watch?v=</code>, for example <code>e_S9VvJM1PI</code>.</p>
<p>The response contains URL-encoded metadata, which has to be decoded first before it's usable. After that, you can map the parameter names to values in a dictionary for easier access. Some parameter values are nested objects themselves, so they can in turn be mapped to nested dictionaries.</p>
<p>Here's an example of the decoded metadata (truncated for brevity):</p>
<pre class="language-ini"><code class="language-ini"><span class="token constant">status</span><span class="token attr-value"><span class="token punctuation">=</span>ok</span>
<span class="token constant">view_count</span><span class="token attr-value"><span class="token punctuation">=</span>24022293</span>
<span class="token constant">muted</span><span class="token attr-value"><span class="token punctuation">=</span>0</span>
<span class="token constant">use_cipher_signature</span><span class="token attr-value"><span class="token punctuation">=</span>True</span>
<span class="token constant">iurl</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/hqdefault.jpg</span>
<span class="token constant">iurlhq720</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/hq720.jpg</span>
<span class="token constant">video_id</span><span class="token attr-value"><span class="token punctuation">=</span>e_S9VvJM1PI</span>
<span class="token constant">avg_rating</span><span class="token attr-value"><span class="token punctuation">=</span>4.8990560233</span>
<span class="token constant">videostats_playback_base_url</span><span class="token attr-value"><span class="token punctuation">=</span>https://s.youtube.com</span>
<span class="token constant">ucid</span><span class="token attr-value"><span class="token punctuation">=</span>UCKvT-8xU_BTJGvsQ5lR23TQ</span>
<span class="token constant">iurlmq</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/mqdefault.jpg</span>
<span class="token constant">thumbnail_url</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/default.jpg</span>
<span class="token constant">loudness</span><span class="token attr-value"><span class="token punctuation">=</span>-18.5090007782</span>
<span class="token constant">pltype</span><span class="token attr-value"><span class="token punctuation">=</span>content</span>
<span class="token constant">cl</span><span class="token attr-value"><span class="token punctuation">=</span>176519171</span>
<span class="token constant">author</span><span class="token attr-value"><span class="token punctuation">=</span>IconForHireVEVO</span>
<span class="token constant">ptk</span><span class="token attr-value"><span class="token punctuation">=</span>youtube_single</span>
<span class="token constant">is_listed</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token constant">allow_embed</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token constant">short_view_count_text</span><span class="token attr-value"><span class="token punctuation">=</span>24M views</span>
<span class="token constant">relative_loudness</span><span class="token attr-value"><span class="token punctuation">=</span>2.4909992218</span>
<span class="token constant">fmt_list</span><span class="token attr-value"><span class="token punctuation">=</span>43/640x360,18/640x360,36/426x240,17/256x144,13/256x144</span>
<span class="token constant">has_cc</span><span class="token attr-value"><span class="token punctuation">=</span>False</span>
<span class="token constant">title</span><span class="token attr-value"><span class="token punctuation">=</span>Icon For Hire - Make A Move</span>
<span class="token constant">iurlmaxres</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/maxresdefault.jpg</span>
<span class="token constant">keywords</span><span class="token attr-value"><span class="token punctuation">=</span>Icon,For,Hire,Make,Move,Tooth,Nail,(TNN),Rock</span>
<span class="token constant">length_seconds</span><span class="token attr-value"><span class="token punctuation">=</span>184</span>
<span class="token constant">allow_ratings</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token constant">iurlsd</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/sddefault.jpg</span>
<span class="token constant">iurlhq</span><span class="token attr-value"><span class="token punctuation">=</span>https://i.ytimg.com/vi/e_S9VvJM1PI/hqdefault.jpg</span>
<span class="token constant">url_encoded_fmt_stream_map</span><span class="token attr-value"><span class="token punctuation">=</span>...</span>
<span class="token constant">adaptive_fmts</span><span class="token attr-value"><span class="token punctuation">=</span>...</span>
<span class="token constant">dashmpd</span><span class="token attr-value"><span class="token punctuation">=</span>...</span>
</code></pre>
<p>As you can see, there is quite a lot of information that can be extracted straight away.</p>
<p>Let's also look at some important optional parameters that this request can take:</p>
<ul>
<li><code>hl</code> -- name of the culture used to localize some strings. If not set, it defaults to culture inferred from your IP. Use <code>hl=en</code> to force English language on all strings.</li>
<li><code>el</code> -- type of YouTube page from where the request was made. This decides what kind of information will be available in the response. In some cases, you will need to set this parameter to a certain value depending on the type of the video, in order to avoid errors. Defaults to <code>embedded</code>.</li>
<li><code>sts</code> -- some kind of session identifier, used to synchronize information between requests. Defaults to empty.</li>
</ul>
<h3>The "el" parameter</h3>
<p>The <code>el</code> request parameter can take multiple values and it affects what kind of data you will receive as a response. There are only a few that actually matter though, so I'll list them here:</p>
<ul>
<li><code>embedded</code>, the default value. YouTube uses this when requesting information for embedded videos. Doesn't work with videos that aren't embeddable, but works with age-restricted videos.</li>
<li><code>detailpage</code>, alternative value, contains a bit more info. Conversely, works with videos that aren't embeddable, but doesn't work with age-restricted videos.</li>
</ul>
<p>YoutubeExplode uses <code>el=embedded</code> for the first query. If it fails because the video cannot be embedded, it then retries with <code>el=detailpage</code>.</p>
<h3>Handling errors</h3>
<p>When the request fails, the response will contain only a few fields:</p>
<ul>
<li><code>status</code> -- which is equal to <code>fail</code>.</li>
<li><code>errorcode</code> -- an integer code that identifies the error.</li>
<li><code>reason</code> -- text message that explains why the video is not available.</li>
</ul>
<p>Error codes seem to be very generic and most of the time it's either <code>100</code> or <code>150</code> so they aren't very useful at determining what went wrong.</p>
<h3>Paid videos</h3>
<p>Some videos need to be purchased before they can be watched. In such cases, there will be:</p>
<ul>
<li><code>requires_purchase</code>, which equal to <code>1</code>.</li>
<li><code>ypc_vid</code>, ID of a preview video which can be watched for free.</li>
</ul>
<h2>Resolving media streams</h2>
<p>Media streams and their metadata come in many different forms.</p>
<h3>Muxed streams</h3>
<p>Multiplexed (muxed) streams are the type that contain both video and audio tracks in the same stream. YouTube provides these streams only in low qualities -- the best they can be is 720p30.</p>
<p>Metadata for these streams is contained within the URL-encoded response mentioned earlier, inside the <code>url_encoded_fmt_stream_map</code> parameter. To extract it, you simply need to split the value by <code>,</code> and then URL-decode each part.</p>
<p>This is how decoded metadata looks, for an individual muxed stream:</p>
<pre class="language-ini"><code class="language-ini"><span class="token constant">itag</span><span class="token attr-value"><span class="token punctuation">=</span>43</span>
<span class="token constant">type</span><span class="token attr-value"><span class="token punctuation">=</span>video/webm; codecs="vp8.0, vorbis"</span>
<span class="token constant">fallback_host</span><span class="token attr-value"><span class="token punctuation">=</span>redirector.googlevideo.com</span>
<span class="token constant">url</span><span class="token attr-value"><span class="token punctuation">=</span>https://r12---sn-3c27sn7k.googlevideo.com/videoplayback?itag=43&#x26;lmt=1367519763212098&#x26;ipbits=0&#x26;key=yt6&#x26;mime=video%2Fwebm&#x26;expire=1511401259&#x26;mn=sn-3c27sn7k&#x26;mm=31&#x26;ms=au&#x26;mv=m&#x26;mt=1511379591&#x26;ei=y9IVWuuyKI-YdLvnm8AO&#x26;sparams=dur%2Cei%2Cgcr%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cnh%2Cpl%2Cratebypass%2Crequiressl%2Csource%2Cexpire&#x26;ip=255.255.255.255&#x26;id=o-AJuM11wvxuVl2WBgfb3nr6zbmXsFGQvhMelDobZ_KOrE&#x26;nh=IgpwcjAxLmticDAxKgkxMjcuMC4wLjE&#x26;requiressl=yes&#x26;gcr=ua&#x26;source=youtube&#x26;ratebypass=yes&#x26;pl=24&#x26;initcwndbps=1112500&#x26;dur=0.000</span>
<span class="token constant">s</span><span class="token attr-value"><span class="token punctuation">=</span>9599599594B0133328AA570AE0129E58478D7BCE9D226F.15ABC404267945A3F64FB4E42074383FC4FA80F5</span>
<span class="token constant">quality</span><span class="token attr-value"><span class="token punctuation">=</span>medium</span>
</code></pre>
<p>You will be interested in the following properties:</p>
<ul>
<li><code>itag</code> -- integer code that identifies the type of stream.</li>
<li><code>type</code> -- MIME type and codecs.</li>
<li><code>url</code> -- URL that serves the stream.</li>
<li><code>s</code> -- cipher signature used to protect the stream (if present).</li>
</ul>
<p>Note: I've encountered cases when <a href="https://github.com/Tyrrrz/YoutubeExplode/issues/36">some of the muxed streams were removed</a> despite still appearing in the metadata. Therefore it's recommended to send HEAD requests to check that each stream is still available. You can get content length as well while you're at it, since it's not present in the metadata.</p>
<h3>Adaptive streams</h3>
<p>YouTube also uses video-only and audio-only streams. These come at highest available qualities, with no limitations.</p>
<p>Similarly to muxed streams, metadata for these streams can be extracted from <code>adaptive_fmts</code> parameter. Here's how it looks:</p>
<pre class="language-ini"><code class="language-ini"><span class="token constant">itag</span><span class="token attr-value"><span class="token punctuation">=</span>134</span>
<span class="token constant">lmt</span><span class="token attr-value"><span class="token punctuation">=</span>1507180885248732</span>
<span class="token constant">clen</span><span class="token attr-value"><span class="token punctuation">=</span>10889173</span>
<span class="token constant">size</span><span class="token attr-value"><span class="token punctuation">=</span>640x360</span>
<span class="token constant">quality_label</span><span class="token attr-value"><span class="token punctuation">=</span>360p</span>
<span class="token constant">bitrate</span><span class="token attr-value"><span class="token punctuation">=</span>638590</span>
<span class="token constant">index</span><span class="token attr-value"><span class="token punctuation">=</span>709-1196</span>
<span class="token constant">projection_type</span><span class="token attr-value"><span class="token punctuation">=</span>1</span>
<span class="token constant">url</span><span class="token attr-value"><span class="token punctuation">=</span>https://r12---sn-3c27sn7k.googlevideo.com/videoplayback?itag=134&#x26;lmt=1507180885248732&#x26;ipbits=0&#x26;key=yt6&#x26;mime=video%2Fmp4&#x26;expire=1511401259&#x26;aitags=134&#x26;mn=sn-3c27sn7k&#x26;mm=31&#x26;ms=au&#x26;mv=m&#x26;mt=1511379591&#x26;ei=y9IVWuuyKI-YdLvnm8AO&#x26;sparams=aitags%2Cclen%2Cdur%2Cei%2Cgcr%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cnh%2Cpl%2Crequiressl%2Csource%2Cexpire&#x26;ip=255.255.255.255&#x26;clen=10889173&#x26;id=o-AJuM11wvxuVl2WBgfb3nr6zbmXsFGQvhMelDobZ_KOrE&#x26;gir=yes&#x26;nh=IgpwcjAxLmticDAxKgkxMjcuMC4wLjE&#x26;requiressl=yes&#x26;gcr=ua&#x26;source=youtube&#x26;pl=24&#x26;initcwndbps=1112500&#x26;dur=183.850</span>
<span class="token constant">fps</span><span class="token attr-value"><span class="token punctuation">=</span>30</span>
<span class="token constant">s</span><span class="token attr-value"><span class="token punctuation">=</span>D68D68D685A42CD39B87D2AC677C8B34FA2DE3A1F3A9A5.902A1E29122D7018F6AC7C1EAFA4A51BE84C3A5C</span>
<span class="token constant">type</span><span class="token attr-value"><span class="token punctuation">=</span>video/mp4;+codecs="avc1.4d401e"</span>
<span class="token constant">init</span><span class="token attr-value"><span class="token punctuation">=</span>0-708</span>
</code></pre>
<p>Adaptive streams have a slightly extended set of properties. I'll list the useful ones:</p>
<ul>
<li><code>itag</code> -- integer code that identifies the type of stream.</li>
<li><code>type</code> -- MIME type and codecs.</li>
<li><code>url</code> -- URL that serves the stream.</li>
<li><code>s</code> -- cipher signature used to protect the stream (if present).</li>
<li><code>clen</code> -- content length of the stream in bytes.</li>
<li><code>bitrate</code> -- stream bitrate in kbit/sec.</li>
<li><code>size</code> -- video resolution (video-only).</li>
<li><code>fps</code> -- video framerate (video-only).</li>
</ul>
<h3>Adaptive streams in DASH manifest</h3>
<p>Video info may contain URL of a DASH manifest inside the <code>dashmpd</code> parameter. It's not always present and some videos might never have it at all.</p>
<p>To resolve metadata of these streams, you need to first download the manifest using the provided URL. Sometimes a manifest can be protected. If it is, you should be able to find the signature inside the URL -- it's the value separated by slashes that comes after <code>/s/</code>.</p>
<p>Streams in DASH can also be segmented -- each segment starting at a given point and lasting only a second or two. This is the type that your browser normally uses when playing a video on YouTube -- it lets it easily adjust quality based on network conditions. Segmented streams are also used for livestream videos. This post will not be covering them, however, as processing them is not required to download videos.</p>
<p>The DASH manifest follows <a href="http://standards.iso.org/ittf/PubliclyAvailableStandards/MPEG-DASH_schema_files/DASH-MPD.xsd">this XML schema</a>. You can parse the stream metadata if you go through all descendant nodes of type <code>Representation</code>. Here's how they appear:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Representation</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>133<span class="token punctuation">"</span></span> <span class="token attr-name">codecs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avc1.4d4015<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>426<span class="token punctuation">"</span></span>
                <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">startWithSAP</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">maxPlayoutRate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>
                <span class="token attr-name">bandwidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>246787<span class="token punctuation">"</span></span> <span class="token attr-name">frameRate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">mediaLmt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1507180947831345<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>BaseURL</span> <span class="token attr-name">contentLength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4436318<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://r12---sn-3c27sn7k.googlevideo.com/videoplayback?id=7bf4bd56f24cd4f2<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>itag=133<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>source=youtube<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>requiressl=yes<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>ei=Bt4VWqLOJMT3NI3qjPgB<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>ms=au<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>gcr=ua<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>mv=m<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>pl=24<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>mn=sn-3c27sn7k<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>initcwndbps=1143750<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>mm=31<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>nh=IgpwcjAxLmticDAxKgkxMjcuMC4wLjE<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>ratebypass=yes<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>mime=video/mp4<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>gir=yes<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>clen=4436318<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>lmt=1507180947831345<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>dur=183.850<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>mt=1511382418<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>key=dg_yt0<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>s=7227CB6B79F7C702BB11275F9D71C532EB7E72046.DD6F06570E470E0E8384F74B879F79475D023A64A64<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>signature=254E9E06DF034BC66D29B39523F84B33D5940EE3.1F4C8A5645075A228BB0C2D87F71477F6ABFFA99<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>ip=255.255.255.255<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>ipbits=0<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>expire=1511404134<span class="token entity named-entity" title="&#x26;">&#x26;amp;</span>sparams=ip,ipbits,expire,id,itag,source,requiressl,ei,ms,gcr,mv,pl,mn,initcwndbps,mm,nh,ratebypass,mime,gir,clen,lmt,dur<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>BaseURL</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>SegmentBase</span> <span class="token attr-name">indexRange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>709-1196<span class="token punctuation">"</span></span> <span class="token attr-name">indexRangeExact</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Initialization</span> <span class="token attr-name">range</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0-708<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>SegmentBase</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Representation</span><span class="token punctuation">></span></span>
</code></pre>
<p>They have the following attributes:</p>
<ul>
<li><code>id</code> -- integer code that identifies the type of stream.</li>
<li><code>bandwidth</code> -- stream bitrate in kbit/sec.</li>
<li><code>width</code> -- video width (video-only).</li>
<li><code>height</code> -- video height (video-only).</li>
<li><code>frameRate</code> -- video framerate (video-only).</li>
</ul>
<p>The URL can be extracted from inner text of <code>&#x3C;BaseURL></code> node.</p>
<p>Note: don't be tempted to extract content length from the <code>contentLength</code> attribute, because it doesn't always appear on <code>&#x3C;BaseURL></code> tag. Instead, you can use regular expressions to parse it from <code>clen</code> query parameter in the URL.</p>
<h2>Protected videos and cipher signatures</h2>
<p>You may notice that some videos, mostly the ones uploaded by verified channels, are protected. This means that their media streams and DASH manifests cannot be directly accessed by URL -- a 403 error code is returned instead. To be able to access them, you need to decipher their signatures and then modify the URL appropriately.</p>
<p>For muxed and adaptive streams, the signatures are part of the extracted metadata. DASH streams themselves are never protected, but the actual manifest may be -- the signature is stored as part of the URL.</p>
<p>A signature is a string made out of two sequences of uppercase letters and numbers, separated by period. Here's an example: <code>537513BBC517D8643EBF25887256DAACD7521090.AE6A48F177E7B0E8CD85D077E5170BFD83BEDE6BE6C6C</code>.</p>
<p>When your browser opens a YouTube video, it transforms these signatures using a set of operations defined in the player source code, putting the result as an additional parameter inside URLs. To repeat the same process from code, you need to locate the JavaScript source of the player used by the video and parse it.</p>
<h3>Downloading and parsing player source code</h3>
<p>Every video uses a slightly different version of the player, which means you need to figure out which one to download. If you get the HTML of the <a href="https://www.youtube.com/embed/e_S9VvJM1PI">video's embed page</a>, you can search for <code>"js":</code> to find a JSON property that contains the player's relative source code URL. Once you prepend YouTube's host you'll end up with a URL like this one: <a href="https://www.youtube.com/yts/jsbin/player-vflYXLM5n/en_US/base.js">https://www.youtube.com/yts/jsbin/player-vflYXLM5n/en_US/base.js</a>.</p>
<p>Besides obtaining the player source URL, you also need to get something called <code>sts</code>, which appears to be some sort of session token. You will need to send it as a parameter to <code>get_video_info</code> endpoint mentioned earlier -- this makes sure that the returned metadata is valid for this player context. You can extract the value of <code>sts</code> similarly, just search for <code>"sts":</code> and you should find it.</p>
<p>Once you locate the source code URL and download it, you need to parse it. There are few ways to do it, for simplicity reasons I chose to parse it using regular expressions.</p>
<p>Instead of explaining step-by-step what exactly you need to do, I'll just copy a small part of source code from YoutubeExplode. I made sure to comment it to the best of my ability, so it should be pretty easy to follow.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&#x3C;</span>IReadOnlyList<span class="token punctuation">&#x3C;</span>ICipherOperation<span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">GetCipherOperationsAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> sourceUrl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Get player source code</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sourceRaw <span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>sourceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Find the name of the function that handles deciphering</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entryPoint <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>sourceRaw<span class="token punctuation">,</span>
        <span class="token string">@"\bc\s*&#x26;&#x26;\s*d\.set\([^,]+,\s*(?:encodeURIComponent\s*\()?\s*([\w$]+)\("</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>entryPoint<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Could not find the entry function for signature deciphering."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Find the body of the function</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entryPointBody <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>sourceRaw<span class="token punctuation">,</span>
        <span class="token string">@"(?!h\.)"</span> <span class="token operator">+</span> Regex<span class="token punctuation">.</span><span class="token function">Escape</span><span class="token punctuation">(</span>entryPoint<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">@"=function\(\w+\)\{(.*?)\}"</span><span class="token punctuation">,</span>
        RegexOptions<span class="token punctuation">.</span>Singleline<span class="token punctuation">)</span><span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>entryPointBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Could not find the signature decipherer function body."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entryPointLines <span class="token operator">=</span> entryPointBody<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Identify cipher functions</span>
    <span class="token class-name"><span class="token keyword">string</span></span> reverseFuncName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> sliceFuncName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> charSwapFuncName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> operations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&#x3C;</span>ICipherOperation<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Analyze the function body to determine the names of cipher functions</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> line <span class="token keyword">in</span> entryPointLines<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Break when all functions are found</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>reverseFuncName<span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>
            <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>sliceFuncName<span class="token punctuation">)</span> <span class="token operator">&#x26;&#x26;</span>
            <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>charSwapFuncName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token comment">// Get the function called on this line</span>
        <span class="token class-name"><span class="token keyword">var</span></span> calledFuncName <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">@"\w+\.(\w+)\("</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>calledFuncName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token comment">// Find cipher function names</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">IsMatch</span><span class="token punctuation">(</span>sourceRaw<span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$@"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Regex<span class="token punctuation">.</span><span class="token function">Escape</span><span class="token punctuation">(</span>calledFuncName<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">:\bfunction\b\(\w+\)"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            reverseFuncName <span class="token operator">=</span> calledFuncName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">IsMatch</span><span class="token punctuation">(</span>sourceRaw<span class="token punctuation">,</span>
            <span class="token interpolation-string"><span class="token string">$@"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Regex<span class="token punctuation">.</span><span class="token function">Escape</span><span class="token punctuation">(</span>calledFuncName<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">:\bfunction\b\([a],b\).(\breturn\b)?.?\w+\."</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sliceFuncName <span class="token operator">=</span> calledFuncName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">IsMatch</span><span class="token punctuation">(</span>sourceRaw<span class="token punctuation">,</span>
            <span class="token interpolation-string"><span class="token string">$@"</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Regex<span class="token punctuation">.</span><span class="token function">Escape</span><span class="token punctuation">(</span>calledFuncName<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">:\bfunction\b\(\w+\,\w\).\bvar\b.\bc=a\b"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            charSwapFuncName <span class="token operator">=</span> calledFuncName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Analyze the function body again to determine the operation set and order</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> line <span class="token keyword">in</span> entryPointLines<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Get the function called on this line</span>
        <span class="token class-name"><span class="token keyword">var</span></span> calledFuncName <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">@"\w+\.(\w+)\("</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>calledFuncName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token comment">// Swap operation (swaps first character and character at index)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>calledFuncName <span class="token operator">==</span> charSwapFuncName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">@"\(\w+,(\d+)\)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            operations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SwapCipherOperation</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Slice operation (returns substring at index)</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>calledFuncName <span class="token operator">==</span> sliceFuncName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> index <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">@"\(\w+,(\d+)\)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            operations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">SliceCipherOperation</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Reverse operation (reverses the entire string)</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>calledFuncName <span class="token operator">==</span> reverseFuncName<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            operations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReverseCipherOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> operations<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Output of this method is a collection of <code>ICipherOperation</code>s. At this point in time, there can be up to 3 kind of cipher operations:</p>
<ul>
<li>Swap -- swaps the first character in the signature with given, identified by position.</li>
<li>Slice -- truncates leading characters in signature which come before given position.</li>
<li>Reverse -- reverses the entire signature.</li>
</ul>
<p>Once you successfully extract the type and order of the used operations, you need to store them somewhere so you can execute them on a signature.</p>
<h3>Deciphering signatures and updating URLs</h3>
<p>After parsing the player source code, you can get the deciphered signatures and update the URL accordingly.</p>
<p>For muxed and adaptive streams, transform the signature extracted from metadata and add it as a <em>query</em> parameter called <code>signature</code> -- <code>...&#x26;signature=212CD2793C2E9224A40014A56BB8189AF3D591E3.523508F8A49EC4A3425C6E4484EF9F59FBEF9066</code></p>
<p>For DASH manifest, transform the signature extracted from URL and add it as a <em>route</em> parameter called <code>signature</code> -- <code>.../signature/212CD2793C2E9224A40014A56BB8189AF3D591E3.523508F8A49EC4A3425C6E4484EF9F59FBEF9066/</code></p>
<h2>Identifying media stream's content properties</h2>
<p>Each media stream has an <code>itag</code> that uniquely identifies its properties such as container type, codecs, video quality. YoutubeExplode resolves these properties using a predefined map of known tags:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">Dictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> ItagDescriptor<span class="token punctuation">></span></span> ItagMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&#x3C;</span><span class="token keyword">int</span><span class="token punctuation">,</span> ItagDescriptor<span class="token punctuation">></span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Muxed</span>
    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Flv<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Mp3<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H263<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Flv<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Mp3<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H263<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Tgpp<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Mp4V<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Tgpp<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Mp4V<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Flv<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Flv<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Tgpp<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Mp4V<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">37</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High3072<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">44</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">59</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">83</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">94</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">132</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// Video-only (mp4)</span>
    <span class="token punctuation">{</span><span class="token number">133</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">134</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">135</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">136</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">137</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">138</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High4320<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">212</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">213</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">214</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">215</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">216</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">217</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">264</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1440<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">266</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High2160<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">298</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">299</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>Mp4<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>H264<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// Video-only (webm)</span>
    <span class="token punctuation">{</span><span class="token number">167</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">168</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">169</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">218</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">219</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp8<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">242</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">243</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">244</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">245</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">246</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">247</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">248</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">271</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1440<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">272</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High2160<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">278</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">303</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">308</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1440<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">313</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High2160<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">315</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High2160<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low144<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">331</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Low240<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">332</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium360<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">333</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>Medium480<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">334</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High720<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">335</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1080<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">336</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High1440<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">337</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> VideoEncoding<span class="token punctuation">.</span>Vp9<span class="token punctuation">,</span> VideoQuality<span class="token punctuation">.</span>High2160<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// Audio-only (mp4)</span>
    <span class="token punctuation">{</span><span class="token number">139</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">141</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">258</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">325</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">328</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>M4A<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Aac<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// Audio-only (webm)</span>
    <span class="token punctuation">{</span><span class="token number">171</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">172</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Vorbis<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">249</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Opus<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Opus<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">251</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ItagDescriptor</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>WebM<span class="token punctuation">,</span> AudioEncoding<span class="token punctuation">.</span>Opus<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Things like bitrate, resolution and framerate are not strictly regulated by <code>itag</code> so you still need to extract them from metadata.</p>
<h2>Bypassing rate limit</h2>
<p>By default, adaptive streams are served at a limited rate -- just enough to download the next parts as the video plays. This is not optimal if the goal is to download the video as fast as possible.</p>
<p>To circumvent this, you may download the stream in multiple segments by sending HTTP requests with <code>Range</code> header. For each request you make, YouTube first provides a small chunk instantly, followed by the rest of the data which is throttled.</p>
<p>Interestingly, even just by having the header set, the throttling seems to kick in much later than usual. After experimenting for some time, I've found that splitting up the requests in segments of around 10mb is optimal for videos of all sizes.</p>
<h2>Summary</h2>
<p>Here's a recap of all required steps you need to take in order to download a video from YouTube:</p>
<ol>
<li>Get video's ID (e.g. <code>e_S9VvJM1PI</code>).</li>
<li>Download video's embed page (e.g. <a href="https://www.youtube.com/embed/e_S9VvJM1PI">https://www.youtube.com/embed/e_S9VvJM1PI</a>).</li>
<li>Extract player source URL (e.g. <a href="https://www.youtube.com/yts/jsbin/player-vflYXLM5n/en_US/base.js">https://www.youtube.com/yts/jsbin/player-vflYXLM5n/en_US/base.js</a>).</li>
<li>Get the value of <code>sts</code> (e.g. <code>17488</code>).</li>
<li>Download and parse player source code.</li>
<li>Request video metadata (e.g. <a href="https://www.youtube.com/get_video_info?video_id=e_S9VvJM1PI&#x26;sts=17488&#x26;hl=en">https://www.youtube.com/get_video_info?video_id=e_S9VvJM1PI&#x26;sts=17488&#x26;hl=en</a>). Try with <code>el=detailpage</code> if it fails.</li>
<li>Parse the URL-encoded metadata and extract information about streams.</li>
<li>If they have signatures, use the player source to decipher them and update the URLs.</li>
<li>If there's a reference to DASH manifest, extract the URL and decipher it if necessary as well.</li>
<li>Download the DASH manifest and extract additional streams.</li>
<li>Use <code>itag</code> to classify streams by their properties.</li>
<li>Choose a stream and download it in segments.</li>
</ol>
<p>If you have any issues, you can always refer to the source code of <a href="https://github.com/Tyrrrz/YoutubeExplode">YoutubeExplode</a> or ask me questions in the comments.</p>]]></description><link>http://localhost:3000/blog/reverse-engineering-youtube</link><guid isPermaLink="false">http://localhost:3000/blog/reverse-engineering-youtube</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><category><![CDATA[reverse-engineering]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Fri, 15 Dec 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[WPF Frontend Using AmmyUI]]></title><description><![CDATA[<p>Quite a long time ago I've stumbled upon a very interesting open source project called <a href="https://github.com/AmmyUI/AmmyUI">AmmyUI</a>. Its main goal is to make designing XAML apps a lot better by... removing XAML from the equation.</p>
<p>Ammy is a JSON-like layout language which compiles to XAML and also has some cool extra features.</p>
<p>I've never been a big fan of XAML, so it got me interested and I decided to use it when starting one of my projects, <a href="https://github.com/Tyrrrz/DiscordChatExporter">DiscordChatExporter</a>.</p>
<h2>Installation</h2>
<p>To use AmmyUI, you will need to add its NuGet package to your project -- either <code>Ammy.WPF</code>, <code>Ammy.UWP</code>, or <code>Ammy.XamarinForms</code>, depending on your platform.</p>
<p>Although technically not required, you will definitely want to also install the <a href="https://marketplace.visualstudio.com/items?itemName=ionoy.Ammy">Visual Studio extension</a> as it provides syntax highlighting and Intellisense support.</p>
<h2>Syntax</h2>
<p>AmmyUI works by letting you define your views in its custom language, and then converting them to XAML at build time. The syntax looks a lot like JSON but with some nuances and shortcuts, as you can see here:</p>
<pre class="language-json5"><code class="language-json5">Window <span class="token string">"MainWindow"</span> <span class="token punctuation">{</span>
  <span class="token property unquoted">Width</span><span class="token operator">:</span> <span class="token number">200</span>
  <span class="token property unquoted">Height</span><span class="token operator">:</span> <span class="token number">100</span>
  TextBlock <span class="token punctuation">{</span>
    <span class="token property unquoted">Text</span><span class="token operator">:</span> <span class="token string">"Hello, World!"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In the above statement, we declare a window, set its name and size, and add a text block child to it.</p>
<p>Compare this to an equivalent in XAML:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MainWindow<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello, World!<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Window</span><span class="token punctuation">></span></span>
</code></pre>
<p>Although on its own this already looks a bit cleaner, Ammy's true power lies in its extensive set of features.</p>
<h3>Names and resource keys</h3>
<p>Names and keys are first-class citizens and can be defined really quickly using shortcuts:</p>
<pre class="language-json5"><code class="language-json5"><span class="token comment">// Grid with a name</span>
Grid <span class="token string">"MyGrid"</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Grid with a resource key</span>
Grid Key=<span class="token string">"MyGrid"</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<h3>Using statements</h3>
<p>Instead of defining aliases for XML namespaces, Ammy is using an approach identical to C# -- <code>using</code> directives.</p>
<p>This means you can import an entire CLR namespace and stop worrying about prefixing nodes with namespace aliases.</p>
<p>For example, if you are using <a href="https://github.com/ButchersBoy/MaterialDesignInXamlToolkit">MaterialDesignInXamlToolkit</a> and want to use a <code>Card</code> control in your layout, you can simply do this:</p>
<pre class="language-json5"><code class="language-json5">using MaterialDesignThemes.Wpf

Window <span class="token string">"DiscordChatExporter.Views.MainWindow"</span> <span class="token punctuation">{</span>
  <span class="token property unquoted">Title</span><span class="token operator">:</span> <span class="token string">"DiscordChatExporter"</span>
  <span class="token property unquoted">Width</span><span class="token operator">:</span> <span class="token number">600</span>
  <span class="token property unquoted">Height</span><span class="token operator">:</span> <span class="token number">550</span>

  <span class="token comment">// MaterialDesignThemes.Wpf.Card</span>
  Card <span class="token punctuation">{</span>
    <span class="token property unquoted">Padding</span><span class="token operator">:</span> <span class="token number">8</span>
    <span class="token property unquoted">Margin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>

    TextBlock <span class="token punctuation">{</span>
      <span class="token property unquoted">Text</span><span class="token operator">:</span> <span class="token string">"Hello, World!"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3>Binding shortcuts</h3>
<p>Ammy also provides lots of shortcuts for declaring bindings. A very basic binding can be set up like this:</p>
<pre class="language-json5"><code class="language-json5">TextBlock <span class="token punctuation">{</span>
  <span class="token property unquoted">Text</span><span class="token operator">:</span> bind Text
<span class="token punctuation">}</span>
</code></pre>
<p>You can also specify binding source using a special <code>from</code> keyword. Here's how you can easily bind to a property of a different control:</p>
<pre class="language-json5"><code class="language-json5">TextBlock <span class="token string">"OtherTextBlock"</span> <span class="token punctuation">{</span>
  <span class="token property unquoted">Text</span><span class="token operator">:</span> <span class="token string">"Hello, World!"</span>
<span class="token punctuation">}</span>

TextBlock <span class="token punctuation">{</span>
  <span class="token property unquoted">Text</span><span class="token operator">:</span> bind Text from <span class="token string">"OtherTextBlock"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>There are many other things you can use with <code>from</code>, namely <code>$this</code>, <code>$template</code>, <code>$ancestor&#x3C;TextBlock>(3)</code>, <code>$previous</code>, <code>SomeType.StaticProperty</code>, <code>$resource SomeResource</code> -- each of them replaces a normally rather lengthy binding declaration in XAML.</p>
<h3>Resource shortcuts</h3>
<p>Similar to bindings, Ammy has a few shortcuts for referencing resources as well:</p>
<pre class="language-json5"><code class="language-json5">TextBlock <span class="token punctuation">{</span>
  <span class="token property unquoted">Foreground</span><span class="token operator">:</span> resource <span class="token string">"ForegroundBrush"</span>     <span class="token comment">// static</span>
  <span class="token property unquoted">Foreground</span><span class="token operator">:</span> dyn resource <span class="token string">"ForegroundBrush"</span> <span class="token comment">// dynamic</span>
<span class="token punctuation">}</span>
</code></pre>
<h3>Inline binding converters</h3>
<p>This is easily my most favorite feature, something that lets you forget about <code>BoolToVisibilityConverter</code>, <code>InvertBoolToVisibilityConverter</code> and the likes.</p>
<p>In Ammy you can specify a converter right inside your binding declaration:</p>
<pre class="language-json5"><code class="language-json5">TextBlock <span class="token punctuation">{</span>
  <span class="token property unquoted">Visibility</span><span class="token operator">:</span> bind IsTextAvailable
              convert (bool b) => b ? Visibility.<span class="token property unquoted">Visible</span> <span class="token operator">:</span> Visibility.Collapsed
<span class="token punctuation">}</span>
</code></pre>
<p>You can write most C# code inside a converter, invoke your own methods, use your own classes, etc.</p>
<h3>Variables</h3>
<p>This framework also offers some features to help you keep your code DRY. For example, you can declare variables and use them in different ways:</p>
<pre class="language-json5"><code class="language-json5">$primaryColor = <span class="token string">"#343838"</span>
$propertyName = <span class="token string">"Text"</span>

TextBlock <span class="token punctuation">{</span>
  <span class="token property unquoted">Foreground</span><span class="token operator">:</span> SolidColorBrush <span class="token punctuation">{</span> <span class="token property unquoted">Color</span><span class="token operator">:</span> $primaryColor <span class="token punctuation">}</span>
  <span class="token property unquoted">Text</span><span class="token operator">:</span> bind $propertyName
<span class="token punctuation">}</span>
</code></pre>
<h3>Mixins</h3>
<p>You can also define mixins, which are reusable sets of properties that can be included in your controls:</p>
<pre class="language-json5"><code class="language-json5">mixin Centered() for TextBlock <span class="token punctuation">{</span>
  <span class="token property unquoted">TextAlignment</span><span class="token operator">:</span> Center
<span class="token punctuation">}</span>

TextBlock <span class="token punctuation">{</span>
  #Centered()
<span class="token punctuation">}</span>
</code></pre>
<p>Mixins can also take any number of parameters, some of which can be optional:</p>
<pre class="language-json5"><code class="language-json5">mixin Cell (row = none<span class="token punctuation">,</span> column = none<span class="token punctuation">,</span> rowSpan = none<span class="token punctuation">,</span> columnSpan = none) for FrameworkElement <span class="token punctuation">{</span>
  Grid.<span class="token property unquoted">Row</span><span class="token operator">:</span> $row
  Grid.<span class="token property unquoted">Column</span><span class="token operator">:</span> $column
  Grid.<span class="token property unquoted">RowSpan</span><span class="token operator">:</span> $rowSpan
  Grid.<span class="token property unquoted">ColumnSpan</span><span class="token operator">:</span> $columnSpan
<span class="token punctuation">}</span>

TextBlock <span class="token punctuation">{</span>
  <span class="token comment">// Row 0, Col 2, RowSpan 0, ColSpan 0</span>
  #Cell(<span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span>)
<span class="token punctuation">}</span>
</code></pre>
<p>The AmmyUI NuGet package also comes with quite a few pre-defined mixins that can help you develop your app more rapidly.</p>
<h3>Aliases</h3>
<p>Alias is sort of similar to a mixin, except that it's used to essentially create templates for your UI elements.</p>
<pre class="language-json5"><code class="language-json5">alias BigCenteredTextBlock(text) <span class="token punctuation">{</span>
  TextBlock <span class="token punctuation">{</span>
    <span class="token property unquoted">HorizontalAlignment</span><span class="token operator">:</span> Center
    <span class="token property unquoted">FontSize</span><span class="token operator">:</span> <span class="token number">24</span>
    <span class="token property unquoted">Text</span><span class="token operator">:</span> $text
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Grid <span class="token punctuation">{</span>
  @BigCenteredTextBlock(<span class="token string">"Hello, World!"</span>) <span class="token punctuation">{</span>
    <span class="token property unquoted">Foreground</span><span class="token operator">:</span> Red
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>My experience</h2>
<p>I think AmmyUI is a very interesting project and highlights how much better WPF could've been if it didn't involve XAML.</p>
<p>Ultimately, I don't think Ammy is production ready yet but I recommend trying it out in one of your side projects.</p>]]></description><link>http://localhost:3000/blog/wpf-frontend-using-ammyui</link><guid isPermaLink="false">http://localhost:3000/blog/wpf-frontend-using-ammyui</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[IIS Idle Timeout Workaround]]></title><description><![CDATA[<p>Web applications hosted in IIS adhere to the <em>Idle Timeout</em> setting. It defines a time period of inactivity after which an application is shut down. Subsequent requests will trigger the application to start up again, but it usually takes a while -- this rather small ASP.net Core website takes around 10 seconds to start and respond to the first request.</p>
<p>If you have access to the IIS Manager, it's possible to change the timeout or disable it altogether, but this is not an option for those using shared hosting.</p>
<p>The workaround seems pretty obvious -- we just need to keep sending requests to prevent IIS from killing our application. Default idle timeout is 20 minutes so you would need to send requests at least this often, although some hosting providers might have different settings.</p>
<p>Problem is, however, simply pinging the host is not enough to keep it alive, we need to send actual HTTP requests. I've tried many uptime monitors and the only one that satisfied this criteria was Application Insight and its <em>Availability</em> feature.</p>
<h2>Using Application Insights to poll a website</h2>
<p>Application Insights offers a very useful feature called <em>Availability</em> -- it lets you create tests that check your web app's availability and have them run as often as every 5 minutes. Unlike other uptime monitors, these tests actually send <code>GET</code> requests to your app instead of simply pinging the host.</p>
<p>The best part is that you can create an Application Insights resource on a free Azure account, and you don't even need to have it properly configured. In fact, we won't even be using the rest of Application Insights, only the <em>Availability</em> feature.</p>
<p>To set up availability tests, go to <a href="https://portal.azure.com/">Azure Portal</a> and add a new Application Insights resource.</p>
<p><img src="http://localhost:3000/Step1.png" alt="create new resource"></p>
<p>Navigate to <strong>Availability</strong> under <strong>Investigate</strong> section. Find the <strong>Add test</strong> button to create a new test.</p>
<p><img src="http://localhost:3000/Step2.png" alt="add test"></p>
<p>Configure the test with your URL and click <strong>Create</strong>.</p>
<p><img src="http://localhost:3000/Step3.png" alt="configure test"></p>
<p>Once it's set up, Azure will poll your website every few minutes, keeping it alive and sending you alerts if it goes down.</p>]]></description><link>http://localhost:3000/blog/iis-idle-timeout-workaround</link><guid isPermaLink="false">http://localhost:3000/blog/iis-idle-timeout-workaround</guid><category><![CDATA[web]]></category><category><![CDATA[azure]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Thu, 16 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Additional NuGet Files in New Project Format]]></title><description><![CDATA[<p><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/csproj">New csproj format</a>, among other things, has an option to generate a NuGet package on every successful build. It resolves dependencies, target frameworks and documentation automatically and doesn't require a predefined nuspec file as all metadata is now also part of the csproj file.</p>
<p>Sometimes NuGet packages may require additional files to work -- a native library or a CLI executable, for example. These dependencies are not resolved automatically but still need to be somehow included in the package.</p>
<p>When defining a nuspec file manually, you can include such files by listing them in the <code>&#x3C;Files></code> section. To instruct the referencing project to copy these files to the output folder, you can add a <code>.targets</code> file which will extend the build with additional steps.</p>
<p>You can still resort to using a manually defined nuspec file in the new csproj format by setting the <code>&#x3C;NuspecFile></code> property, however that's not very fun.</p>
<p>At the time of writing, the new csproj format is barely covered in documentation. My challenge-driven friend and coworker <strong>Ihor Nechyporuk</strong> spent multiple hours scavenging internet for clues and finally found a way to get it properly working.</p>
<p>Let's take look at some of the solutions.</p>
<h2>Solution for new project formats only</h2>
<p>The problem is really easy to solve if you, for some reason, don't intend to support older project formats. All you need to do is include the following snippet in your csproj:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&#x3C;!-- ... --></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Content</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SOME_NATIVE_LIBRARY.dll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Pack</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Pack</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>PackageCopyToOutput</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>PackageCopyToOutput</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Content</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Project</span><span class="token punctuation">></span></span>
</code></pre>
<p>This will make sure the file is copied to the output directory when building or when referencing this project either directly or as a package.</p>
<p>It will, however, not work if your package is referenced by a project using the older format.</p>
<h2>Solution for all project formats</h2>
<p>To make it work for both old and new project formats, we can use an alternative approach that involves a custom <code>.targets</code> file that links the additional dependencies.</p>
<p>This file should have the same name as the NuGet package. Let's pretend our project and package are both named <em>Example</em>, which means the targets file should be named <em>Example.targets</em>.</p>
<p>The content of the file should look like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/developer/msbuild/2003<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ItemGroup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>None</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$(MSBuildThisFileDirectory)SOME_NATIVE_LIBRARY.dll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Link</span><span class="token punctuation">></span></span>SOME_NATIVE_LIBRARY.dll<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Link</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>CopyToOutputDirectory</span><span class="token punctuation">></span></span>Always<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>CopyToOutputDirectory</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>None</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ItemGroup</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Project</span><span class="token punctuation">></span></span>
</code></pre>
<p>We can include the targets file in our project by simply adding an <code>&#x3C;Import></code> element to the <code>&#x3C;Project></code> node:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&#x3C;!-- ... --></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Import</span> <span class="token attr-name">Project</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Example.targets<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Project</span><span class="token punctuation">></span></span>
</code></pre>
<p>This will cause MSBuild to copy <code>SOME_NATIVE_LIBRARY.dll</code> to output directory on every build.</p>
<p>However, to make sure the external file and targets are added into the NuGet package we also need to add an additional item group:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token comment">&#x3C;!-- ... --></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Import</span> <span class="token attr-name">Project</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Example.targets<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ItemGroup</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>None</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SOME_NATIVE_LIBRARY.dll;Example.targets<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Pack</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Pack</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>PackagePath</span><span class="token punctuation">></span></span>build<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>PackagePath</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>None</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ItemGroup</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Project</span><span class="token punctuation">></span></span>
</code></pre>]]></description><link>http://localhost:3000/blog/additional-nuget-files-in-new-csproj</link><guid isPermaLink="false">http://localhost:3000/blog/additional-nuget-files-in-new-csproj</guid><category><![CDATA[dotnet]]></category><category><![CDATA[nuget]]></category><category><![CDATA[msbuild]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sun, 05 Nov 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hotkey Editor Control in WPF]]></title><description><![CDATA[<p>GUI applications sometimes offer a way for users to configure hotkeys, typically using a textbox that records combination of key presses inside of it. Such control doesn't come out of the box with WPF but we can implement it ourselves.</p>
<h2>Hotkey class</h2>
<p>WPF has two useful enumerations for this task -- <code>System.Windows.Input.Key</code> and <code>System.Windows.Input.ModifierKeys</code>. Let's make a class that encapsulates the values of those enums and call it <code>Hotkey</code>.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hotkey</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Key</span> Key <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">ModifierKeys</span> Modifiers <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Hotkey</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token class-name">ModifierKeys</span> modifiers<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        Modifiers <span class="token operator">=</span> modifiers<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifiers<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ModifierKeys<span class="token punctuation">.</span>Control<span class="token punctuation">)</span><span class="token punctuation">)</span>
            str<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Ctrl + "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifiers<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ModifierKeys<span class="token punctuation">.</span>Shift<span class="token punctuation">)</span><span class="token punctuation">)</span>
            str<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Shift + "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifiers<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ModifierKeys<span class="token punctuation">.</span>Alt<span class="token punctuation">)</span><span class="token punctuation">)</span>
            str<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Alt + "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Modifiers<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>ModifierKeys<span class="token punctuation">.</span>Windows<span class="token punctuation">)</span><span class="token punctuation">)</span>
            str<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">"Win + "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        str<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>An instance of this class is created by specifying a key along with a combination of modifiers (if any) that need to be pressed to execute a shortcut.</p>
<p><code>ToString()</code> method will be called by WPF to display an instance of the class inside a textbox if there's no converter set. It's also used by Visual Studio when debugging, which makes it more convenient. This method will generate a string that represents the current hotkey, for example <code>Ctrl + Alt + K</code>.</p>
<h2>WPF user control</h2>
<p>To make the actual WPF control, you can either derive from <code>TextBox</code> or make your own <code>UserControl</code>. I chose the latter, mainly for two reasons:</p>
<ul>
<li>I can hide all of the inherent textbox properties that aren't applicable for my control.</li>
<li>I have fewer limitations in case I need to replace textbox with a different control or add something on top of it.</li>
</ul>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>UserControl</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Your.Namespace.HotkeyEditorControl<span class="token punctuation">"</span></span>
             <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/blend/2008<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">xmlns:</span>mc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/markup-compatibility/2006<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserControl<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">d:</span>DesignHeight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">d:</span>DesignWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>
             <span class="token attr-name"><span class="token namespace">mc:</span>Ignorable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TextBox</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HotkeyTextBox<span class="token punctuation">"</span></span>
             <span class="token attr-name">HorizontalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span>
             <span class="token attr-name">VerticalContentAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span>
             <span class="token attr-name">IsReadOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span>
             <span class="token attr-name">IsReadOnlyCaretVisible</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>False<span class="token punctuation">"</span></span>
             <span class="token attr-name">IsUndoEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>False<span class="token punctuation">"</span></span>
             <span class="token attr-name">PreviewKeyDown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HotkeyTextBox_PreviewKeyDown<span class="token punctuation">"</span></span>
             <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding Hotkey, ElementName=UserControl, Mode=OneWay, TargetNullValue=<span class="token entity named-entity" title="<">&#x26;lt;</span> not set <span class="token entity named-entity" title=">">&#x26;gt;</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TextBox.ContextMenu</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ContextMenu</span> <span class="token attr-name">Visibility</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Collapsed<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>TextBox.ContextMenu</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>TextBox</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>UserControl</span><span class="token punctuation">></span></span>
</code></pre>
<p>There are a few important things we need to configure in our internal <code>TextBox</code>.</p>
<p>First of all, it shouldn't allow manual text input, so I set <code>IsReadOnly</code> to <code>true</code>.</p>
<p>Second of all, it'd be best to remove the caret since it isn't useful in any way. Setting <code>IsReadOnlyCaretVisible</code> to <code>false</code> takes cares of that.</p>
<p>We also don't want it to keep the undo/redo history so let's disable <code>IsUndoEnabled</code> as well.</p>
<p>Finally, WPF textboxes have a default context menu with buttons like copy, cut, paste, etc. which we don't need either. We can disable it by setting its visibility to <code>Collapsed</code>.</p>
<p>The text property is bound to the <code>Hotkey</code> property using <code>OneWay</code> mode. The latter is important because we are setting the value of <code>Hotkey</code> from code-behind. This binding is only used to update the text inside the textbox.</p>
<p>As for the code-behind, it looks like this:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">HotkeyEditorControl</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> HotkeyProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Hotkey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Hotkey</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HotkeyEditorControl</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token type-expression class-name">Hotkey</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                FrameworkPropertyMetadataOptions<span class="token punctuation">.</span>BindsTwoWayByDefault<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Hotkey</span> Hotkey
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token punctuation">(</span>Hotkey<span class="token punctuation">)</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>HotkeyProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>HotkeyProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">HotkeyEditorControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HotkeyTextBox_PreviewKeyDown</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">KeyEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Don't let the event pass further</span>
        <span class="token comment">// because we don't want standard textbox shortcuts working</span>
        e<span class="token punctuation">.</span>Handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// Get modifiers and key data</span>
        <span class="token class-name"><span class="token keyword">var</span></span> modifiers <span class="token operator">=</span> Keyboard<span class="token punctuation">.</span>Modifiers<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span> e<span class="token punctuation">.</span>Key<span class="token punctuation">;</span>

        <span class="token comment">// When Alt is pressed, SystemKey is used instead</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> Key<span class="token punctuation">.</span>System<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            key <span class="token operator">=</span> e<span class="token punctuation">.</span>SystemKey<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Pressing delete, backspace or escape without modifiers clears the current value</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers <span class="token operator">==</span> ModifierKeys<span class="token punctuation">.</span>None <span class="token operator">&#x26;&#x26;</span>
            <span class="token punctuation">(</span>key <span class="token operator">==</span> Key<span class="token punctuation">.</span>Delete <span class="token operator">||</span> key <span class="token operator">==</span> Key<span class="token punctuation">.</span>Back <span class="token operator">||</span> key <span class="token operator">==</span> Key<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Hotkey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// If no actual key was pressed - return</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> Key<span class="token punctuation">.</span>LeftCtrl <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>RightCtrl <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>LeftAlt <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>RightAlt <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>LeftShift <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>RightShift <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>LWin <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>RWin <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>Clear <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>OemClear <span class="token operator">||</span>
            key <span class="token operator">==</span> Key<span class="token punctuation">.</span>Apps<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Update the value</span>
        Hotkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Hotkey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To capture keystrokes we're processing the <code>PreviewKeyDown</code> event because it also lets us disable standard textbox shortcuts such as copy, cut, paste, etc.</p>
<ol>
<li>It sets <code>e.Handled</code> to <code>true</code> so that the events don't pass further down the chain.</li>
<li>It extracts information about what key is pressed, along with what modifiers. Due to the role of the Alt key in Windows, when it's the only modifier, the actual key will have to be extracted from <code>SystemKey</code> property instead.</li>
<li>It checks if either Delete, Backspace or Escape were pressed and clears the input if so.</li>
</ol>
<p>Finally, here's how the control looks in my app <a href="https://github.com/Tyrrrz/LightBulb">LightBulb</a>:</p>
<p><img src="http://localhost:3000/Example.png" alt="example"></p>]]></description><link>http://localhost:3000/blog/hotkey-editor-control-in-wpf</link><guid isPermaLink="false">http://localhost:3000/blog/hotkey-editor-control-in-wpf</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Thu, 02 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[WndProc in WPF]]></title><description><![CDATA[<p>WndProc is a callback function that takes care of system messages sent from the operating system.</p>
<p>Unlike WinForms, in WPF, it's not directly exposed to you as it's hidden by the framework's layer of abstraction. There are times, however, when you need to process these messages manually, for example when dealing with WinAPI.</p>
<p>Let's look at some ways how we can do it.</p>
<h2>Non-MVVM way</h2>
<p>We can use these special helper methods to get the handle of one of the windows, and then add a hook to it:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> window <span class="token operator">=</span> Application<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>MainWindow<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> source <span class="token operator">=</span> HwndSource<span class="token punctuation">.</span><span class="token function">FromHwnd</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WindowInteropHelper</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span>Handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">AddHook</span><span class="token punctuation">(</span>WndProc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">WndProc</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hwnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> msg<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> wParam<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lParam<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">bool</span></span> handled<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Handle messages...</span>

    <span class="token keyword">return</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>In the example above we use the application's main window as the host, as it typically stays open for as long as the application is running. You can specify a different window as a parameter to <code>FromVisual(…)</code> method, but then make sure to call <code>source.RemoveHook(…)</code> and <code>source.Dispose()</code> after you're done.</p>
<p>The above approach suffers from not being MVVM-friendly -- the <code>WndProc</code> method, which will most likely be defined in the model layer, is actually coupled to a window. As a result, it can introduce a circular dependency between the view and the model, where one will wait on the other to initialize.</p>
<h2>MVVM way</h2>
<p>As an alternative, we can decouple message processing from the view layer by creating a specialized invisible "sponge" window.</p>
<p>Conveniently, <code>System.Windows.Forms.NativeWindow</code> fits exactly this purpose -- it's a low level window class that does nothing else but listen to system messages. We can use it be adding a reference to <code>System.Windows.Forms</code>.</p>
<p>Here is how I defined my sponge window:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">SpongeWindow</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">NativeWindow</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler<span class="token punctuation">&#x3C;</span>Message<span class="token punctuation">></span></span> WndProcCalled<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SpongeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">CreateHandle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CreateParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WndProc</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name">Message</span> m<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        WndProcCalled<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">WndProc</span><span class="token punctuation">(</span><span class="token keyword">ref</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// don't forget this line</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Make sure you don't forget to call <code>base.WndProc(ref m)</code>, otherwise the window will not initialize correctly.</p>
<p>Now, assuming we have some sort of <code>WndProcService</code>, we can use our sponge window like so:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WndProcService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SpongeWindow</span> _sponge<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">WndProcService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _sponge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SpongeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _sponge<span class="token punctuation">.</span>WndProcCalled <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ProcessMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">RegisterMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RegisterMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Some Windows API calls here to register</span>
        <span class="token comment">// window messages with sponge's handle</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Here we process incoming messages</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _sponge<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>By handling the <code>WndProcCalled</code> event you can listen to incoming messages. Typically, you would want to call some WinAPI method that subscribes a window to additional WndProc messages using its handle, e.g. <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerpowersettingnotification">RegisterPowerSettingNotification</a> or <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerhotkey">RegisterHotKey</a>.</p>
<p>For example, if we were interested in registering a global hotkey and listening to its events, we could do it in such way:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalHotkeyService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">,</span> EntryPoint <span class="token operator">=</span> <span class="token string">"RegisterHotKey"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">RegisterHotKey</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hWnd<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> fsModifiers<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> vk<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SpongeWindow</span> _sponge<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">GlobalHotkeyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _sponge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SpongeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _sponge<span class="token punctuation">.</span>WndProcCalled <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ProcessMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">RegisterMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">RegisterMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Register F1 as a global hotkey</span>
        <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">RegisterHotKey</span><span class="token punctuation">(</span>_sponge<span class="token punctuation">.</span>Handle<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Only interested in hotkey messages so skip others</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Msg <span class="token operator">!=</span> <span class="token number">0x0312</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token comment">// Get hotkey id</span>
        <span class="token class-name"><span class="token keyword">var</span></span> id <span class="token operator">=</span> message<span class="token punctuation">.</span>WParam<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Do something else...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _sponge<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>]]></description><link>http://localhost:3000/blog/wndproc-in-wpf</link><guid isPermaLink="false">http://localhost:3000/blog/wndproc-in-wpf</guid><category><![CDATA[dotnet]]></category><category><![CDATA[csharp]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Thu, 02 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[WPF ListBox SelectedItems TwoWay Binding]]></title><description><![CDATA[<p>For some unclear reasons, WPF's <code>ListBox</code> control does not allow two-way binding on <code>SelectedItems</code> property the way it does with <code>SelectedItem</code>. This could have been very useful when using multi-select to bind the whole list of selected items to the view model.</p>
<p>Interestingly, you can still call <code>Add()</code>, <code>Remove()</code>, <code>Clear()</code> methods on <code>ListBox.SelectedItems</code> which updates the selection correctly, so it just comes down to implementing a behavior that makes the property bindable.</p>
<h2>Behavior implementation</h2>
<p>Here's the behavior that allows two-way binding on <code>SelectedItems</code>:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListBoxSelectionBehavior<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Behavior<span class="token punctuation">&#x3C;</span>ListBox<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> SelectedItemsProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>SelectedItems<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IList</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ListBoxSelectionBehavior</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> FrameworkPropertyMetadataOptions<span class="token punctuation">.</span>BindsTwoWayByDefault<span class="token punctuation">,</span>
                OnSelectedItemsChanged<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSelectedItemsChanged</span><span class="token punctuation">(</span><span class="token class-name">DependencyObject</span> sender<span class="token punctuation">,</span> <span class="token class-name">DependencyPropertyChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> behavior <span class="token operator">=</span> <span class="token punctuation">(</span>ListBoxSelectionBehavior<span class="token punctuation">)</span> sender<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>_modelHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>AssociatedObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span><span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _viewHandled<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _modelHandled<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IList</span> SelectedItems
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token punctuation">(</span>IList<span class="token punctuation">)</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>SelectedItemsProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>SelectedItemsProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Propagate selected items from model to view</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _viewHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        AssociatedObject<span class="token punctuation">.</span>SelectedItems<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SelectedItems <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> SelectedItems<span class="token punctuation">)</span>
                AssociatedObject<span class="token punctuation">.</span>SelectedItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        _viewHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Propagate selected items from view to model</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnListBoxSelectionChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">SelectionChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_viewHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>SourceCollection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        SelectedItems <span class="token operator">=</span> AssociatedObject<span class="token punctuation">.</span>SelectedItems<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Re-select items when the set of items changes</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnListBoxItemsChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">NotifyCollectionChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_viewHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>SourceCollection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        AssociatedObject<span class="token punctuation">.</span>SelectionChanged <span class="token operator">+=</span> OnListBoxSelectionChanged<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>INotifyCollectionChanged<span class="token punctuation">)</span> AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span>CollectionChanged <span class="token operator">+=</span> OnListBoxItemsChanged<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>inheritdoc</span> <span class="token punctuation">/></span></span></span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDetaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnDetaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AssociatedObject<span class="token punctuation">.</span>SelectionChanged <span class="token operator">-=</span> OnListBoxSelectionChanged<span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>INotifyCollectionChanged<span class="token punctuation">)</span> AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span>CollectionChanged <span class="token operator">-=</span> OnListBoxItemsChanged<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The behavior above defines its own <code>SelectedItems</code> property, identical to the one in <code>ListBox</code>, except it can be bound to and is not read-only.</p>
<p>When the property is changed from the view model, the <code>OnSelectedItemsChanged(…)</code> method is called, which is where the changes are propagated to the view. We do that in the <code>SelectItems()</code> method where we just clear and add new items to the <code>ListBox.SelectedItems</code> collection.</p>
<p>When the change is triggered by the view, we call the <code>OnListBoxSelectionChanged(…)</code> method. To update the selected items on the view model, we copy the items from <code>ListBox.SelectedItems</code> to our own <code>SelectedItems</code> collection.</p>
<p>Note, however, that this behavior is generic because we expect to work with a collection like <code>IReadOnlyList&#x3C;T></code> on the view model side. WPF doesn't support generic behaviors so we have to subtype this class for each specific data type:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyObjectListBoxSelectionBehavior</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ListBoxSelectionBehavior<span class="token punctuation">&#x3C;</span>MyObject<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Usage</h2>
<p>We can now use this behavior by initializing it in XAML, like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ListBox</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding Items}<span class="token punctuation">"</span></span> <span class="token attr-name">SelectionMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token namespace">i:</span>Interaction.Behaviors</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token namespace">behaviors:</span>MyObjectListBoxSelectionBehavior</span> <span class="token attr-name">SelectedItems</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding SelectedItems}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token namespace">i:</span>Interaction.Behaviors</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>
        <span class="token comment">&#x3C;!-- ... --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ListBox</span><span class="token punctuation">></span></span>
</code></pre>
<h2>Adding support for SelectedValuePath</h2>
<p>Another useful feature of <code>ListBox</code> is that you can make a binding proxy using <code>SelectedValuePath</code> and <code>SelectedValue</code>. Setting <code>SelectedValuePath</code> lets you specify a member path to be evaluated by <code>SelectedValue</code>.</p>
<p>The great part about it is that it also works the other way around -- changing <code>SelectedValue</code> will use the member path in <code>SelectedValuePath</code> to update <code>SelectedItem</code> with a new reference.</p>
<p>This could also be very useful for multi-select, but unfortunately the plural version, <code>SelectedValues</code>, does not exist. Let's extend our behavior to add support for it.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListBoxSelectionBehavior<span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Behavior<span class="token punctuation">&#x3C;</span>ListBox<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> SelectedItemsProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>SelectedItems<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IList</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ListBoxSelectionBehavior</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> FrameworkPropertyMetadataOptions<span class="token punctuation">.</span>BindsTwoWayByDefault<span class="token punctuation">,</span>
                OnSelectedItemsChanged<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> SelectedValuesProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>SelectedValues<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IList</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ListBoxSelectionBehavior</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> FrameworkPropertyMetadataOptions<span class="token punctuation">.</span>BindsTwoWayByDefault<span class="token punctuation">,</span>
                OnSelectedValuesChanged<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSelectedItemsChanged</span><span class="token punctuation">(</span><span class="token class-name">DependencyObject</span> sender<span class="token punctuation">,</span> <span class="token class-name">DependencyPropertyChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> behavior <span class="token operator">=</span> <span class="token punctuation">(</span>ListBoxSelectionBehavior<span class="token punctuation">)</span> sender<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>_modelHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>AssociatedObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span><span class="token function">SelectedItemsToValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span><span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSelectedValuesChanged</span><span class="token punctuation">(</span><span class="token class-name">DependencyObject</span> sender<span class="token punctuation">,</span> <span class="token class-name">DependencyPropertyChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> behavior <span class="token operator">=</span> <span class="token punctuation">(</span>ListBoxSelectionBehavior<span class="token punctuation">)</span> sender<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>_modelHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>AssociatedObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span><span class="token function">SelectedValuesToItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span><span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> <span class="token function">GetDeepPropertyValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string character">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> split <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string character">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> remainingProperty <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string character">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                obj <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                path <span class="token operator">=</span> remainingProperty<span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _viewHandled<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _modelHandled<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IList</span> SelectedItems
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token punctuation">(</span>IList<span class="token punctuation">)</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>SelectedItemsProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>SelectedItemsProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IList</span> SelectedValues
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token punctuation">(</span>IList<span class="token punctuation">)</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>SelectedValuesProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>SelectedValuesProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Propagate selected items from model to view</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _viewHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        AssociatedObject<span class="token punctuation">.</span>SelectedItems<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SelectedItems <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> SelectedItems<span class="token punctuation">)</span>
                AssociatedObject<span class="token punctuation">.</span>SelectedItems<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        _viewHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update SelectedItems based on SelectedValues</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SelectedValuesToItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SelectedValues <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            SelectedItems <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            SelectedItems <span class="token operator">=</span>
                AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>i <span class="token operator">=></span> SelectedValues<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token function">GetDeepPropertyValue</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> AssociatedObject<span class="token punctuation">.</span>SelectedValuePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update SelectedValues based on SelectedItems</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SelectedItemsToValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SelectedItems <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            SelectedValues <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            SelectedValues <span class="token operator">=</span>
                SelectedItems<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>i <span class="token operator">=></span> <span class="token function">GetDeepPropertyValue</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> AssociatedObject<span class="token punctuation">.</span>SelectedValuePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Propagate selected items from view to model</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnListBoxSelectionChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">SelectionChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_viewHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>SourceCollection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        SelectedItems <span class="token operator">=</span> AssociatedObject<span class="token punctuation">.</span>SelectedItems<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Cast</span><span class="token generic class-name"><span class="token punctuation">&#x3C;</span><span class="token keyword">object</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Re-select items when the set of items changes</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnListBoxItemsChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">NotifyCollectionChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_viewHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>SourceCollection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        AssociatedObject<span class="token punctuation">.</span>SelectionChanged <span class="token operator">+=</span> OnListBoxSelectionChanged<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>INotifyCollectionChanged<span class="token punctuation">)</span> AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span>CollectionChanged <span class="token operator">+=</span> OnListBoxItemsChanged<span class="token punctuation">;</span>

        _modelHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">SelectedValuesToItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">SelectItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _modelHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>inheritdoc</span> <span class="token punctuation">/></span></span></span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDetaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnDetaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AssociatedObject<span class="token punctuation">.</span>SelectionChanged <span class="token operator">-=</span> OnListBoxSelectionChanged<span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>INotifyCollectionChanged<span class="token punctuation">)</span> AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span>CollectionChanged <span class="token operator">-=</span> OnListBoxItemsChanged<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I added another dependency property for <code>SelectedValues</code> and a few new methods.</p>
<p><code>SelectedValuesToItems()</code> and <code>SelectedItemsToValues()</code> convert between <code>SelectedItems</code> and <code>SelectedValues</code>, depending on which property was updated. <code>GetDeepPropertyValue(…)</code> is used to extract value of a property using an object and member path -- it's used to establish conformity between items and values.</p>
<h2>Usage with SelectedValuePath</h2>
<p>Now we can specify <code>SelectedValuePath</code> in <code>ListBox</code> and our behavior will allow us to bind the <code>SelectedValues</code> property to model and vice versa.</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ListBox</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding Items}<span class="token punctuation">"</span></span> <span class="token attr-name">SelectedValuePath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span> <span class="token attr-name">SelectionMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token namespace">i:</span>Interaction.Behaviors</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token namespace">behaviors:</span>MyObjectListBoxSelectionBehavior</span> <span class="token attr-name">SelectedValues</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding SelectedValues}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token namespace">i:</span>Interaction.Behaviors</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>
        <span class="token comment">&#x3C;!-- ... --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ListBox.ItemTemplate</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ListBox</span><span class="token punctuation">></span></span>
</code></pre>]]></description><link>http://localhost:3000/blog/wpf-listbox-selecteditems-twoway-binding</link><guid isPermaLink="false">http://localhost:3000/blog/wpf-listbox-selecteditems-twoway-binding</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[csharp]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Tue, 01 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[WPF TreeView SelectedItem TwoWay Binding]]></title><description><![CDATA[<p>The longer I work with WPF, the more I notice how many things it's missing. Recently I realized that <code>TreeView.SelectedItem</code> property is read-only and non-bindable. I think there's no point explaining why binding <code>SelectedItem</code> would be useful, so there should be no surprise in my disappointment.</p>
<p>I googled the problem and every resource I've found was guiding me into either handling it in code-behind or adding <code>IsSelected</code> property to my model class. Both of these approaches suffer from the same problem -- an item won't get selected if its parents are not yet expanded. This was a deal-breaker for me because I wanted the tree view to navigate to the newly selected item, even if it wasn't immediately visible.</p>
<p>I solved this problem by writing a small behavior that takes care of this for me.</p>
<h2>Custom behavior</h2>
<p>I realized that to solve this I would have to traverse the entire hierarchy of tree nodes, but that wasn't the only problem. To access <code>IsSelected</code> and <code>IsExpanded</code> properties I needed to resolve a reference to an instance of <code>TreeViewItem</code>, which is a container that wraps around the data template.</p>
<p>This in itself can be accomplished by using the <code>TreeViewItem.ItemContainerGenerator.ContainerFromItem(…)</code> method. However, if the node is not visible yet then the container is also not initialized, making the method return <code>null</code>.</p>
<p>In order to make our target node visible, we need to expand all of its ancestor nodes one by one, starting from the very top. I naively assumed that by expanding the node from code, its children's item containers will immediately become available but this is not the case because that's handled asynchronously. We can, however, subscribe to the <code>Loaded</code> event of each data item which will trigger once the control has been loaded.</p>
<p>Generally, the approach looks like this:</p>
<ul>
<li>Subscribe to <code>Loaded</code> events of all data items using a style.</li>
<li>When <code>SelectedItem</code> changes, go through all loaded tree nodes and try to locate the target node.</li>
<li>If we manage to find it, select it and exit early.</li>
<li>If we instead find its parent, expand it so that we can continue the search once it's loaded.</li>
<li>When one of the nodes we expanded is loaded, it triggers an event and we start again from the top.</li>
</ul>
<p>Here's the behavior I've implemented:</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeViewSelectionBehavior</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Behavior<span class="token punctuation">&#x3C;</span>TreeView<span class="token punctuation">></span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsChildOfPredicate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> nodeA<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> nodeB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> SelectedItemProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>SelectedItem<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TreeViewSelectionBehavior</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>
                FrameworkPropertyMetadataOptions<span class="token punctuation">.</span>BindsTwoWayByDefault<span class="token punctuation">,</span>
                OnSelectedItemChanged<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> HierarchyPredicateProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>HierarchyPredicate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IsChildOfPredicate</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TreeViewSelectionBehavior</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">DependencyProperty</span> ExpandSelectedProperty <span class="token operator">=</span>
        DependencyProperty<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ExpandSelected<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">bool</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TreeViewSelectionBehavior</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FrameworkPropertyMetadata</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSelectedItemChanged</span><span class="token punctuation">(</span><span class="token class-name">DependencyObject</span> sender<span class="token punctuation">,</span> <span class="token class-name">DependencyPropertyChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> behavior <span class="token operator">=</span> <span class="token punctuation">(</span>TreeViewSelectionBehavior<span class="token punctuation">)</span> sender<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>_modelHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior<span class="token punctuation">.</span>AssociatedObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span><span class="token function">UpdateAllTreeViewItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        behavior<span class="token punctuation">.</span>_modelHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">EventSetter</span> _treeViewItemEventSetter<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">bool</span></span> _modelHandled<span class="token punctuation">;</span>

    <span class="token comment">// Bindable selected item</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> SelectedItem
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token function">GetValue</span><span class="token punctuation">(</span>SelectedItemProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>SelectedItemProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Predicate that checks if two items are hierarchically related</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IsChildOfPredicate</span> HierarchyPredicate
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token punctuation">(</span>IsChildOfPredicate<span class="token punctuation">)</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>HierarchyPredicateProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>HierarchyPredicateProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Should expand selected?</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> ExpandSelected
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>ExpandSelectedProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> <span class="token operator">=></span> <span class="token function">SetValue</span><span class="token punctuation">(</span>ExpandSelectedProperty<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TreeViewSelectionBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _treeViewItemEventSetter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventSetter</span><span class="token punctuation">(</span>FrameworkElement<span class="token punctuation">.</span>LoadedEvent<span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RoutedEventHandler</span><span class="token punctuation">(</span>OnTreeViewItemLoaded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update state of all items starting with given, with optional recursion</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateTreeViewItem</span><span class="token punctuation">(</span><span class="token class-name">TreeViewItem</span> item<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> recurse<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SelectedItem <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> model <span class="token operator">=</span> item<span class="token punctuation">.</span>DataContext<span class="token punctuation">;</span>

        <span class="token comment">// If we find the item we're looking for - select it</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>SelectedItem <span class="token operator">==</span> model <span class="token operator">&#x26;&#x26;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>IsSelected<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span>IsSelected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ExpandSelected<span class="token punctuation">)</span>
                item<span class="token punctuation">.</span>IsExpanded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// If we find the item's parent instead - expand it</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// If HierarchyPredicate is not set, this will always be true</span>
            <span class="token class-name"><span class="token keyword">bool</span></span> isParentOfModel <span class="token operator">=</span> HierarchyPredicate<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>SelectedItem<span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isParentOfModel<span class="token punctuation">)</span>
                item<span class="token punctuation">.</span>IsExpanded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Recurse into children in case some of them are already loaded</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>recurse<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> subitem <span class="token keyword">in</span> item<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> tvi <span class="token operator">=</span> item<span class="token punctuation">.</span>ItemContainerGenerator<span class="token punctuation">.</span><span class="token function">ContainerFromItem</span><span class="token punctuation">(</span>subitem<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">TreeViewItem</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tvi <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token function">UpdateTreeViewItem</span><span class="token punctuation">(</span>tvi<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update state of all items</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateAllTreeViewItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> treeView <span class="token operator">=</span> AssociatedObject<span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> treeView<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> tvi <span class="token operator">=</span> treeView<span class="token punctuation">.</span>ItemContainerGenerator<span class="token punctuation">.</span><span class="token function">ContainerFromItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">TreeViewItem</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tvi <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token function">UpdateTreeViewItem</span><span class="token punctuation">(</span>tvi<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Inject Loaded event handler into ItemContainerStyle</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateTreeViewItemStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">.</span>ItemContainerStyle <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> style <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Style</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TreeViewItem</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                Application<span class="token punctuation">.</span>Current<span class="token punctuation">.</span><span class="token function">TryFindResource</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TreeViewItem</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">Style</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            AssociatedObject<span class="token punctuation">.</span>ItemContainerStyle <span class="token operator">=</span> style<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>AssociatedObject<span class="token punctuation">.</span>ItemContainerStyle<span class="token punctuation">.</span>Setters<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>_treeViewItemEventSetter<span class="token punctuation">)</span><span class="token punctuation">)</span>
            AssociatedObject<span class="token punctuation">.</span>ItemContainerStyle<span class="token punctuation">.</span>Setters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>_treeViewItemEventSetter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTreeViewItemsChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">NotifyCollectionChangedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">UpdateAllTreeViewItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTreeViewSelectedItemChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedPropertyChangedEventArgs<span class="token punctuation">&#x3C;</span><span class="token keyword">object</span><span class="token punctuation">></span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_modelHandled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">.</span>SourceCollection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        SelectedItem <span class="token operator">=</span> args<span class="token punctuation">.</span>NewValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTreeViewItemLoaded</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">RoutedEventArgs</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">UpdateTreeViewItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TreeViewItem<span class="token punctuation">)</span> sender<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        AssociatedObject<span class="token punctuation">.</span>SelectedItemChanged <span class="token operator">+=</span> OnTreeViewSelectedItemChanged<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>INotifyCollectionChanged<span class="token punctuation">)</span> AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span>CollectionChanged <span class="token operator">+=</span> OnTreeViewItemsChanged<span class="token punctuation">;</span>

        <span class="token function">UpdateTreeViewItemStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _modelHandled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">UpdateAllTreeViewItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _modelHandled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDetaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnDetaching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>AssociatedObject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            AssociatedObject<span class="token punctuation">.</span>ItemContainerStyle<span class="token punctuation">?.</span>Setters<span class="token punctuation">?.</span><span class="token function">Remove</span><span class="token punctuation">(</span>_treeViewItemEventSetter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            AssociatedObject<span class="token punctuation">.</span>SelectedItemChanged <span class="token operator">-=</span> OnTreeViewSelectedItemChanged<span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>INotifyCollectionChanged<span class="token punctuation">)</span> AssociatedObject<span class="token punctuation">.</span>Items<span class="token punctuation">)</span><span class="token punctuation">.</span>CollectionChanged <span class="token operator">-=</span> OnTreeViewItemsChanged<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To make it easier to check if a node is a child of another node, I defined a property called <code>HierarchyPredicate</code>. If it's not set, the behavior will just blindly expand all nodes until it finds the item we're looking for. The predicate can help optimize this process.</p>
<p>Once this behavior is attached, it calls <code>UpdateTreeViewItemStyle()</code> to inject an event handler for <code>Loaded</code> event of <code>ItemContainerStyle</code>. We need to listen to this event to handle nodes that were expanded. To ensure maximum compatibility, it extends an existing style if it can find one or creates a new one otherwise.</p>
<p>It also calls <code>UpdateAllTreeViewItems()</code> after attaching. This goes through all of tree view's children and in turn calls <code>UpdateTreeViewItem(…)</code> on them.</p>
<h2>Usage</h2>
<p>You can attach this behavior to a tree view like this:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TreeView</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding Items}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token namespace">i:</span>Interaction.Behaviors</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token namespace">behaviors:</span>TreeViewSelectionBehavior</span> <span class="token attr-name">ExpandSelected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span>
                                             <span class="token attr-name">HierarchyPredicate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding HierarchyPredicate}<span class="token punctuation">"</span></span>
                                             <span class="token attr-name">SelectedItem</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding SelectedItem}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token namespace">i:</span>Interaction.Behaviors</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>TreeView.ItemTemplate</span><span class="token punctuation">></span></span>
        <span class="token comment">&#x3C;!-- ... --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>TreeView.ItemTemplate</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>TreeView</span><span class="token punctuation">></span></span>
</code></pre>
<p>When <code>SelectedItem</code> is changed from the view model, the behavior traverses the hierarchy while utilizing <code>HierarchyPredicate</code> to find the correct node, ultimately selecting it. An optional parameter <code>ExpandSelected</code> dictates whether the selected item should be expanded as well.</p>
<p>If the user changes <code>SelectedItem</code> from the UI, it works like you would expect and propagates the new value to the view model.</p>]]></description><link>http://localhost:3000/blog/wpf-treeview-selecteditem-twoway-binding</link><guid isPermaLink="false">http://localhost:3000/blog/wpf-treeview-selecteditem-twoway-binding</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[csharp]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sun, 30 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Code-Behind for ResourceDictionary in WPF]]></title><description><![CDATA[<p>As any WPF developer knows, XAML can get messy due to all the nested elements and indentation. One common problematic area is data templates -- they are naturally decoupled from the surrounding layout but are still nested quite deep in the hierarchy.</p>
<p>To deal with it, you can refactor some of the commonly used objects as resources into a <code>ResourceDictionary</code>, which can also be self-contained in its own separate XAML file. Dictionaries can later be referenced using the <code>Source</code> property or by including them in a <code>MergedDictionary</code>.</p>
<p>Sometimes the XAML you want to refactor can also contain some logic in code-behind, such as event handlers. By default, when you create a new resource dictionary, it comes without a code-behind class, but it's possible to add it. Let's see how we can do it.</p>
<h2>Linking a resource dictionary to a class</h2>
<p>Let's assume we already have a resource dictionary created and it's in a file called <code>MyResourceDictionary.xaml</code>.</p>
<p>To add some code-behind to it, we just need to create a new <em>partial</em> class. Conventionally, the code-behind file should be in the same namespace as the dictionary and have the same file name. For that reason we will name this class <code>MyResourceDictionary</code> and save it as <code>MyResourceDictionary.xaml.cs</code>.</p>
<pre class="language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">MyProject</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MyResourceDictionary</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, in order to link the XAML to our newly created code-behind, we simply need to add the <code>x:Class</code> attribute, like so:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ResourceDictionary</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyProject.MyResourceDictionary<span class="token punctuation">"</span></span>
                    <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>
                    <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>
                    <span class="token attr-name"><span class="token namespace">xmlns:</span>i</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/expression/2010/interactivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment">&#x3C;!-- ... --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ResourceDictionary</span><span class="token punctuation">></span></span>
</code></pre>
<p>The value in <code>x:Class</code> should be equal to the fully qualified name of the code-behind class that we've just created. Once you set it up, Visual Studio will be able to register event handlers directly in your code-behind, the same way it does for Windows, Pages, etc.</p>]]></description><link>http://localhost:3000/blog/code-behind-for-resourcedictionary-in-wpf</link><guid isPermaLink="false">http://localhost:3000/blog/code-behind-for-resourcedictionary-in-wpf</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sat, 29 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Conditional Content Presenting via WPF ContentPresenter]]></title><description><![CDATA[<p>Sometimes you may find yourself facing a problem of having to switch between multiple presentations based on some condition. For example, you may want to display the same list of items differently depending on whether multiselect is enabled or not.</p>
<p>The easiest and the most obvious way to achieve this is to bind the <code>Visibility</code> property of the elements so that one is shown while the other is collapsed or hidden. However, this approach comes at a cost.</p>
<h2>Downsides of switching visibility</h2>
<p>Changing the value of <code>Visibility</code> property tends to get the job done but it has some noticeable drawbacks:</p>
<ul>
<li>You have to use a converter to turn the bound value into <code>Visibility</code>.</li>
<li>It gets complicated when there are more than two presentations to switch between or when there is more than one condition.</li>
<li>Even when collapsed or hidden, all of the UI elements still remain in the visual tree.</li>
</ul>
<p>The last point is something that tends to get overlooked and may lead to problems. When you make an element invisible, be it by setting the <code>Visibility</code> to <code>Hidden</code> or <code>Collapsed</code>, it doesn't actually disappear from the visual tree. This means it still takes part in most interactions, including bindings. Additionally, if a hidden element has a binding that fails, an exception will be raised and silently suppressed by the framework, potentially causing performance issues.</p>
<h2>Using ContentPresenter</h2>
<p>To address this problem more efficiently you can use <code>ContentPresenter</code> instead. This control can switch its content using predefined triggers and data templates.</p>
<p>Here's an example of how a typical setup may look like using <code>ContentPresenter</code>:</p>
<pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ContentPresenter</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment">&#x3C;!-- Presentations --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ContentPresenter.Resources</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>DataTemplate</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ComboBoxPresenter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ComboBox</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding Items}<span class="token punctuation">"</span></span> <span class="token attr-name">IsReadOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>DataTemplate</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>DataTemplate</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ListBoxPresenter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ListBox</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding Items}<span class="token punctuation">"</span></span> <span class="token attr-name">SelectionMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Multiple<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>DataTemplate</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ContentPresenter.Resources</span><span class="token punctuation">></span></span>

    <span class="token comment">&#x3C;!-- Triggers --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ContentPresenter.Style</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Style</span> <span class="token attr-name">TargetType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{x:Type ContentPresenter}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Style.Triggers</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>DataTrigger</span> <span class="token attr-name">Binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding IsMultiselect}<span class="token punctuation">"</span></span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>False<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Setter</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ContentTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{StaticResource ComboBoxPresenter}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>DataTrigger</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>DataTrigger</span> <span class="token attr-name">Binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{Binding IsMultiselect}<span class="token punctuation">"</span></span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>Setter</span> <span class="token attr-name">Property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ContentTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">Value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{StaticResource ListBoxPresenter}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>DataTrigger</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Style.Triggers</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>Style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ContentPresenter.Style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ContentPresenter</span><span class="token punctuation">></span></span>
</code></pre>
<p>Here we bind the <code>Content</code> property to the current <code>DataContext</code> so that it can be accessed by the data templates.</p>
<p>The <code>ContentPresenter.Resources</code> lists data templates used for each separate presentation -- in this case it's a combobox and a listbox bound to the same collection. To configure which data template is used when, we declare a set of triggers that check the value of the <code>IsMultiselect</code> property and switch the <code>ContentTemplate</code> accordingly.</p>
<p>Note how using triggers gives us more flexibility -- we don't need to use converters in order to turn <code>IsMultiselect</code> into an instance of <code>Visibility</code>, we just bind to it directly.</p>
<p>Using this approach we're also not leaving any unnecessary mess in the visual tree because we're changing the actual content instead of just hiding it.</p>]]></description><link>http://localhost:3000/blog/conditional-content-presenting-via-wpf-contentpresenter</link><guid isPermaLink="false">http://localhost:3000/blog/conditional-content-presenting-via-wpf-contentpresenter</guid><category><![CDATA[dotnet]]></category><category><![CDATA[xaml]]></category><category><![CDATA[wpf]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Fri, 28 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Parsing Steam Market]]></title><description><![CDATA[<p>At some point, I was contracted to make a WordPress plugin that displays some basic information on an item from Steam Market. It had to show its name, image and the current lowest price.</p>
<p>I was initially hoping that there would be some sort of API for this but unfortunately there isn't. Probably because it would make developing bots a bit too easy.</p>
<p>Having spent some time inspecting the listing pages with Chrome’s developer console, I’ve discovered that all of the pricing information is pulled using a single AJAX request which can be easily reverse-engineered. Let’s take a look at how it works.</p>
<h2>Getting pricing info</h2>
<p>Here's the request that Steam's frontend uses to get latest pricing info:</p>
<pre class="language-php"><code class="language-php"><span class="token variable">$url</span> <span class="token operator">=</span>
    <span class="token single-quoted-string string">'http://steamcommunity.com/market/priceoverview/'</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'?market_hash_name='</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'&#x26;appid='</span><span class="token punctuation">.</span><span class="token variable">$game</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'&#x26;currency='</span><span class="token punctuation">.</span><span class="token variable">$currency</span><span class="token punctuation">;</span>
</code></pre>
<p>It has 3 required parameters:</p>
<ul>
<li><code>market_hash_name</code> -- full name of the item as it appears on the market (URL-encoded).</li>
<li><code>appid</code> -- ID of the app (game) where this item can be found.</li>
<li><code>currency</code> -- ID of the currency in which we want our prices to be shown.</li>
</ul>
<p>You can get the values for the first two parameters straight from the item's URL. For example, if we were interested in <a href="https://steamcommunity.com/market/listings/730/AK-47%20%7C%20Redline%20%28Field-Tested%29">AK-47 | Redline</a>, we'd be able to inspect the URL and see that the value of <code>appid</code> is <code>730</code> while <code>market_hash_name</code> is equal to <code>AK-47%20%7C%20Redline%20%28Field-Tested%29</code>.</p>
<p><img src="http://localhost:3000/Example.png" alt="example listing"></p>
<p>We still need to set the value for the third required parameter, <code>currency</code>. I'm not sure what is the full list of supported currencies and their IDs, but the value of <code>1</code> seems to correspond to USD so we'll use that.</p>
<p>Our final URL with all the parameters set should look like this:</p>
<p><code>http://steamcommunity.com/market/priceoverview/?market_hash_name=AK-47%20%7C%20Redline%20%28Field-Tested%29&#x26;appid=730&#x26;currency=1</code></p>
<p>If we send a GET request with this URL we will get a response such as this one:</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"lowest_price"</span><span class="token operator">:</span> <span class="token string">"$13.07"</span><span class="token punctuation">,</span>
  <span class="token property">"volume"</span><span class="token operator">:</span> <span class="token string">"710"</span><span class="token punctuation">,</span>
  <span class="token property">"median_price"</span><span class="token operator">:</span> <span class="token string">"$12.74"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, it doesn't provide very much but it contains aggregated pricing information, which is exactly what we need.</p>
<p>It's also worth noting that sometimes the response may not contain <code>median_price</code> and <code>volume</code>. I'm not sure why it happens but make sure to handle such cases too.</p>
<p>Besides that, I've found that Steam may start throttling you if you send too many requests, so it's a good idea to cache responses for at least 10 minutes.</p>
<h2>Getting the image</h2>
<p>So far we were able to get the price of an item but not its image. Unfortunately, it seems that there's no obvious correlation between <code>market_hash_name</code> and image URL so we won't be able to guess it.</p>
<p>To make matters worse, a big portion of the page including the image is rendered server-side so there's no way to reverse-engineer it.</p>
<p>Luckily, the listings at the bottom of the page also contain the image and they are rendered asynchronously using another AJAX request.</p>
<p><img src="http://localhost:3000/Listings.png" alt="listings"></p>
<p>The aforementioned request looks like this:</p>
<pre class="language-php"><code class="language-php"><span class="token variable">$url</span> <span class="token operator">=</span>
    <span class="token single-quoted-string string">'http://steamcommunity.com/market/listings/'</span><span class="token punctuation">.</span><span class="token variable">$game</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/render'</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'?start=0'</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'&#x26;count=1'</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'&#x26;currency='</span><span class="token punctuation">.</span><span class="token variable">$currency</span><span class="token punctuation">.</span>
    <span class="token single-quoted-string string">'&#x26;format=json'</span><span class="token punctuation">;</span>
</code></pre>
<p>It's a bit different than the previous one but it takes the same parameters. In fact, the base of this request is the item's listing URL we've inspected earlier.</p>
<p>By setting <code>start</code> to <code>0</code> and <code>count</code> to <code>1</code> we are limiting the response to one listing since we are only interested in the image which is the same for all listings anyway.</p>
<p>Finally, the fully formed URL should look something like this:</p>
<p><code>http://steamcommunity.com/market/listings/730/AK-47%20%7C%20Redline%20%28Field-Tested%29/render?start=0&#x26;count=1&#x26;currency=1&#x26;format=json</code></p>
<p>A GET request with this URL will return a rather large JSON response that contains raw HTML inside (I truncated most of it for brevity):</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"success"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">"pagesize"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
  <span class="token property">"total_count"</span><span class="token operator">:</span> <span class="token number">2302</span><span class="token punctuation">,</span>
  <span class="token property">"results_html"</span><span class="token operator">:</span> <span class="token string">"&#x3C;div class=\"market_listing_table_header\">...&#x3C;/div>"</span>
<span class="token punctuation">}</span>
</code></pre>
<p>To get the image, we need to parse the HTML inside <code>results_html</code> and find an <code>&#x3C;img></code> element with <code>class="market_listing_item_img"</code>. We can do that by querying the DOM with a CSS selector <code>img.market_listing_item_img</code>. The URL, which is the value of <code>src</code> attribute, should look like this:</p>
<p><code>http://steamcommunity-a.akamaihd.net/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpot7HxfDhjxszJemkV09-5lpKKqPrxN7LEmyVQ7MEpiLuSrYmnjQO3-UdsZGHyd4_Bd1RvNQ7T_FDrw-_ng5Pu75iY1zI97bhLsvQz/62fx62f/</code></p>
<p><img src="https://steamcommunity-a.akamaihd.net/economy/image/-9a81dlWLwJ2UUGcVs_nsVtzdOEdtWwKGZZLQHTxDZ7I56KU0Zwwo4NUX4oFJZEHLbXH5ApeO4YmlhxYQknCRvCo04DEVlxkKgpot7HxfDhjxszJemkV09-5lpKKqPrxN7LEmyVQ7MEpiLuSrYmnjQO3-UdsZGHyd4_Bd1RvNQ7T_FDrw-_ng5Pu75iY1zI97bhLsvQz/256fx128f/" alt="AK 47 | Redline"></p>
<p>If you take a look at the end of the URL, you can see the portion where it specifies desired image dimensions, which is set to <code>62fx62f</code> in this case. We can change these to anything we want and the server will return an image of that size. However, if you specify a size which is too big, the image will be centered and remain at its maximum size while the rest of the canvas will be transparent.</p>
<h2>Source code</h2>
<p>The WordPress plugin I wrote is open source and you can <a href="https://github.com/Tyrrrz/WPSteamMarketExcerpt">check it out here</a>. Here's how it looks in action:</p>
<p><img src="http://localhost:3000/WPSME.png" alt="WPSteamMarketExcerpt"></p>]]></description><link>http://localhost:3000/blog/parsing-steam-market</link><guid isPermaLink="false">http://localhost:3000/blog/parsing-steam-market</guid><category><![CDATA[php]]></category><category><![CDATA[reverse-engineering]]></category><dc:creator><![CDATA[Alexey Golub]]></dc:creator><pubDate>Sat, 26 Sep 2015 00:00:00 GMT</pubDate></item></channel></rss>